
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008500  08008500  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08008508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0000084c  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f26  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ef  00000000  00000000  00038ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0003c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0003dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c2b  00000000  00000000  0003eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019eb4  00000000  00000000  00062b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda76  00000000  00000000  0007c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a43d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005250  00000000  00000000  0014a490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084c4 	.word	0x080084c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080084c4 	.word	0x080084c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint8_t pData[10]="hello amk\n";
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc6e 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81a 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f940 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f880 	bl	80005e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8ac 	bl	800063c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8da 	bl	800069c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 fba4 	bl	8007c34 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f90c 	bl	8000708 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f0:	f007 fbc6 	bl	8007c80 <MX_USB_HOST_Process>
    HAL_UART_Transmit(&huart2, pData, 10, 100);
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	220a      	movs	r2, #10
 80004f8:	4902      	ldr	r1, [pc, #8]	; (8000504 <main+0x38>)
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <main+0x3c>)
 80004fc:	f004 f852 	bl	80045a4 <HAL_UART_Transmit>
    MX_USB_HOST_Process();
 8000500:	e7f6      	b.n	80004f0 <main+0x24>
 8000502:	bf00      	nop
 8000504:	20000000 	.word	0x20000000
 8000508:	200001ac 	.word	0x200001ac

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f007 fecc 	bl	80082b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f958 	bl	8003848 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 f9db 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fbb9 	bl	8003d38 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005cc:	f000 f9c4 	bl	8000958 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f002 fb2f 	bl	8002c80 <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f996 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000b8 	.word	0x200000b8
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_I2S3_Init+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_I2S3_Init+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_I2S3_Init+0x54>)
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <MX_I2S3_Init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2S3_Init+0x54>)
 800067c:	f002 fc44 	bl	8002f08 <HAL_I2S_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000686:	f000 f967 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000010c 	.word	0x2000010c
 8000694:	40003c00 	.word	0x40003c00
 8000698:	00017700 	.word	0x00017700

0800069c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <MX_SPI1_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e8:	220a      	movs	r2, #10
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_SPI1_Init+0x64>)
 80006ee:	f003 fe83 	bl	80043f8 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 f92e 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000154 	.word	0x20000154
 8000704:	40013000 	.word	0x40013000

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f003 fee3 	bl	800450a <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f905 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001ac 	.word	0x200001ac
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b72      	ldr	r3, [pc, #456]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a71      	ldr	r2, [pc, #452]	; (8000940 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b6b      	ldr	r3, [pc, #428]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a6a      	ldr	r2, [pc, #424]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b68      	ldr	r3, [pc, #416]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b64      	ldr	r3, [pc, #400]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a63      	ldr	r2, [pc, #396]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b61      	ldr	r3, [pc, #388]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b5d      	ldr	r3, [pc, #372]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a5c      	ldr	r2, [pc, #368]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b56      	ldr	r3, [pc, #344]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a55      	ldr	r2, [pc, #340]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4e      	ldr	r2, [pc, #312]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4849      	ldr	r0, [pc, #292]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000820:	f000 fe0a 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4847      	ldr	r0, [pc, #284]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800082a:	f000 fe05 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082e:	2200      	movs	r2, #0
 8000830:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000834:	4845      	ldr	r0, [pc, #276]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000836:	f000 fdff 	bl	8001438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483c      	ldr	r0, [pc, #240]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000852:	f000 fc55 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4836      	ldr	r0, [pc, #216]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800086e:	f000 fc47 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	482e      	ldr	r0, [pc, #184]	; (8000948 <MX_GPIO_Init+0x1ec>)
 800088e:	f000 fc37 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <MX_GPIO_Init+0x1f4>)
 80008a8:	f000 fc2a 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4825      	ldr	r0, [pc, #148]	; (8000954 <MX_GPIO_Init+0x1f8>)
 80008c0:	f000 fc1e 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0x1f8>)
 80008e2:	f000 fc0d 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000900:	f000 fbfe 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000918:	f000 fbf2 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000920:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fbe5 	bl	8001100 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40021000 	.word	0x40021000
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f000 fb6a 	bl	800107c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_I2C_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12c      	bne.n	8000a30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a04:	2304      	movs	r3, #4
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <HAL_I2C_MspInit+0x8c>)
 8000a10:	f000 fb76 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_I2S_MspInit+0xf0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d15a      	bne.n	8000b2a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a74:	2301      	movs	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a78:	23c0      	movs	r3, #192	; 0xc0
 8000a7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 fb77 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f7ff ff62 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a26      	ldr	r2, [pc, #152]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af8:	2306      	movs	r3, #6
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <HAL_I2S_MspInit+0xf8>)
 8000b04:	f000 fafc 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b08:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <HAL_I2S_MspInit+0xfc>)
 8000b26:	f000 faeb 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3738      	adds	r7, #56	; 0x38
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40003c00 	.word	0x40003c00
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020800 	.word	0x40020800

08000b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_SPI_MspInit+0x8c>)
 8000bba:	f000 faa1 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4a:	f000 fa59 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f8d0 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f000 fe3f 	bl	8001940 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200005d4 	.word	0x200005d4

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f007 faa2 	bl	8008244 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20020000 	.word	0x20020000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200001f0 	.word	0x200001f0
 8000d34:	200008e8 	.word	0x200008e8

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff ffd7 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f007 fa61 	bl	8008250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fb9d 	bl	80004cc <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000da0:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 8000da4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000da8:	200008e8 	.word	0x200008e8

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f94f 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fdbe 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f967 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f92f 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000014 	.word	0x20000014
 8000e50:	20000010 	.word	0x20000010

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000014 	.word	0x20000014
 8000e78:	200001f4 	.word	0x200001f4

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200001f4 	.word	0x200001f4

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000014 	.word	0x20000014

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff3e 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff31 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e16b      	b.n	80013f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 815a 	bne.w	80013ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80b4 	beq.w	80013ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b60      	ldr	r3, [pc, #384]	; (800140c <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a5f      	ldr	r2, [pc, #380]	; (800140c <HAL_GPIO_Init+0x30c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b5d      	ldr	r3, [pc, #372]	; (800140c <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a5b      	ldr	r2, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x310>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x320>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x324>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x328>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20a>
 8001306:	2307      	movs	r3, #7
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130a:	2308      	movs	r3, #8
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x310>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001394:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x334>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae90 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800146a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146c:	b08f      	sub	sp, #60	; 0x3c
 800146e:	af0a      	add	r7, sp, #40	; 0x28
 8001470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e054      	b.n	8001526 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f006 fc2a 	bl	8007cf0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fc58 	bl	8004d70 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	687e      	ldr	r6, [r7, #4]
 80014c8:	466d      	mov	r5, sp
 80014ca:	f106 0410 	add.w	r4, r6, #16
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014da:	e885 0003 	stmia.w	r5, {r0, r1}
 80014de:	1d33      	adds	r3, r6, #4
 80014e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f003 fbd2 	bl	8004c8c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fc4f 	bl	8004d92 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	687e      	ldr	r6, [r7, #4]
 80014fc:	466d      	mov	r5, sp
 80014fe:	f106 0410 	add.w	r4, r6, #16
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001512:	1d33      	adds	r3, r6, #4
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f003 fdd8 	bl	80050cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800152e:	b590      	push	{r4, r7, lr}
 8001530:	b089      	sub	sp, #36	; 0x24
 8001532:	af04      	add	r7, sp, #16
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	4608      	mov	r0, r1
 8001538:	4611      	mov	r1, r2
 800153a:	461a      	mov	r2, r3
 800153c:	4603      	mov	r3, r0
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	460b      	mov	r3, r1
 8001542:	70bb      	strb	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_HCD_HC_Init+0x28>
 8001552:	2302      	movs	r3, #2
 8001554:	e076      	b.n	8001644 <HAL_HCD_HC_Init+0x116>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	333d      	adds	r3, #61	; 0x3d
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	212c      	movs	r1, #44	; 0x2c
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	3338      	adds	r3, #56	; 0x38
 800157e:	787a      	ldrb	r2, [r7, #1]
 8001580:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	212c      	movs	r1, #44	; 0x2c
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	4413      	add	r3, r2
 800158e:	3340      	adds	r3, #64	; 0x40
 8001590:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001592:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	3339      	adds	r3, #57	; 0x39
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	333f      	adds	r3, #63	; 0x3f
 80015b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	78ba      	ldrb	r2, [r7, #2]
 80015be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015c2:	b2d0      	uxtb	r0, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	212c      	movs	r1, #44	; 0x2c
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	333a      	adds	r3, #58	; 0x3a
 80015d0:	4602      	mov	r2, r0
 80015d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da09      	bge.n	80015f0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	212c      	movs	r1, #44	; 0x2c
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	333b      	adds	r3, #59	; 0x3b
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e008      	b.n	8001602 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	212c      	movs	r1, #44	; 0x2c
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	333b      	adds	r3, #59	; 0x3b
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	333c      	adds	r3, #60	; 0x3c
 8001610:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001614:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	787c      	ldrb	r4, [r7, #1]
 800161c:	78ba      	ldrb	r2, [r7, #2]
 800161e:	78f9      	ldrb	r1, [r7, #3]
 8001620:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4623      	mov	r3, r4
 8001632:	f003 fed1 	bl	80053d8 <USB_HC_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}

0800164c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_HCD_HC_Halt+0x1e>
 8001666:	2302      	movs	r3, #2
 8001668:	e00f      	b.n	800168a <HAL_HCD_HC_Halt+0x3e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f004 f921 	bl	80058c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	70fb      	strb	r3, [r7, #3]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70bb      	strb	r3, [r7, #2]
 80016aa:	4613      	mov	r3, r2
 80016ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	333b      	adds	r3, #59	; 0x3b
 80016bc:	78ba      	ldrb	r2, [r7, #2]
 80016be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	212c      	movs	r1, #44	; 0x2c
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	333f      	adds	r3, #63	; 0x3f
 80016ce:	787a      	ldrb	r2, [r7, #1]
 80016d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016d2:	7c3b      	ldrb	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d112      	bne.n	80016fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	3342      	adds	r3, #66	; 0x42
 80016e6:	2203      	movs	r2, #3
 80016e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	333d      	adds	r3, #61	; 0x3d
 80016f8:	7f3a      	ldrb	r2, [r7, #28]
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e008      	b.n	8001710 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3342      	adds	r3, #66	; 0x42
 800170c:	2202      	movs	r2, #2
 800170e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b03      	cmp	r3, #3
 8001714:	f200 80c6 	bhi.w	80018a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001731 	.word	0x08001731
 8001724:	08001891 	.word	0x08001891
 8001728:	08001795 	.word	0x08001795
 800172c:	08001813 	.word	0x08001813
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	2b01      	cmp	r3, #1
 8001734:	f040 80b8 	bne.w	80018a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001738:	78bb      	ldrb	r3, [r7, #2]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 80b4 	bne.w	80018a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001740:	8b3b      	ldrh	r3, [r7, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	3355      	adds	r3, #85	; 0x55
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3355      	adds	r3, #85	; 0x55
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800177e:	e093      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
      break;
 8001792:	e089      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001794:	78bb      	ldrb	r3, [r7, #2]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11d      	bne.n	80017d6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3355      	adds	r3, #85	; 0x55
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017c0:	e073      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3342      	adds	r3, #66	; 0x42
 80017d0:	2202      	movs	r2, #2
 80017d2:	701a      	strb	r2, [r3, #0]
      break;
 80017d4:	e069      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	212c      	movs	r1, #44	; 0x2c
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	3354      	adds	r3, #84	; 0x54
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	212c      	movs	r1, #44	; 0x2c
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3342      	adds	r3, #66	; 0x42
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
      break;
 80017fc:	e055      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	3342      	adds	r3, #66	; 0x42
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
      break;
 8001810:	e04b      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001812:	78bb      	ldrb	r3, [r7, #2]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d11d      	bne.n	8001854 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3355      	adds	r3, #85	; 0x55
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800183e:	e034      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e02a      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3354      	adds	r3, #84	; 0x54
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3342      	adds	r3, #66	; 0x42
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
      break;
 800187a:	e016      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3342      	adds	r3, #66	; 0x42
 800188a:	2202      	movs	r2, #2
 800188c:	701a      	strb	r2, [r3, #0]
      break;
 800188e:	e00c      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3342      	adds	r3, #66	; 0x42
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
      break;
 80018a2:	e002      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3344      	adds	r3, #68	; 0x44
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	8b3a      	ldrh	r2, [r7, #24]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	202c      	movs	r0, #44	; 0x2c
 80018c4:	fb00 f303 	mul.w	r3, r0, r3
 80018c8:	440b      	add	r3, r1
 80018ca:	334c      	adds	r3, #76	; 0x4c
 80018cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3360      	adds	r3, #96	; 0x60
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3350      	adds	r3, #80	; 0x50
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3339      	adds	r3, #57	; 0x39
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3361      	adds	r3, #97	; 0x61
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	222c      	movs	r2, #44	; 0x2c
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	3338      	adds	r3, #56	; 0x38
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d1      	adds	r1, r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	f003 fe74 	bl	800561c <USB_HC_StartXfer>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop

08001940 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fb75 	bl	8005046 <USB_GetMode>
 800195c:	4603      	mov	r3, r0
 800195e:	2b01      	cmp	r3, #1
 8001960:	f040 80f6 	bne.w	8001b50 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fb59 	bl	8005020 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80ec 	beq.w	8001b4e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fb50 	bl	8005020 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800198a:	d104      	bne.n	8001996 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001994:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fb40 	bl	8005020 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019aa:	d104      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fb30 	bl	8005020 <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ca:	d104      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fb20 	bl	8005020 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d103      	bne.n	80019f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2202      	movs	r2, #2
 80019f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fb12 	bl	8005020 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a06:	d11c      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a22:	2110      	movs	r1, #16
 8001a24:	6938      	ldr	r0, [r7, #16]
 8001a26:	f003 fa01 	bl	8004e2c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a2a:	6938      	ldr	r0, [r7, #16]
 8001a2c:	f003 fa32 	bl	8004e94 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fc08 	bl	800524c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f006 f9d5 	bl	8007dec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 faea 	bl	8005020 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a56:	d102      	bne.n	8001a5e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f001 f89e 	bl	8002b9a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fadc 	bl	8005020 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d106      	bne.n	8001a80 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f006 f99e 	bl	8007db4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 facb 	bl	8005020 <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	d101      	bne.n	8001a98 <HAL_HCD_IRQHandler+0x158>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_HCD_IRQHandler+0x15a>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d012      	beq.n	8001ac4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0210 	bic.w	r2, r2, #16
 8001aac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 ffa1 	bl	80029f6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0210 	orr.w	r2, r2, #16
 8001ac2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 faa9 	bl	8005020 <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad8:	d13a      	bne.n	8001b50 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fede 	bl	80058a0 <USB_HC_ReadInterrupt>
 8001ae4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e025      	b.n	8001b38 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d018      	beq.n	8001b32 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b16:	d106      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8ab 	bl	8001c7a <HCD_HC_IN_IRQHandler>
 8001b24:	e005      	b.n	8001b32 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fbf9 	bl	8002324 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3d4      	bcc.n	8001aec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	e000      	b.n	8001b50 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b4e:	bf00      	nop
    }
  }
}
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_HCD_Start+0x16>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e013      	b.n	8001b94 <HAL_HCD_Start+0x3e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fbca 	bl	8005314 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 f8e2 	bl	8004d4e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_HCD_Stop+0x16>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e00d      	b.n	8001bce <HAL_HCD_Stop+0x32>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 ffb8 	bl	8005b34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fb6c 	bl	80052c0 <USB_ResetPort>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3360      	adds	r3, #96	; 0x60
 8001c0c:	781b      	ldrb	r3, [r3, #0]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3350      	adds	r3, #80	; 0x50
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fbb0 	bl	80053b4 <USB_GetCurrentFrame>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fb8b 	bl	8005386 <USB_GetHostSpeed>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d11a      	bne.n	8001ce0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2304      	movs	r3, #4
 8001cba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3361      	adds	r3, #97	; 0x61
 8001cca:	2206      	movs	r2, #6
 8001ccc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fdf2 	bl	80058c2 <USB_HC_Halt>
 8001cde:	e0af      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf6:	d11b      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	461a      	mov	r2, r3
 8001d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	3361      	adds	r3, #97	; 0x61
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fdca 	bl	80058c2 <USB_HC_Halt>
 8001d2e:	e087      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d109      	bne.n	8001d5a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	461a      	mov	r2, r3
 8001d54:	2320      	movs	r3, #32
 8001d56:	6093      	str	r3, [r2, #8]
 8001d58:	e072      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d11a      	bne.n	8001da6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2308      	movs	r3, #8
 8001d80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3361      	adds	r3, #97	; 0x61
 8001d90:	2205      	movs	r2, #5
 8001d92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fd8f 	bl	80058c2 <USB_HC_Halt>
 8001da4:	e04c      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbc:	d11b      	bne.n	8001df6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3361      	adds	r3, #97	; 0x61
 8001de0:	2208      	movs	r2, #8
 8001de2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fd67 	bl	80058c2 <USB_HC_Halt>
 8001df4:	e024      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d119      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3361      	adds	r3, #97	; 0x61
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 fd41 	bl	80058c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e56:	d112      	bne.n	8001e7e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fd2d 	bl	80058c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e7c:	e24e      	b.n	800231c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 80df 	bne.w	8002054 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3348      	adds	r3, #72	; 0x48
 8001eac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	0159      	lsls	r1, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	202c      	movs	r0, #44	; 0x2c
 8001ec8:	fb00 f303 	mul.w	r3, r0, r3
 8001ecc:	440b      	add	r3, r1
 8001ece:	3350      	adds	r3, #80	; 0x50
 8001ed0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3361      	adds	r3, #97	; 0x61
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	335c      	adds	r3, #92	; 0x5c
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	461a      	mov	r2, r3
 8001f04:	2301      	movs	r3, #1
 8001f06:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	333f      	adds	r3, #63	; 0x3f
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	333f      	adds	r3, #63	; 0x3f
 8001f2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d111      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fcc1 	bl	80058c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2310      	movs	r3, #16
 8001f50:	6093      	str	r3, [r2, #8]
 8001f52:	e03a      	b.n	8001fca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	333f      	adds	r3, #63	; 0x3f
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d009      	beq.n	8001f7c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d126      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	0151      	lsls	r1, r2, #5
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	440a      	add	r2, r1
 8001f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f9a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3360      	adds	r3, #96	; 0x60
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	202c      	movs	r0, #44	; 0x2c
 8001fb8:	fb00 f303 	mul.w	r3, r0, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3360      	adds	r3, #96	; 0x60
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f005 ff1f 	bl	8007e08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12b      	bne.n	800202a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	202c      	movs	r0, #44	; 0x2c
 8001fe8:	fb00 f202 	mul.w	r2, r0, r2
 8001fec:	440a      	add	r2, r1
 8001fee:	3240      	adds	r2, #64	; 0x40
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 818e 	beq.w	800231c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3354      	adds	r3, #84	; 0x54
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2d8      	uxtb	r0, r3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3354      	adds	r3, #84	; 0x54
 8002024:	4602      	mov	r2, r0
 8002026:	701a      	strb	r2, [r3, #0]
}
 8002028:	e178      	b.n	800231c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3354      	adds	r3, #84	; 0x54
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3354      	adds	r3, #84	; 0x54
 800204e:	4602      	mov	r2, r0
 8002050:	701a      	strb	r2, [r3, #0]
}
 8002052:	e163      	b.n	800231c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 80f6 	bne.w	8002258 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3361      	adds	r3, #97	; 0x61
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d109      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3360      	adds	r3, #96	; 0x60
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e0c9      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3361      	adds	r3, #97	; 0x61
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d109      	bne.n	80020bc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3360      	adds	r3, #96	; 0x60
 80020b6:	2205      	movs	r2, #5
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e0b5      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3361      	adds	r3, #97	; 0x61
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d009      	beq.n	80020e4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3361      	adds	r3, #97	; 0x61
 80020de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d150      	bne.n	8002186 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	335c      	adds	r3, #92	; 0x5c
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	202c      	movs	r0, #44	; 0x2c
 80020fc:	fb00 f303 	mul.w	r3, r0, r3
 8002100:	440b      	add	r3, r1
 8002102:	335c      	adds	r3, #92	; 0x5c
 8002104:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	335c      	adds	r3, #92	; 0x5c
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d912      	bls.n	8002140 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3360      	adds	r3, #96	; 0x60
 800213a:	2204      	movs	r2, #4
 800213c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800213e:	e073      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002168:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002170:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002184:	e050      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3361      	adds	r3, #97	; 0x61
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d122      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3360      	adds	r3, #96	; 0x60
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e023      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b07      	cmp	r3, #7
 80021f2:	d119      	bne.n	8002228 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	202c      	movs	r0, #44	; 0x2c
 800220c:	fb00 f303 	mul.w	r3, r0, r3
 8002210:	440b      	add	r3, r1
 8002212:	335c      	adds	r3, #92	; 0x5c
 8002214:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3360      	adds	r3, #96	; 0x60
 8002224:	2204      	movs	r2, #4
 8002226:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	2302      	movs	r3, #2
 8002238:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	b2d9      	uxtb	r1, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	202c      	movs	r0, #44	; 0x2c
 8002244:	fb00 f303 	mul.w	r3, r0, r3
 8002248:	4413      	add	r3, r2
 800224a:	3360      	adds	r3, #96	; 0x60
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f005 fdd9 	bl	8007e08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002256:	e061      	b.n	800231c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b10      	cmp	r3, #16
 800226c:	d156      	bne.n	800231c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	333f      	adds	r3, #63	; 0x3f
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d111      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	335c      	adds	r3, #92	; 0x5c
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fb0f 	bl	80058c2 <USB_HC_Halt>
 80022a4:	e031      	b.n	800230a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333f      	adds	r3, #63	; 0x3f
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	333f      	adds	r3, #63	; 0x3f
 80022c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d11d      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d110      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3361      	adds	r3, #97	; 0x61
 80022f6:	2203      	movs	r2, #3
 80022f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f003 fadc 	bl	80058c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	2310      	movs	r3, #16
 800231a:	6093      	str	r3, [r2, #8]
}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11a      	bne.n	800238a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2304      	movs	r3, #4
 8002364:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3361      	adds	r3, #97	; 0x61
 8002374:	2206      	movs	r2, #6
 8002376:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fa9d 	bl	80058c2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002388:	e331      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b20      	cmp	r3, #32
 800239e:	d12e      	bne.n	80023fe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	2320      	movs	r3, #32
 80023b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	333d      	adds	r3, #61	; 0x3d
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	f040 8313 	bne.w	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	333d      	adds	r3, #61	; 0x3d
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3360      	adds	r3, #96	; 0x60
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fa63 	bl	80058c2 <USB_HC_Halt>
}
 80023fc:	e2f7      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002414:	d112      	bne.n	800243c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002428:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fa44 	bl	80058c2 <USB_HC_Halt>
}
 800243a:	e2d8      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d140      	bne.n	80024d4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	335c      	adds	r3, #92	; 0x5c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d111      	bne.n	800249e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	333d      	adds	r3, #61	; 0x3d
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	461a      	mov	r2, r3
 800249a:	2340      	movs	r3, #64	; 0x40
 800249c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	2301      	movs	r3, #1
 80024ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f9f8 	bl	80058c2 <USB_HC_Halt>
}
 80024d2:	e28c      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d12c      	bne.n	8002544 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3361      	adds	r3, #97	; 0x61
 80024f8:	2204      	movs	r2, #4
 80024fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	333d      	adds	r3, #61	; 0x3d
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	335c      	adds	r3, #92	; 0x5c
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f9c9 	bl	80058c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	2340      	movs	r3, #64	; 0x40
 8002540:	6093      	str	r3, [r2, #8]
}
 8002542:	e254      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b08      	cmp	r3, #8
 8002558:	d11a      	bne.n	8002590 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2308      	movs	r3, #8
 800256a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	2205      	movs	r2, #5
 800257c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f003 f99a 	bl	80058c2 <USB_HC_Halt>
}
 800258e:	e22e      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d140      	bne.n	8002628 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	335c      	adds	r3, #92	; 0x5c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3361      	adds	r3, #97	; 0x61
 80025c6:	2203      	movs	r2, #3
 80025c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	333d      	adds	r3, #61	; 0x3d
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d112      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	333c      	adds	r3, #60	; 0x3c
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	333d      	adds	r3, #61	; 0x3d
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f957 	bl	80058c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	461a      	mov	r2, r3
 8002622:	2310      	movs	r3, #16
 8002624:	6093      	str	r3, [r2, #8]
}
 8002626:	e1e2      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d164      	bne.n	8002708 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d111      	bne.n	800266a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3361      	adds	r3, #97	; 0x61
 8002654:	2206      	movs	r2, #6
 8002656:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f003 f92d 	bl	80058c2 <USB_HC_Halt>
 8002668:	e044      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	335c      	adds	r3, #92	; 0x5c
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	202c      	movs	r0, #44	; 0x2c
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	440b      	add	r3, r1
 8002688:	335c      	adds	r3, #92	; 0x5c
 800268a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	335c      	adds	r3, #92	; 0x5c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d920      	bls.n	80026e2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	335c      	adds	r3, #92	; 0x5c
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3360      	adds	r3, #96	; 0x60
 80026c0:	2204      	movs	r2, #4
 80026c2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	b2d9      	uxtb	r1, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	202c      	movs	r0, #44	; 0x2c
 80026ce:	fb00 f303 	mul.w	r3, r0, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3360      	adds	r3, #96	; 0x60
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f005 fb94 	bl	8007e08 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026e0:	e008      	b.n	80026f4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	2202      	movs	r2, #2
 80026f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	6093      	str	r3, [r2, #8]
}
 8002706:	e172      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d11b      	bne.n	8002758 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3361      	adds	r3, #97	; 0x61
 800272e:	2208      	movs	r2, #8
 8002730:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f003 f8c0 	bl	80058c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	6093      	str	r3, [r2, #8]
}
 8002756:	e14a      	b.n	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	f040 813f 	bne.w	80029ee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3361      	adds	r3, #97	; 0x61
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d17d      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	212c      	movs	r1, #44	; 0x2c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	3360      	adds	r3, #96	; 0x60
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	333f      	adds	r3, #63	; 0x3f
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d00a      	beq.n	80027c0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333f      	adds	r3, #63	; 0x3f
 80027b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	f040 8100 	bne.w	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3355      	adds	r3, #85	; 0x55
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2d8      	uxtb	r0, r3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3355      	adds	r3, #85	; 0x55
 80027ec:	4602      	mov	r2, r0
 80027ee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	f040 80e3 	bne.w	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	334c      	adds	r3, #76	; 0x4c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80d8 	beq.w	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	334c      	adds	r3, #76	; 0x4c
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	202c      	movs	r0, #44	; 0x2c
 8002826:	fb00 f202 	mul.w	r2, r0, r2
 800282a:	440a      	add	r2, r1
 800282c:	3240      	adds	r2, #64	; 0x40
 800282e:	8812      	ldrh	r2, [r2, #0]
 8002830:	4413      	add	r3, r2
 8002832:	3b01      	subs	r3, #1
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	202c      	movs	r0, #44	; 0x2c
 800283a:	fb00 f202 	mul.w	r2, r0, r2
 800283e:	440a      	add	r2, r1
 8002840:	3240      	adds	r2, #64	; 0x40
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	fbb3 f3f2 	udiv	r3, r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80b5 	beq.w	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3355      	adds	r3, #85	; 0x55
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2d8      	uxtb	r0, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3355      	adds	r3, #85	; 0x55
 800287a:	4602      	mov	r2, r0
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e09f      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d109      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3360      	adds	r3, #96	; 0x60
 80028a2:	2202      	movs	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	e08b      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d109      	bne.n	80028d0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3360      	adds	r3, #96	; 0x60
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e077      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3361      	adds	r3, #97	; 0x61
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d109      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3360      	adds	r3, #96	; 0x60
 80028f2:	2205      	movs	r2, #5
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e063      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d009      	beq.n	8002920 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3361      	adds	r3, #97	; 0x61
 800291a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800291c:	2b08      	cmp	r3, #8
 800291e:	d14f      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	335c      	adds	r3, #92	; 0x5c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	202c      	movs	r0, #44	; 0x2c
 8002938:	fb00 f303 	mul.w	r3, r0, r3
 800293c:	440b      	add	r3, r1
 800293e:	335c      	adds	r3, #92	; 0x5c
 8002940:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	335c      	adds	r3, #92	; 0x5c
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d912      	bls.n	800297c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	335c      	adds	r3, #92	; 0x5c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3360      	adds	r3, #96	; 0x60
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e021      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	2202      	movs	r2, #2
 800298c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	461a      	mov	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	2302      	movs	r3, #2
 80029d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	b2d9      	uxtb	r1, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	202c      	movs	r0, #44	; 0x2c
 80029dc:	fb00 f303 	mul.w	r3, r0, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3360      	adds	r3, #96	; 0x60
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f005 fa0d 	bl	8007e08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b08a      	sub	sp, #40	; 0x28
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	0c5b      	lsrs	r3, r3, #17
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d004      	beq.n	8002a3c <HCD_RXQLVL_IRQHandler+0x46>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	f000 80a9 	beq.w	8002b8c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a3a:	e0aa      	b.n	8002b92 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a6 	beq.w	8002b90 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3344      	adds	r3, #68	; 0x44
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 809b 	beq.w	8002b90 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3350      	adds	r3, #80	; 0x50
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	202c      	movs	r0, #44	; 0x2c
 8002a74:	fb00 f303 	mul.w	r3, r0, r3
 8002a78:	440b      	add	r3, r1
 8002a7a:	334c      	adds	r3, #76	; 0x4c
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d87a      	bhi.n	8002b78 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3344      	adds	r3, #68	; 0x44
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f002 fa68 	bl	8004f70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3344      	adds	r3, #68	; 0x44
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	202c      	movs	r0, #44	; 0x2c
 8002aba:	fb00 f303 	mul.w	r3, r0, r3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3344      	adds	r3, #68	; 0x44
 8002ac2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3350      	adds	r3, #80	; 0x50
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	202c      	movs	r0, #44	; 0x2c
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3350      	adds	r3, #80	; 0x50
 8002ae6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	0cdb      	lsrs	r3, r3, #19
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3340      	adds	r3, #64	; 0x40
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d13c      	bne.n	8002b90 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d039      	beq.n	8002b90 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3354      	adds	r3, #84	; 0x54
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2d8      	uxtb	r0, r3
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	4602      	mov	r2, r0
 8002b74:	701a      	strb	r2, [r3, #0]
      break;
 8002b76:	e00b      	b.n	8002b90 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2204      	movs	r2, #4
 8002b88:	701a      	strb	r2, [r3, #0]
      break;
 8002b8a:	e001      	b.n	8002b90 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b90:	bf00      	nop
  }
}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bc6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d10b      	bne.n	8002bea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d102      	bne.n	8002be2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f005 f8f7 	bl	8007dd0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d132      	bne.n	8002c5a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d126      	bne.n	8002c54 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d113      	bne.n	8002c36 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c18:	d106      	bne.n	8002c28 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fb13 	bl	800524c <USB_InitFSLSPClkSel>
 8002c26:	e011      	b.n	8002c4c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 fb0c 	bl	800524c <USB_InitFSLSPClkSel>
 8002c34:	e00a      	b.n	8002c4c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d106      	bne.n	8002c4c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c44:	461a      	mov	r2, r3
 8002c46:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c4a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f005 f8e9 	bl	8007e24 <HAL_HCD_PortEnabled_Callback>
 8002c52:	e002      	b.n	8002c5a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f005 f8f3 	bl	8007e40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d103      	bne.n	8002c6c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f043 0320 	orr.w	r3, r3, #32
 8002c6a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e12b      	b.n	8002eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fd fe84 	bl	80009b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f001 fa20 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a81      	ldr	r2, [pc, #516]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d807      	bhi.n	8002d04 <HAL_I2C_Init+0x84>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a80      	ldr	r2, [pc, #512]	; (8002ef8 <HAL_I2C_Init+0x278>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e006      	b.n	8002d12 <HAL_I2C_Init+0x92>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a7d      	ldr	r2, [pc, #500]	; (8002efc <HAL_I2C_Init+0x27c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0e7      	b.n	8002eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a78      	ldr	r2, [pc, #480]	; (8002f00 <HAL_I2C_Init+0x280>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d802      	bhi.n	8002d54 <HAL_I2C_Init+0xd4>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	e009      	b.n	8002d68 <HAL_I2C_Init+0xe8>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	4a69      	ldr	r2, [pc, #420]	; (8002f04 <HAL_I2C_Init+0x284>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	3301      	adds	r3, #1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	495c      	ldr	r1, [pc, #368]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d819      	bhi.n	8002dbc <HAL_I2C_Init+0x13c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e59      	subs	r1, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_I2C_Init+0x138>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e59      	subs	r1, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	e051      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002db8:	2304      	movs	r3, #4
 8002dba:	e04f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <HAL_I2C_Init+0x168>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e012      	b.n	8002e0e <HAL_I2C_Init+0x18e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Init+0x196>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e022      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <HAL_I2C_Init+0x1bc>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e58      	subs	r0, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	440b      	add	r3, r1
 8002e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	e00f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	0099      	lsls	r1, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	6809      	ldr	r1, [r1, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6911      	ldr	r1, [r2, #16]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	000186a0 	.word	0x000186a0
 8002ef8:	001e847f 	.word	0x001e847f
 8002efc:	003d08ff 	.word	0x003d08ff
 8002f00:	431bde83 	.word	0x431bde83
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e128      	b.n	800316c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a90      	ldr	r2, [pc, #576]	; (8003174 <HAL_I2S_Init+0x26c>)
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fd fd85 	bl	8000a44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f50:	f023 030f 	bic.w	r3, r3, #15
 8002f54:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d060      	beq.n	8003028 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f6e:	2310      	movs	r3, #16
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e001      	b.n	8002f78 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d802      	bhi.n	8002f86 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f001 f9d8 	bl	800433c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f8c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f96:	d125      	bne.n	8002fe4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	3305      	adds	r3, #5
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e01f      	b.n	8003002 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	3305      	adds	r3, #5
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e00e      	b.n	8003002 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	3305      	adds	r3, #5
 8003000:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_I2S_Init+0x270>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	08db      	lsrs	r3, r3, #3
 800300c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e003      	b.n	8003030 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003028:	2302      	movs	r3, #2
 800302a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d902      	bls.n	800303c <HAL_I2S_Init+0x134>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2bff      	cmp	r3, #255	; 0xff
 800303a:	d907      	bls.n	800304c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e08f      	b.n	800316c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	ea42 0103 	orr.w	r1, r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	430a      	orrs	r2, r1
 800305e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800306a:	f023 030f 	bic.w	r3, r3, #15
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6851      	ldr	r1, [r2, #4]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6892      	ldr	r2, [r2, #8]
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68d2      	ldr	r2, [r2, #12]
 800307c:	4311      	orrs	r1, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6992      	ldr	r2, [r2, #24]
 8003082:	430a      	orrs	r2, r1
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d161      	bne.n	800315c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a38      	ldr	r2, [pc, #224]	; (800317c <HAL_I2S_Init+0x274>)
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a37      	ldr	r2, [pc, #220]	; (8003180 <HAL_I2S_Init+0x278>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_I2S_Init+0x1a4>
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_I2S_Init+0x27c>)
 80030aa:	e001      	b.n	80030b0 <HAL_I2S_Init+0x1a8>
 80030ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	4932      	ldr	r1, [pc, #200]	; (8003180 <HAL_I2S_Init+0x278>)
 80030b8:	428a      	cmp	r2, r1
 80030ba:	d101      	bne.n	80030c0 <HAL_I2S_Init+0x1b8>
 80030bc:	4a31      	ldr	r2, [pc, #196]	; (8003184 <HAL_I2S_Init+0x27c>)
 80030be:	e001      	b.n	80030c4 <HAL_I2S_Init+0x1bc>
 80030c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c8:	f023 030f 	bic.w	r3, r3, #15
 80030cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <HAL_I2S_Init+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_I2S_Init+0x1d4>
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <HAL_I2S_Init+0x27c>)
 80030da:	e001      	b.n	80030e0 <HAL_I2S_Init+0x1d8>
 80030dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e0:	2202      	movs	r2, #2
 80030e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a25      	ldr	r2, [pc, #148]	; (8003180 <HAL_I2S_Init+0x278>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_I2S_Init+0x1ea>
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_I2S_Init+0x27c>)
 80030f0:	e001      	b.n	80030f6 <HAL_I2S_Init+0x1ee>
 80030f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003102:	d003      	beq.n	800310c <HAL_I2S_Init+0x204>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800310c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	e001      	b.n	8003118 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003122:	4313      	orrs	r3, r2
 8003124:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800312c:	4313      	orrs	r3, r2
 800312e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003136:	4313      	orrs	r3, r2
 8003138:	b29a      	uxth	r2, r3
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	4313      	orrs	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003144:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_I2S_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_I2S_Init+0x24c>
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_I2S_Init+0x27c>)
 8003152:	e001      	b.n	8003158 <HAL_I2S_Init+0x250>
 8003154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003158:	897a      	ldrh	r2, [r7, #10]
 800315a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0800327f 	.word	0x0800327f
 8003178:	cccccccd 	.word	0xcccccccd
 800317c:	08003395 	.word	0x08003395
 8003180:	40003800 	.word	0x40003800
 8003184:	40003400 	.word	0x40003400

08003188 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003208:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffb8 	bl	8003188 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	b292      	uxth	r2, r2
 8003234:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	1c9a      	adds	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10e      	bne.n	8003276 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003266:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff93 	bl	800319c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b04      	cmp	r3, #4
 8003298:	d13a      	bne.n	8003310 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d109      	bne.n	80032b8 <I2S_IRQHandler+0x3a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d102      	bne.n	80032b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffb4 	bl	8003220 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d126      	bne.n	8003310 <I2S_IRQHandler+0x92>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d11f      	bne.n	8003310 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff50 	bl	80031b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b03      	cmp	r3, #3
 800331a:	d136      	bne.n	800338a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d109      	bne.n	800333a <I2S_IRQHandler+0xbc>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d102      	bne.n	800333a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff45 	bl	80031c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b08      	cmp	r3, #8
 8003342:	d122      	bne.n	800338a <I2S_IRQHandler+0x10c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b20      	cmp	r3, #32
 8003350:	d11b      	bne.n	800338a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003360:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	f043 0204 	orr.w	r2, r3, #4
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff13 	bl	80031b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a92      	ldr	r2, [pc, #584]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033ae:	4b92      	ldr	r3, [pc, #584]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033b0:	e001      	b.n	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8b      	ldr	r2, [pc, #556]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033ce:	e001      	b.n	80033d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d004      	beq.n	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 8099 	bne.w	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d107      	bne.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f925 	bl	8003650 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f9c8 	bl	80037b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d13a      	bne.n	80034a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d035      	beq.n	80034a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800343e:	4b6e      	ldr	r3, [pc, #440]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003440:	e001      	b.n	8003446 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4969      	ldr	r1, [pc, #420]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800344e:	428b      	cmp	r3, r1
 8003450:	d101      	bne.n	8003456 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003452:	4b69      	ldr	r3, [pc, #420]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003454:	e001      	b.n	800345a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800345a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800345e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800346e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fe88 	bl	80031b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	f040 80c3 	bne.w	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80bd 	beq.w	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034d2:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d4:	e001      	b.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4944      	ldr	r1, [pc, #272]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034e2:	428b      	cmp	r3, r1
 80034e4:	d101      	bne.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034e6:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e8:	e001      	b.n	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fe4a 	bl	80031b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800351c:	e089      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d107      	bne.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8be 	bl	80036b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8fd 	bl	800374c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d12f      	bne.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02a      	beq.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003574:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003582:	e001      	b.n	8003588 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4919      	ldr	r1, [pc, #100]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003590:	428b      	cmp	r3, r1
 8003592:	d101      	bne.n	8003598 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003596:	e001      	b.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f043 0202 	orr.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fdfa 	bl	80031b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d136      	bne.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d031      	beq.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035dc:	e001      	b.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4902      	ldr	r1, [pc, #8]	; (80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ea:	428b      	cmp	r3, r1
 80035ec:	d106      	bne.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035ee:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f0:	e006      	b.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035f2:	bf00      	nop
 80035f4:	40003800 	.word	0x40003800
 80035f8:	40003400 	.word	0x40003400
 80035fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003604:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003614:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fdc0 	bl	80031b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003630:	e000      	b.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003632:	bf00      	nop
}
 8003634:	bf00      	nop
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c99      	adds	r1, r3, #2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6251      	str	r1, [r2, #36]	; 0x24
 8003662:	881a      	ldrh	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d113      	bne.n	80036aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003690:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ffc9 	bl	800363c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c99      	adds	r1, r3, #2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6251      	str	r1, [r2, #36]	; 0x24
 80036c6:	8819      	ldrh	r1, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <I2SEx_TxISR_I2SExt+0x90>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <I2SEx_TxISR_I2SExt+0x22>
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <I2SEx_TxISR_I2SExt+0x94>)
 80036d4:	e001      	b.n	80036da <I2SEx_TxISR_I2SExt+0x26>
 80036d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036da:	460a      	mov	r2, r1
 80036dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d121      	bne.n	800373a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <I2SEx_TxISR_I2SExt+0x90>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <I2SEx_TxISR_I2SExt+0x50>
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <I2SEx_TxISR_I2SExt+0x94>)
 8003702:	e001      	b.n	8003708 <I2SEx_TxISR_I2SExt+0x54>
 8003704:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	490d      	ldr	r1, [pc, #52]	; (8003744 <I2SEx_TxISR_I2SExt+0x90>)
 8003710:	428b      	cmp	r3, r1
 8003712:	d101      	bne.n	8003718 <I2SEx_TxISR_I2SExt+0x64>
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <I2SEx_TxISR_I2SExt+0x94>)
 8003716:	e001      	b.n	800371c <I2SEx_TxISR_I2SExt+0x68>
 8003718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003720:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff81 	bl	800363c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40003800 	.word	0x40003800
 8003748:	40003400 	.word	0x40003400

0800374c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68d8      	ldr	r0, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	1c99      	adds	r1, r3, #2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003764:	b282      	uxth	r2, r0
 8003766:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d113      	bne.n	80037a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800378e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ff4a 	bl	800363c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <I2SEx_RxISR_I2SExt+0x90>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <I2SEx_RxISR_I2SExt+0x16>
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <I2SEx_RxISR_I2SExt+0x94>)
 80037c4:	e001      	b.n	80037ca <I2SEx_RxISR_I2SExt+0x1a>
 80037c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ca:	68d8      	ldr	r0, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	1c99      	adds	r1, r3, #2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037d6:	b282      	uxth	r2, r0
 80037d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d121      	bne.n	8003836 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <I2SEx_RxISR_I2SExt+0x90>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <I2SEx_RxISR_I2SExt+0x50>
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <I2SEx_RxISR_I2SExt+0x94>)
 80037fe:	e001      	b.n	8003804 <I2SEx_RxISR_I2SExt+0x54>
 8003800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	490d      	ldr	r1, [pc, #52]	; (8003840 <I2SEx_RxISR_I2SExt+0x90>)
 800380c:	428b      	cmp	r3, r1
 800380e:	d101      	bne.n	8003814 <I2SEx_RxISR_I2SExt+0x64>
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <I2SEx_RxISR_I2SExt+0x94>)
 8003812:	e001      	b.n	8003818 <I2SEx_RxISR_I2SExt+0x68>
 8003814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff03 	bl	800363c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40003800 	.word	0x40003800
 8003844:	40003400 	.word	0x40003400

08003848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e267      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00c      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003872:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800387a:	2b08      	cmp	r3, #8
 800387c:	d112      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4b82      	ldr	r3, [pc, #520]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b7e      	ldr	r3, [pc, #504]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e242      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6f      	ldr	r2, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6c      	ldr	r2, [pc, #432]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a68      	ldr	r2, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fabc 	bl	8000e7c <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fab8 	bl	8000e7c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e207      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd faa8 	bl	8000e7c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd faa4 	bl	8000e7c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e1f3      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395e:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003972:	2b08      	cmp	r3, #8
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003982:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1c7      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4937      	ldr	r1, [pc, #220]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	e03a      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x244>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fa5d 	bl	8000e7c <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fd fa59 	bl	8000e7c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1a8      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4925      	ldr	r1, [pc, #148]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x244>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fa3c 	bl	8000e7c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a08:	f7fd fa38 	bl	8000e7c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e187      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d036      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x248>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fa1c 	bl	8000e7c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd fa18 	bl	8000e7c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e167      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
 8003a66:	e01b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_OscConfig+0x248>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fa05 	bl	8000e7c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e00e      	b.n	8003a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fa01 	bl	8000e7c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d907      	bls.n	8003a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e150      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	42470000 	.word	0x42470000
 8003a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b88      	ldr	r3, [pc, #544]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ea      	bne.n	8003a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8097 	beq.w	8003bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a7c      	ldr	r2, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d118      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a73      	ldr	r2, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fd f9c1 	bl	8000e7c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afe:	f7fd f9bd 	bl	8000e7c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e10c      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCC_OscConfig+0x474>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x2ea>
 8003b24:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a63      	ldr	r2, [pc, #396]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x324>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x30c>
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	4a5e      	ldr	r2, [pc, #376]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6713      	str	r3, [r2, #112]	; 0x70
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a5b      	ldr	r2, [pc, #364]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x324>
 8003b54:	4b58      	ldr	r3, [pc, #352]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a57      	ldr	r2, [pc, #348]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd f982 	bl	8000e7c <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd f97e 	bl	8000e7c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0cb      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCC_OscConfig+0x334>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fd f96c 	bl	8000e7c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fd f968 	bl	8000e7c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0b5      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ee      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	4a38      	ldr	r2, [pc, #224]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a1 	beq.w	8003d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d05c      	beq.n	8003cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d141      	bne.n	8003c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fd f93c 	bl	8000e7c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd f938 	bl	8000e7c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e087      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	491b      	ldr	r1, [pc, #108]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd f911 	bl	8000e7c <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fd f90d 	bl	8000e7c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e05c      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x416>
 8003c7c:	e054      	b.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd f8fa 	bl	8000e7c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd f8f6 	bl	8000e7c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e045      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x444>
 8003caa:	e03d      	b.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e038      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x4ec>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d028      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d121      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d11a      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0cc      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d90c      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0b8      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da4:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a52      	ldr	r2, [pc, #328]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b50      	ldr	r3, [pc, #320]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	494d      	ldr	r1, [pc, #308]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d119      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e06f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e067      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b37      	ldr	r3, [pc, #220]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4934      	ldr	r1, [pc, #208]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fd f828 	bl	8000e7c <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fd f824 	bl	8000e7c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04f      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d20c      	bcs.n	8003e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e032      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	490e      	ldr	r1, [pc, #56]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ebe:	f000 f821 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490a      	ldr	r1, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc ff88 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023c00 	.word	0x40023c00
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	080084e0 	.word	0x080084e0
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	20000010 	.word	0x20000010

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b094      	sub	sp, #80	; 0x50
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f10:	2300      	movs	r3, #0
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	2300      	movs	r3, #0
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1c:	4b79      	ldr	r3, [pc, #484]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d00d      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x40>
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	f200 80e1 	bhi.w	80040f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f36:	e0db      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f3c:	e0db      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3e:	4b73      	ldr	r3, [pc, #460]	; (800410c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f42:	e0d8      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f44:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4e:	4b6d      	ldr	r3, [pc, #436]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d063      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
 8003f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	0159      	lsls	r1, r3, #5
 8003f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f88:	0150      	lsls	r0, r2, #5
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4621      	mov	r1, r4
 8003f90:	1a51      	subs	r1, r2, r1
 8003f92:	6139      	str	r1, [r7, #16]
 8003f94:	4629      	mov	r1, r5
 8003f96:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa8:	4659      	mov	r1, fp
 8003faa:	018b      	lsls	r3, r1, #6
 8003fac:	4651      	mov	r1, sl
 8003fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	018a      	lsls	r2, r1, #6
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	4699      	mov	r9, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	eb18 0303 	adds.w	r3, r8, r3
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	462b      	mov	r3, r5
 8003fe4:	eb49 0303 	adc.w	r3, r9, r3
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	024b      	lsls	r3, r1, #9
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004000:	4621      	mov	r1, r4
 8004002:	024a      	lsls	r2, r1, #9
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	2200      	movs	r2, #0
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
 800400e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004014:	f7fc f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	e058      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	4618      	mov	r0, r3
 800402c:	4611      	mov	r1, r2
 800402e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	0159      	lsls	r1, r3, #5
 800404a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404e:	0150      	lsls	r0, r2, #5
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4641      	mov	r1, r8
 8004056:	ebb2 0a01 	subs.w	sl, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800406c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004074:	ebb2 040a 	subs.w	r4, r2, sl
 8004078:	eb63 050b 	sbc.w	r5, r3, fp
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	00eb      	lsls	r3, r5, #3
 8004086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408a:	00e2      	lsls	r2, r4, #3
 800408c:	4614      	mov	r4, r2
 800408e:	461d      	mov	r5, r3
 8004090:	4643      	mov	r3, r8
 8004092:	18e3      	adds	r3, r4, r3
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	464b      	mov	r3, r9
 8004098:	eb45 0303 	adc.w	r3, r5, r3
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040aa:	4629      	mov	r1, r5
 80040ac:	028b      	lsls	r3, r1, #10
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b4:	4621      	mov	r1, r4
 80040b6:	028a      	lsls	r2, r1, #10
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	61fa      	str	r2, [r7, #28]
 80040c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c8:	f7fc f87e 	bl	80001c8 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x204>)
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3750      	adds	r7, #80	; 0x50
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	007a1200 	.word	0x007a1200

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	2000000c 	.word	0x2000000c

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	080084f0 	.word	0x080084f0

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004154:	f7ff ffdc 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0b5b      	lsrs	r3, r3, #13
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	080084f0 	.word	0x080084f0

08004178 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d035      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041a0:	4b62      	ldr	r3, [pc, #392]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041a6:	f7fc fe69 	bl	8000e7c <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041ae:	f7fc fe65 	bl	8000e7c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0b0      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c0:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	019a      	lsls	r2, r3, #6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	071b      	lsls	r3, r3, #28
 80041d8:	4955      	ldr	r1, [pc, #340]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041e0:	4b52      	ldr	r3, [pc, #328]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041e6:	f7fc fe49 	bl	8000e7c <HAL_GetTick>
 80041ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041ee:	f7fc fe45 	bl	8000e7c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e090      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004200:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8083 	beq.w	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	4a43      	ldr	r2, [pc, #268]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	; 0x40
 800422a:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3e      	ldr	r2, [pc, #248]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004242:	f7fc fe1b 	bl	8000e7c <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fc fe17 	bl	8000e7c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e062      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800425c:	4b35      	ldr	r3, [pc, #212]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004268:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02f      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d028      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004286:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b28      	ldr	r3, [pc, #160]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d114      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fc fde5 	bl	8000e7c <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b4:	e00a      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fc fde1 	bl	8000e7c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e02a      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ee      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e4:	d10d      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	490d      	ldr	r1, [pc, #52]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
 8004300:	e005      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004308:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800430c:	6093      	str	r3, [r2, #8]
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431a:	4905      	ldr	r1, [pc, #20]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	42470068 	.word	0x42470068
 8004330:	40023800 	.word	0x40023800
 8004334:	40007000 	.word	0x40007000
 8004338:	42470e40 	.word	0x42470e40

0800433c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d13e      	bne.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d12f      	bne.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004370:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004372:	617b      	str	r3, [r7, #20]
          break;
 8004374:	e02f      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004382:	d108      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004384:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e007      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c0:	0f1b      	lsrs	r3, r3, #28
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
          break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
          break;
 80043d4:	bf00      	nop
        }
      }
      break;
 80043d6:	bf00      	nop
    }
  }
  return frequency;
 80043d8:	697b      	ldr	r3, [r7, #20]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00bb8000 	.word	0x00bb8000
 80043f0:	007a1200 	.word	0x007a1200
 80043f4:	00f42400 	.word	0x00f42400

080043f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e07b      	b.n	8004502 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441a:	d009      	beq.n	8004430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
 8004422:	e005      	b.n	8004430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc fb7a 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004466:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	ea42 0103 	orr.w	r1, r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	f003 0104 	and.w	r1, r3, #4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f003 0210 	and.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e03f      	b.n	800459c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fc fb4f 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2224      	movs	r2, #36	; 0x24
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800454c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f928 	bl	80047a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004562:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004572:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004582:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d17c      	bne.n	80046be <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_UART_Transmit+0x2c>
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e075      	b.n	80046c0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit+0x3e>
 80045de:	2302      	movs	r3, #2
 80045e0:	e06e      	b.n	80046c0 <HAL_UART_Transmit+0x11c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2221      	movs	r2, #33	; 0x21
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f8:	f7fc fc40 	bl	8000e7c <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d108      	bne.n	8004626 <HAL_UART_Transmit+0x82>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e003      	b.n	800462e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004636:	e02a      	b.n	800468e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f840 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e036      	b.n	80046c0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004666:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	3302      	adds	r3, #2
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e007      	b.n	8004680 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	781a      	ldrb	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3301      	adds	r3, #1
 800467e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1cf      	bne.n	8004638 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2200      	movs	r2, #0
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f810 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e006      	b.n	80046c0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e000      	b.n	80046c0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
  }
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b090      	sub	sp, #64	; 0x40
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	e050      	b.n	800477c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d04c      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046e8:	f7fc fbc8 	bl	8000e7c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d241      	bcs.n	800477c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004718:	637a      	str	r2, [r7, #52]	; 0x34
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	613b      	str	r3, [r7, #16]
   return(result);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800474c:	623a      	str	r2, [r7, #32]
 800474e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	69f9      	ldr	r1, [r7, #28]
 8004752:	6a3a      	ldr	r2, [r7, #32]
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	61bb      	str	r3, [r7, #24]
   return(result);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e00f      	b.n	800479c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4013      	ands	r3, r2
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	429a      	cmp	r2, r3
 8004798:	d09f      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3740      	adds	r7, #64	; 0x40
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b0c0      	sub	sp, #256	; 0x100
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	68d9      	ldr	r1, [r3, #12]
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	ea40 0301 	orr.w	r3, r0, r1
 80047cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	431a      	orrs	r2, r3
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047fc:	f021 010c 	bic.w	r1, r1, #12
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800480a:	430b      	orrs	r3, r1
 800480c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	6999      	ldr	r1, [r3, #24]
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	ea40 0301 	orr.w	r3, r0, r1
 800482a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b8f      	ldr	r3, [pc, #572]	; (8004a70 <UART_SetConfig+0x2cc>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d005      	beq.n	8004844 <UART_SetConfig+0xa0>
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <UART_SetConfig+0x2d0>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d104      	bne.n	800484e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7ff fc84 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8004848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800484c:	e003      	b.n	8004856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484e:	f7ff fc6b 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8004852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004860:	f040 810c 	bne.w	8004a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800486e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	1891      	adds	r1, r2, r2
 800487c:	65b9      	str	r1, [r7, #88]	; 0x58
 800487e:	415b      	adcs	r3, r3
 8004880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004886:	4621      	mov	r1, r4
 8004888:	eb12 0801 	adds.w	r8, r2, r1
 800488c:	4629      	mov	r1, r5
 800488e:	eb43 0901 	adc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b4:	462b      	mov	r3, r5
 80048b6:	eb49 0303 	adc.w	r3, r9, r3
 80048ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048d2:	460b      	mov	r3, r1
 80048d4:	18db      	adds	r3, r3, r3
 80048d6:	653b      	str	r3, [r7, #80]	; 0x50
 80048d8:	4613      	mov	r3, r2
 80048da:	eb42 0303 	adc.w	r3, r2, r3
 80048de:	657b      	str	r3, [r7, #84]	; 0x54
 80048e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048e8:	f7fb fc6e 	bl	80001c8 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <UART_SetConfig+0x2d4>)
 80048f2:	fba3 2302 	umull	r2, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	011c      	lsls	r4, r3, #4
 80048fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	1891      	adds	r1, r2, r2
 8004912:	64b9      	str	r1, [r7, #72]	; 0x48
 8004914:	415b      	adcs	r3, r3
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800491c:	4641      	mov	r1, r8
 800491e:	eb12 0a01 	adds.w	sl, r2, r1
 8004922:	4649      	mov	r1, r9
 8004924:	eb43 0b01 	adc.w	fp, r3, r1
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800493c:	4692      	mov	sl, r2
 800493e:	469b      	mov	fp, r3
 8004940:	4643      	mov	r3, r8
 8004942:	eb1a 0303 	adds.w	r3, sl, r3
 8004946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800494a:	464b      	mov	r3, r9
 800494c:	eb4b 0303 	adc.w	r3, fp, r3
 8004950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004968:	460b      	mov	r3, r1
 800496a:	18db      	adds	r3, r3, r3
 800496c:	643b      	str	r3, [r7, #64]	; 0x40
 800496e:	4613      	mov	r3, r2
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800497a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800497e:	f7fb fc23 	bl	80001c8 <__aeabi_uldivmod>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4611      	mov	r1, r2
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <UART_SetConfig+0x2d4>)
 800498a:	fba3 2301 	umull	r2, r3, r3, r1
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2264      	movs	r2, #100	; 0x64
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	1acb      	subs	r3, r1, r3
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <UART_SetConfig+0x2d4>)
 80049a0:	fba3 2302 	umull	r2, r3, r3, r2
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ac:	441c      	add	r4, r3
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049c8:	415b      	adcs	r3, r3
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049d0:	4641      	mov	r1, r8
 80049d2:	1851      	adds	r1, r2, r1
 80049d4:	6339      	str	r1, [r7, #48]	; 0x30
 80049d6:	4649      	mov	r1, r9
 80049d8:	414b      	adcs	r3, r1
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049e8:	4659      	mov	r1, fp
 80049ea:	00cb      	lsls	r3, r1, #3
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f2:	4651      	mov	r1, sl
 80049f4:	00ca      	lsls	r2, r1, #3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	4642      	mov	r2, r8
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a04:	464b      	mov	r3, r9
 8004a06:	460a      	mov	r2, r1
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a24:	460b      	mov	r3, r1
 8004a26:	18db      	adds	r3, r3, r3
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	eb42 0303 	adc.w	r3, r2, r3
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a3a:	f7fb fbc5 	bl	80001c8 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <UART_SetConfig+0x2d4>)
 8004a44:	fba3 1302 	umull	r1, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2164      	movs	r1, #100	; 0x64
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <UART_SetConfig+0x2d4>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 0207 	and.w	r2, r3, #7
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4422      	add	r2, r4
 8004a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a6c:	e105      	b.n	8004c7a <UART_SetConfig+0x4d6>
 8004a6e:	bf00      	nop
 8004a70:	40011000 	.word	0x40011000
 8004a74:	40011400 	.word	0x40011400
 8004a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a8e:	4642      	mov	r2, r8
 8004a90:	464b      	mov	r3, r9
 8004a92:	1891      	adds	r1, r2, r2
 8004a94:	6239      	str	r1, [r7, #32]
 8004a96:	415b      	adcs	r3, r3
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	1854      	adds	r4, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb43 0501 	adc.w	r5, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	00eb      	lsls	r3, r5, #3
 8004ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab6:	00e2      	lsls	r2, r4, #3
 8004ab8:	4614      	mov	r4, r2
 8004aba:	461d      	mov	r5, r3
 8004abc:	4643      	mov	r3, r8
 8004abe:	18e3      	adds	r3, r4, r3
 8004ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	eb45 0303 	adc.w	r3, r5, r3
 8004aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aea:	4629      	mov	r1, r5
 8004aec:	008b      	lsls	r3, r1, #2
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af4:	4621      	mov	r1, r4
 8004af6:	008a      	lsls	r2, r1, #2
 8004af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004afc:	f7fb fb64 	bl	80001c8 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4b60      	ldr	r3, [pc, #384]	; (8004c88 <UART_SetConfig+0x4e4>)
 8004b06:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	011c      	lsls	r4, r3, #4
 8004b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	1891      	adds	r1, r2, r2
 8004b26:	61b9      	str	r1, [r7, #24]
 8004b28:	415b      	adcs	r3, r3
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b30:	4641      	mov	r1, r8
 8004b32:	1851      	adds	r1, r2, r1
 8004b34:	6139      	str	r1, [r7, #16]
 8004b36:	4649      	mov	r1, r9
 8004b38:	414b      	adcs	r3, r1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	00cb      	lsls	r3, r1, #3
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b52:	4651      	mov	r1, sl
 8004b54:	00ca      	lsls	r2, r1, #3
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b64:	464b      	mov	r3, r9
 8004b66:	460a      	mov	r2, r1
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b88:	4649      	mov	r1, r9
 8004b8a:	008b      	lsls	r3, r1, #2
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b92:	4641      	mov	r1, r8
 8004b94:	008a      	lsls	r2, r1, #2
 8004b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b9a:	f7fb fb15 	bl	80001c8 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <UART_SetConfig+0x4e4>)
 8004ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	2164      	movs	r1, #100	; 0x64
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	3332      	adds	r3, #50	; 0x32
 8004bb6:	4a34      	ldr	r2, [pc, #208]	; (8004c88 <UART_SetConfig+0x4e4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc2:	441c      	add	r4, r3
 8004bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc8:	2200      	movs	r2, #0
 8004bca:	673b      	str	r3, [r7, #112]	; 0x70
 8004bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8004bce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	1891      	adds	r1, r2, r2
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	415b      	adcs	r3, r3
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be2:	4641      	mov	r1, r8
 8004be4:	1851      	adds	r1, r2, r1
 8004be6:	6039      	str	r1, [r7, #0]
 8004be8:	4649      	mov	r1, r9
 8004bea:	414b      	adcs	r3, r1
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bfa:	4659      	mov	r1, fp
 8004bfc:	00cb      	lsls	r3, r1, #3
 8004bfe:	4651      	mov	r1, sl
 8004c00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c04:	4651      	mov	r1, sl
 8004c06:	00ca      	lsls	r2, r1, #3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4642      	mov	r2, r8
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c14:	464b      	mov	r3, r9
 8004c16:	460a      	mov	r2, r1
 8004c18:	eb42 0303 	adc.w	r3, r2, r3
 8004c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	663b      	str	r3, [r7, #96]	; 0x60
 8004c28:	667a      	str	r2, [r7, #100]	; 0x64
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c36:	4649      	mov	r1, r9
 8004c38:	008b      	lsls	r3, r1, #2
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c40:	4641      	mov	r1, r8
 8004c42:	008a      	lsls	r2, r1, #2
 8004c44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c48:	f7fb fabe 	bl	80001c8 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <UART_SetConfig+0x4e4>)
 8004c52:	fba3 1302 	umull	r1, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	2164      	movs	r1, #100	; 0x64
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	3332      	adds	r3, #50	; 0x32
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <UART_SetConfig+0x4e4>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	f003 020f 	and.w	r2, r3, #15
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4422      	add	r2, r4
 8004c78:	609a      	str	r2, [r3, #8]
}
 8004c7a:	bf00      	nop
 8004c7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	51eb851f 	.word	0x51eb851f

08004c8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f107 001c 	add.w	r0, r7, #28
 8004c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d122      	bne.n	8004cea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d105      	bne.n	8004cde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f9c0 	bl	8005064 <USB_CoreReset>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e01a      	b.n	8004d20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9b4 	bl	8005064 <USB_CoreReset>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
 8004d12:	e005      	b.n	8004d20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10b      	bne.n	8004d3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f043 0206 	orr.w	r2, r3, #6
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d4a:	b004      	add	sp, #16
 8004d4c:	4770      	bx	lr

08004d4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f043 0201 	orr.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 0201 	bic.w	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d115      	bne.n	8004de0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f7fc f867 	bl	8000e94 <HAL_Delay>
      ms++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f93a 	bl	8005046 <USB_GetMode>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d01e      	beq.n	8004e16 <USB_SetCurrentMode+0x84>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b31      	cmp	r3, #49	; 0x31
 8004ddc:	d9f0      	bls.n	8004dc0 <USB_SetCurrentMode+0x2e>
 8004dde:	e01a      	b.n	8004e16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d115      	bne.n	8004e12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004df2:	2001      	movs	r0, #1
 8004df4:	f7fc f84e 	bl	8000e94 <HAL_Delay>
      ms++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f921 	bl	8005046 <USB_GetMode>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <USB_SetCurrentMode+0x84>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b31      	cmp	r3, #49	; 0x31
 8004e0e:	d9f0      	bls.n	8004df2 <USB_SetCurrentMode+0x60>
 8004e10:	e001      	b.n	8004e16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e005      	b.n	8004e22 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b32      	cmp	r3, #50	; 0x32
 8004e1a:	d101      	bne.n	8004e20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <USB_FlushTxFifo+0x64>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e01b      	b.n	8004e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	daf2      	bge.n	8004e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	019b      	lsls	r3, r3, #6
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <USB_FlushTxFifo+0x64>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e006      	b.n	8004e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d0f0      	beq.n	8004e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	00030d40 	.word	0x00030d40

08004e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <USB_FlushRxFifo+0x5c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e018      	b.n	8004ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	daf2      	bge.n	8004ea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <USB_FlushRxFifo+0x5c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e006      	b.n	8004ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d0f0      	beq.n	8004ec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	00030d40 	.word	0x00030d40

08004ef4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4611      	mov	r1, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	460b      	mov	r3, r1
 8004f04:	71fb      	strb	r3, [r7, #7]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d123      	bne.n	8004f62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f1a:	88bb      	ldrh	r3, [r7, #4]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e018      	b.n	8004f5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	031a      	lsls	r2, r3, #12
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f34:	461a      	mov	r2, r3
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3301      	adds	r3, #1
 8004f46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3e2      	bcc.n	8004f28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3724      	adds	r7, #36	; 0x24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b08b      	sub	sp, #44	; 0x2c
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	e014      	b.n	8004fc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	3301      	adds	r3, #1
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3e6      	bcc.n	8004f9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fce:	8bfb      	ldrh	r3, [r7, #30]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01e      	beq.n	8005012 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f107 0310 	add.w	r3, r7, #16
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	701a      	strb	r2, [r3, #0]
      i++;
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	3301      	adds	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005006:	8bfb      	ldrh	r3, [r7, #30]
 8005008:	3b01      	subs	r3, #1
 800500a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800500c:	8bfb      	ldrh	r3, [r7, #30]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ea      	bne.n	8004fe8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005014:	4618      	mov	r0, r3
 8005016:	372c      	adds	r7, #44	; 0x2c
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005038:	68fb      	ldr	r3, [r7, #12]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0301 	and.w	r3, r3, #1
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <USB_CoreReset+0x64>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e01b      	b.n	80050ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	daf2      	bge.n	8005070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3301      	adds	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <USB_CoreReset+0x64>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d0f0      	beq.n	800509a <USB_CoreReset+0x36>

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	00030d40 	.word	0x00030d40

080050cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050cc:	b084      	sub	sp, #16
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d018      	beq.n	8005154 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10a      	bne.n	800513e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e014      	b.n	8005168 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e009      	b.n	8005168 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005162:	f023 0304 	bic.w	r3, r3, #4
 8005166:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005168:	2110      	movs	r1, #16
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fe5e 	bl	8004e2c <USB_FlushTxFifo>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fe8a 	bl	8004e94 <USB_FlushRxFifo>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e015      	b.n	80051bc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	461a      	mov	r2, r3
 80051b2:	2300      	movs	r3, #0
 80051b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3301      	adds	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d3e5      	bcc.n	8005190 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295
 80051d0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a13      	ldr	r2, [pc, #76]	; (8005238 <USB_HostInit+0x16c>)
 80051ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a13      	ldr	r2, [pc, #76]	; (800523c <USB_HostInit+0x170>)
 80051f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051f4:	e009      	b.n	800520a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2280      	movs	r2, #128	; 0x80
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <USB_HostInit+0x174>)
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <USB_HostInit+0x178>)
 8005206:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 0210 	orr.w	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <USB_HostInit+0x17c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005234:	b004      	add	sp, #16
 8005236:	4770      	bx	lr
 8005238:	01000200 	.word	0x01000200
 800523c:	00e00300 	.word	0x00e00300
 8005240:	00600080 	.word	0x00600080
 8005244:	004000e0 	.word	0x004000e0
 8005248:	a3200008 	.word	0xa3200008

0800524c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005294:	461a      	mov	r2, r3
 8005296:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800529a:	6053      	str	r3, [r2, #4]
 800529c:	e009      	b.n	80052b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d106      	bne.n	80052b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052aa:	461a      	mov	r2, r3
 80052ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80052b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052f0:	2064      	movs	r0, #100	; 0x64
 80052f2:	f7fb fdcf 	bl	8000e94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005302:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005304:	200a      	movs	r0, #10
 8005306:	f7fb fdc5 	bl	8000e94 <HAL_Delay>

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005338:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <USB_DriveVbus+0x44>
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005356:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	d109      	bne.n	8005378 <USB_DriveVbus+0x64>
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005376:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	0c5b      	lsrs	r3, r3, #17
 80053a4:	f003 0303 	and.w	r3, r3, #3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	b29b      	uxth	r3, r3
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	70fb      	strb	r3, [r7, #3]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70bb      	strb	r3, [r7, #2]
 80053ee:	4613      	mov	r3, r2
 80053f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005406:	461a      	mov	r2, r3
 8005408:	f04f 33ff 	mov.w	r3, #4294967295
 800540c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800540e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005412:	2b03      	cmp	r3, #3
 8005414:	d87e      	bhi.n	8005514 <USB_HC_Init+0x13c>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <USB_HC_Init+0x44>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	0800542d 	.word	0x0800542d
 8005420:	080054d7 	.word	0x080054d7
 8005424:	0800542d 	.word	0x0800542d
 8005428:	08005499 	.word	0x08005499
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	461a      	mov	r2, r3
 800543a:	f240 439d 	movw	r3, #1181	; 0x49d
 800543e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005440:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005444:	2b00      	cmp	r3, #0
 8005446:	da10      	bge.n	800546a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	440a      	add	r2, r1
 800545e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005466:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005468:	e057      	b.n	800551a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d051      	beq.n	800551a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	440a      	add	r2, r1
 800548c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005490:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005494:	60d3      	str	r3, [r2, #12]
      break;
 8005496:	e040      	b.n	800551a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	461a      	mov	r2, r3
 80054a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80054aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da34      	bge.n	800551e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80054d4:	e023      	b.n	800551e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054d6:	78fb      	ldrb	r3, [r7, #3]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e2:	461a      	mov	r2, r3
 80054e4:	f240 2325 	movw	r3, #549	; 0x225
 80054e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da17      	bge.n	8005522 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	0151      	lsls	r1, r2, #5
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	440a      	add	r2, r1
 8005508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005510:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005512:	e006      	b.n	8005522 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
      break;
 8005518:	e004      	b.n	8005524 <USB_HC_Init+0x14c>
      break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <USB_HC_Init+0x14c>
      break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <USB_HC_Init+0x14c>
      break;
 8005522:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	440a      	add	r2, r1
 800553a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553e:	f043 0302 	orr.w	r3, r3, #2
 8005542:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800554a:	699a      	ldr	r2, [r3, #24]
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	6939      	ldr	r1, [r7, #16]
 800555a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800555e:	4313      	orrs	r3, r2
 8005560:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800556e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005572:	2b00      	cmp	r3, #0
 8005574:	da03      	bge.n	800557e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e001      	b.n	8005582 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff feff 	bl	8005386 <USB_GetHostSpeed>
 8005588:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800558a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800558e:	2b02      	cmp	r3, #2
 8005590:	d106      	bne.n	80055a0 <USB_HC_Init+0x1c8>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d003      	beq.n	80055a0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e001      	b.n	80055a4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055a4:	787b      	ldrb	r3, [r7, #1]
 80055a6:	059b      	lsls	r3, r3, #22
 80055a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055ac:	78bb      	ldrb	r3, [r7, #2]
 80055ae:	02db      	lsls	r3, r3, #11
 80055b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ba:	049b      	lsls	r3, r3, #18
 80055bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	0159      	lsls	r1, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	440b      	add	r3, r1
 80055d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055e0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80055e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d003      	beq.n	80055f2 <USB_HC_Init+0x21a>
 80055ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10f      	bne.n	8005612 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	440a      	add	r2, r1
 8005608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800560c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005610:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005612:	7ffb      	ldrb	r3, [r7, #31]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08c      	sub	sp, #48	; 0x30
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	4613      	mov	r3, r2
 8005628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005638:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d02d      	beq.n	80056a2 <USB_HC_StartXfer+0x86>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	791b      	ldrb	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d129      	bne.n	80056a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d117      	bne.n	8005684 <USB_HC_StartXfer+0x68>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	79db      	ldrb	r3, [r3, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <USB_HC_StartXfer+0x48>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	79db      	ldrb	r3, [r3, #7]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d10f      	bne.n	8005684 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	6a3a      	ldr	r2, [r7, #32]
 8005678:	440a      	add	r2, r1
 800567a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <USB_HC_StartXfer+0x86>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	795b      	ldrb	r3, [r3, #5]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fa0f 	bl	8005abc <USB_DoPing>
      return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e0f8      	b.n	8005894 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	8912      	ldrh	r2, [r2, #8]
 80056b2:	4413      	add	r3, r2
 80056b4:	3b01      	subs	r3, #1
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	8912      	ldrh	r2, [r2, #8]
 80056ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80056be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056c2:	8b7b      	ldrh	r3, [r7, #26]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d90b      	bls.n	80056e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80056c8:	8b7b      	ldrh	r3, [r7, #26]
 80056ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	8912      	ldrh	r2, [r2, #8]
 80056d2:	fb03 f202 	mul.w	r2, r3, r2
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	e001      	b.n	80056e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80056dc:	2301      	movs	r3, #1
 80056de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	8912      	ldrh	r2, [r2, #8]
 80056ee:	fb03 f202 	mul.w	r2, r3, r2
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	611a      	str	r2, [r3, #16]
 80056f6:	e003      	b.n	8005700 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800570a:	04d9      	lsls	r1, r3, #19
 800570c:	4b63      	ldr	r3, [pc, #396]	; (800589c <USB_HC_StartXfer+0x280>)
 800570e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005710:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	7a9b      	ldrb	r3, [r3, #10]
 8005716:	075b      	lsls	r3, r3, #29
 8005718:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800571c:	69f9      	ldr	r1, [r7, #28]
 800571e:	0148      	lsls	r0, r1, #5
 8005720:	6a39      	ldr	r1, [r7, #32]
 8005722:	4401      	add	r1, r0
 8005724:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005728:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800572a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	460a      	mov	r2, r1
 8005744:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	6a3a      	ldr	r2, [r7, #32]
 8005772:	440a      	add	r2, r1
 8005774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005778:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800577c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	7e7b      	ldrb	r3, [r7, #25]
 800578e:	075b      	lsls	r3, r3, #29
 8005790:	69f9      	ldr	r1, [r7, #28]
 8005792:	0148      	lsls	r0, r1, #5
 8005794:	6a39      	ldr	r1, [r7, #32]
 8005796:	4401      	add	r1, r0
 8005798:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	78db      	ldrb	r3, [r3, #3]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	e003      	b.n	80057d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	461a      	mov	r2, r3
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e04e      	b.n	8005894 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	78db      	ldrb	r3, [r3, #3]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d149      	bne.n	8005892 <USB_HC_StartXfer+0x276>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d045      	beq.n	8005892 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	79db      	ldrb	r3, [r3, #7]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d830      	bhi.n	8005870 <USB_HC_StartXfer+0x254>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <USB_HC_StartXfer+0x1f8>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005825 	.word	0x08005825
 8005818:	08005849 	.word	0x08005849
 800581c:	08005825 	.word	0x08005825
 8005820:	08005849 	.word	0x08005849
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	3303      	adds	r3, #3
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800582e:	8afa      	ldrh	r2, [r7, #22]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	b29b      	uxth	r3, r3
 8005836:	429a      	cmp	r2, r3
 8005838:	d91c      	bls.n	8005874 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	619a      	str	r2, [r3, #24]
        }
        break;
 8005846:	e015      	b.n	8005874 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	3303      	adds	r3, #3
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005852:	8afa      	ldrh	r2, [r7, #22]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	b29b      	uxth	r3, r3
 800585e:	429a      	cmp	r2, r3
 8005860:	d90a      	bls.n	8005878 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]
        }
        break;
 800586e:	e003      	b.n	8005878 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005870:	bf00      	nop
 8005872:	e002      	b.n	800587a <USB_HC_StartXfer+0x25e>
        break;
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <USB_HC_StartXfer+0x25e>
        break;
 8005878:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	68d9      	ldr	r1, [r3, #12]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	785a      	ldrb	r2, [r3, #1]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	b29b      	uxth	r3, r3
 8005888:	2000      	movs	r0, #0
 800588a:	9000      	str	r0, [sp, #0]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff fb31 	bl	8004ef4 <USB_WritePacket>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3728      	adds	r7, #40	; 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	1ff80000 	.word	0x1ff80000

080058a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	b29b      	uxth	r3, r3
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b089      	sub	sp, #36	; 0x24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	0c9b      	lsrs	r3, r3, #18
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	0fdb      	lsrs	r3, r3, #31
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b20      	cmp	r3, #32
 8005910:	d104      	bne.n	800591c <USB_HC_Halt+0x5a>
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	e0c8      	b.n	8005aae <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <USB_HC_Halt+0x66>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d163      	bne.n	80059f0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 80ab 	bne.w	8005aac <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d133      	bne.n	80059ca <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005980:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	440a      	add	r2, r1
 8005998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059a0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ae:	d81d      	bhi.n	80059ec <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c6:	d0ec      	beq.n	80059a2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059c8:	e070      	b.n	8005aac <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059ea:	e05f      	b.n	8005aac <USB_HC_Halt+0x1ea>
            break;
 80059ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059ee:	e05d      	b.n	8005aac <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d133      	bne.n	8005a88 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a6c:	d81d      	bhi.n	8005aaa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a84:	d0ec      	beq.n	8005a60 <USB_HC_Halt+0x19e>
 8005a86:	e011      	b.n	8005aac <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e000      	b.n	8005aac <USB_HC_Halt+0x1ea>
          break;
 8005aaa:	bf00      	nop
    }
  }

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3724      	adds	r7, #36	; 0x24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	04da      	lsls	r2, r3, #19
 8005ad8:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <USB_DoPing+0x74>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	1ff80000 	.word	0x1ff80000

08005b34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff f911 	bl	8004d70 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b4e:	2110      	movs	r1, #16
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff f96b 	bl	8004e2c <USB_FlushTxFifo>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f997 	bl	8004e94 <USB_FlushRxFifo>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e01f      	b.n	8005bb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	461a      	mov	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b0f      	cmp	r3, #15
 8005bba:	d9dc      	bls.n	8005b76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e034      	b.n	8005c2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005be0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c08:	d80c      	bhi.n	8005c24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c20:	d0ec      	beq.n	8005bfc <USB_StopHost+0xc8>
 8005c22:	e000      	b.n	8005c26 <USB_StopHost+0xf2>
        break;
 8005c24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d9c7      	bls.n	8005bc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295
 8005c46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff f880 	bl	8004d4e <USB_EnableGlobalInt>

  return ret;
 8005c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af04      	add	r7, sp, #16
 8005c5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c60:	2301      	movs	r3, #1
 8005c62:	2202      	movs	r2, #2
 8005c64:	2102      	movs	r1, #2
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fc66 	bl	8006538 <USBH_FindInterface>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	2bff      	cmp	r3, #255	; 0xff
 8005c74:	d002      	beq.n	8005c7c <USBH_CDC_InterfaceInit+0x24>
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d901      	bls.n	8005c80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e13d      	b.n	8005efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fc3b 	bl	8006500 <USBH_SelectInterface>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e131      	b.n	8005efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c9e:	2050      	movs	r0, #80	; 0x50
 8005ca0:	f002 fafa 	bl	8008298 <malloc>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e11f      	b.n	8005efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005cbc:	2250      	movs	r2, #80	; 0x50
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68b8      	ldr	r0, [r7, #8]
 8005cc2:	f002 faf9 	bl	80082b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	211a      	movs	r1, #26
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	b25b      	sxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da15      	bge.n	8005d0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	211a      	movs	r1, #26
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	211a      	movs	r1, #26
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 ff2c 	bl	8007b6e <USBH_AllocPipe>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	7858      	ldrb	r0, [r3, #1]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	8952      	ldrh	r2, [r2, #10]
 8005d36:	9202      	str	r2, [sp, #8]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	9201      	str	r2, [sp, #4]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4623      	mov	r3, r4
 8005d40:	4602      	mov	r2, r0
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fee4 	bl	8007b10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f002 f9f3 	bl	800813c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d56:	2300      	movs	r3, #0
 8005d58:	2200      	movs	r2, #0
 8005d5a:	210a      	movs	r1, #10
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fbeb 	bl	8006538 <USBH_FindInterface>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	2bff      	cmp	r3, #255	; 0xff
 8005d6a:	d002      	beq.n	8005d72 <USBH_CDC_InterfaceInit+0x11a>
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d901      	bls.n	8005d76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0c2      	b.n	8005efc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	211a      	movs	r1, #26
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	b25b      	sxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da16      	bge.n	8005dbc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	211a      	movs	r1, #26
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	211a      	movs	r1, #26
 8005daa:	fb01 f303 	mul.w	r3, r1, r3
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005db4:	881a      	ldrh	r2, [r3, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	835a      	strh	r2, [r3, #26]
 8005dba:	e015      	b.n	8005de8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	211a      	movs	r1, #26
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	211a      	movs	r1, #26
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	211a      	movs	r1, #26
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	da16      	bge.n	8005e2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	211a      	movs	r1, #26
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	211a      	movs	r1, #26
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e26:	881a      	ldrh	r2, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	835a      	strh	r2, [r3, #26]
 8005e2c:	e015      	b.n	8005e5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	211a      	movs	r1, #26
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	211a      	movs	r1, #26
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	7b9b      	ldrb	r3, [r3, #14]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fe84 	bl	8007b6e <USBH_AllocPipe>
 8005e66:	4603      	mov	r3, r0
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	7bdb      	ldrb	r3, [r3, #15]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 fe7a 	bl	8007b6e <USBH_AllocPipe>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	7b59      	ldrb	r1, [r3, #13]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	7b98      	ldrb	r0, [r3, #14]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	8b12      	ldrh	r2, [r2, #24]
 8005e9a:	9202      	str	r2, [sp, #8]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	9201      	str	r2, [sp, #4]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fe32 	bl	8007b10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	7b19      	ldrb	r1, [r3, #12]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	7bd8      	ldrb	r0, [r3, #15]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	8b52      	ldrh	r2, [r2, #26]
 8005ec4:	9202      	str	r2, [sp, #8]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	9201      	str	r2, [sp, #4]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4623      	mov	r3, r4
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 fe1d 	bl	8007b10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	7b5b      	ldrb	r3, [r3, #13]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f002 f928 	bl	800813c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	7b1b      	ldrb	r3, [r3, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f002 f921 	bl	800813c <USBH_LL_SetToggle>

  return USBH_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd90      	pop	{r4, r7, pc}

08005f04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fe12 	bl	8007b4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 fe3d 	bl	8007bb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	7b1b      	ldrb	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	7b1b      	ldrb	r3, [r3, #12]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fdff 	bl	8007b4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	7b1b      	ldrb	r3, [r3, #12]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 fe2a 	bl	8007bb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	7b5b      	ldrb	r3, [r3, #13]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	7b5b      	ldrb	r3, [r3, #13]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fdec 	bl	8007b4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	7b5b      	ldrb	r3, [r3, #13]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 fe17 	bl	8007bb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f002 f983 	bl	80082a8 <free>
    phost->pActiveClass->pData = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fa8:	2200      	movs	r2, #0
 8005faa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3340      	adds	r3, #64	; 0x40
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8b1 	bl	8006136 <GetLineCoding>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005fea:	7afb      	ldrb	r3, [r7, #11]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006014:	2b04      	cmp	r3, #4
 8006016:	d877      	bhi.n	8006108 <USBH_CDC_Process+0x114>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <USBH_CDC_Process+0x2c>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006035 	.word	0x08006035
 8006024:	0800603b 	.word	0x0800603b
 8006028:	0800606b 	.word	0x0800606b
 800602c:	080060df 	.word	0x080060df
 8006030:	080060ed 	.word	0x080060ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
      break;
 8006038:	e06d      	b.n	8006116 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f897 	bl	8006174 <SetLineCoding>
 8006046:	4603      	mov	r3, r0
 8006048:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006058:	e058      	b.n	800610c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d055      	beq.n	800610c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2204      	movs	r2, #4
 8006064:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006068:	e050      	b.n	800610c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3340      	adds	r3, #64	; 0x40
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f860 	bl	8006136 <GetLineCoding>
 8006076:	4603      	mov	r3, r0
 8006078:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d126      	bne.n	80060ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006092:	791b      	ldrb	r3, [r3, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d13b      	bne.n	8006110 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d133      	bne.n	8006110 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d12b      	bne.n	8006110 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d124      	bne.n	8006110 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f958 	bl	800637c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060cc:	e020      	b.n	8006110 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d01d      	beq.n	8006110 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2204      	movs	r2, #4
 80060d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80060dc:	e018      	b.n	8006110 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f867 	bl	80061b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f8da 	bl	800629e <CDC_ProcessReception>
      break;
 80060ea:	e014      	b.n	8006116 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80060ec:	2100      	movs	r1, #0
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 ffef 	bl	80070d2 <USBH_ClrFeature>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006106:	e005      	b.n	8006114 <USBH_CDC_Process+0x120>

    default:
      break;
 8006108:	bf00      	nop
 800610a:	e004      	b.n	8006116 <USBH_CDC_Process+0x122>
      break;
 800610c:	bf00      	nop
 800610e:	e002      	b.n	8006116 <USBH_CDC_Process+0x122>
      break;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <USBH_CDC_Process+0x122>
      break;
 8006114:	bf00      	nop

  }

  return status;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	22a1      	movs	r2, #161	; 0xa1
 8006144:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2221      	movs	r2, #33	; 0x21
 800614a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2207      	movs	r2, #7
 800615c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2207      	movs	r2, #7
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fa81 	bl	800766c <USBH_CtlReq>
 800616a:	4603      	mov	r3, r0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2221      	movs	r2, #33	; 0x21
 8006182:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2207      	movs	r2, #7
 800619a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2207      	movs	r2, #7
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fa62 	bl	800766c <USBH_CtlReq>
 80061a8:	4603      	mov	r3, r0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af02      	add	r7, sp, #8
 80061b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d002      	beq.n	80061d8 <CDC_ProcessTransmission+0x26>
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d023      	beq.n	800621e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80061d6:	e05e      	b.n	8006296 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	8b12      	ldrh	r2, [r2, #24]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d90b      	bls.n	80061fc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8b1a      	ldrh	r2, [r3, #24]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	7b5b      	ldrb	r3, [r3, #13]
 80061f0:	2001      	movs	r0, #1
 80061f2:	9000      	str	r0, [sp, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fc48 	bl	8007a8a <USBH_BulkSendData>
 80061fa:	e00b      	b.n	8006214 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	7b5b      	ldrb	r3, [r3, #13]
 800620a:	2001      	movs	r0, #1
 800620c:	9000      	str	r0, [sp, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fc3b 	bl	8007a8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800621c:	e03b      	b.n	8006296 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	7b5b      	ldrb	r3, [r3, #13]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 ff5f 	bl	80080e8 <USBH_LL_GetURBState>
 800622a:	4603      	mov	r3, r0
 800622c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d128      	bne.n	8006286 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	8b12      	ldrh	r2, [r2, #24]
 800623c:	4293      	cmp	r3, r2
 800623e:	d90e      	bls.n	800625e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	8b12      	ldrh	r2, [r2, #24]
 8006248:	1a9a      	subs	r2, r3, r2
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	8b12      	ldrh	r2, [r2, #24]
 8006256:	441a      	add	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	61da      	str	r2, [r3, #28]
 800625c:	e002      	b.n	8006264 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006274:	e00e      	b.n	8006294 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f868 	bl	8006354 <USBH_CDC_TransmitCallback>
      break;
 8006284:	e006      	b.n	8006294 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006286:	7afb      	ldrb	r3, [r7, #11]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d103      	bne.n	8006294 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006294:	bf00      	nop
  }
}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d002      	beq.n	80062c4 <CDC_ProcessReception+0x26>
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d00e      	beq.n	80062e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062c2:	e043      	b.n	800634c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6a19      	ldr	r1, [r3, #32]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	8b5a      	ldrh	r2, [r3, #26]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	7b1b      	ldrb	r3, [r3, #12]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fbff 	bl	8007ad4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2204      	movs	r2, #4
 80062da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062de:	e035      	b.n	800634c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	7b1b      	ldrb	r3, [r3, #12]
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fefe 	bl	80080e8 <USBH_LL_GetURBState>
 80062ec:	4603      	mov	r3, r0
 80062ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d129      	bne.n	800634a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	7b1b      	ldrb	r3, [r3, #12]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fe61 	bl	8007fc4 <USBH_LL_GetLastXferSize>
 8006302:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	429a      	cmp	r2, r3
 800630c:	d016      	beq.n	800633c <CDC_ProcessReception+0x9e>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	8b5b      	ldrh	r3, [r3, #26]
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4293      	cmp	r3, r2
 8006318:	d910      	bls.n	800633c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad2      	subs	r2, r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	441a      	add	r2, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2203      	movs	r2, #3
 8006336:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800633a:	e006      	b.n	800634a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f80f 	bl	8006368 <USBH_CDC_ReceiveCallback>
      break;
 800634a:	bf00      	nop
  }
}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063a4:	2302      	movs	r3, #2
 80063a6:	e029      	b.n	80063fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	79fa      	ldrb	r2, [r7, #7]
 80063ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f81f 	bl	8006404 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f001 fd31 	bl	8007e5c <USBH_LL_Init>

  return USBH_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e009      	b.n	800642a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	33e0      	adds	r3, #224	; 0xe0
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	2200      	movs	r2, #0
 8006422:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d9f2      	bls.n	8006416 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e009      	b.n	800644a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d3f1      	bcc.n	8006436 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2240      	movs	r2, #64	; 0x40
 8006476:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d016      	beq.n	80064ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10e      	bne.n	80064e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	33de      	adds	r3, #222	; 0xde
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
 80064e6:	e004      	b.n	80064f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80064e8:	2302      	movs	r3, #2
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e001      	b.n	80064f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80064ee:	2302      	movs	r3, #2
 80064f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	429a      	cmp	r2, r3
 800651a:	d204      	bcs.n	8006526 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	78fa      	ldrb	r2, [r7, #3]
 8006520:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006524:	e001      	b.n	800652a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006526:	2302      	movs	r3, #2
 8006528:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4603      	mov	r3, r0
 8006548:	70fb      	strb	r3, [r7, #3]
 800654a:	460b      	mov	r3, r1
 800654c:	70bb      	strb	r3, [r7, #2]
 800654e:	4613      	mov	r3, r2
 8006550:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006560:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006562:	e025      	b.n	80065b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	221a      	movs	r2, #26
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	3308      	adds	r3, #8
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	3302      	adds	r3, #2
 8006574:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	795b      	ldrb	r3, [r3, #5]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	429a      	cmp	r2, r3
 800657e:	d002      	beq.n	8006586 <USBH_FindInterface+0x4e>
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	2bff      	cmp	r3, #255	; 0xff
 8006584:	d111      	bne.n	80065aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800658a:	78ba      	ldrb	r2, [r7, #2]
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006590:	78bb      	ldrb	r3, [r7, #2]
 8006592:	2bff      	cmp	r3, #255	; 0xff
 8006594:	d109      	bne.n	80065aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800659a:	787a      	ldrb	r2, [r7, #1]
 800659c:	429a      	cmp	r2, r3
 800659e:	d002      	beq.n	80065a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065a0:	787b      	ldrb	r3, [r7, #1]
 80065a2:	2bff      	cmp	r3, #255	; 0xff
 80065a4:	d101      	bne.n	80065aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	e006      	b.n	80065b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	3301      	adds	r3, #1
 80065ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d9d6      	bls.n	8006564 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065b6:	23ff      	movs	r3, #255	; 0xff
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 fc81 	bl	8007ed4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80065d2:	2101      	movs	r1, #1
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fd9a 	bl	800810e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2203      	movs	r2, #3
 8006604:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b0b      	cmp	r3, #11
 800660e:	f200 81be 	bhi.w	800698e <USBH_Process+0x3aa>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <USBH_Process+0x34>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006649 	.word	0x08006649
 800661c:	0800667b 	.word	0x0800667b
 8006620:	080066e3 	.word	0x080066e3
 8006624:	08006929 	.word	0x08006929
 8006628:	0800698f 	.word	0x0800698f
 800662c:	08006787 	.word	0x08006787
 8006630:	080068cf 	.word	0x080068cf
 8006634:	080067bd 	.word	0x080067bd
 8006638:	080067dd 	.word	0x080067dd
 800663c:	080067fd 	.word	0x080067fd
 8006640:	08006841 	.word	0x08006841
 8006644:	08006911 	.word	0x08006911
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 819e 	beq.w	8006992 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800665c:	20c8      	movs	r0, #200	; 0xc8
 800665e:	f001 fd9d 	bl	800819c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fc93 	bl	8007f8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006678:	e18b      	b.n	8006992 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006680:	2b01      	cmp	r3, #1
 8006682:	d107      	bne.n	8006694 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006692:	e18d      	b.n	80069b0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800669a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800669e:	d914      	bls.n	80066ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066a6:	3301      	adds	r3, #1
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d903      	bls.n	80066c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	220d      	movs	r2, #13
 80066be:	701a      	strb	r2, [r3, #0]
      break;
 80066c0:	e176      	b.n	80069b0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
      break;
 80066c8:	e172      	b.n	80069b0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066d0:	f103 020a 	add.w	r2, r3, #10
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80066da:	200a      	movs	r0, #10
 80066dc:	f001 fd5e 	bl	800819c <USBH_Delay>
      break;
 80066e0:	e166      	b.n	80069b0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066f2:	2104      	movs	r1, #4
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80066f8:	2064      	movs	r0, #100	; 0x64
 80066fa:	f001 fd4f 	bl	800819c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fc1e 	bl	8007f40 <USBH_LL_GetSpeed>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2205      	movs	r2, #5
 8006712:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006714:	2100      	movs	r1, #0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fa29 	bl	8007b6e <USBH_AllocPipe>
 800671c:	4603      	mov	r3, r0
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fa21 	bl	8007b6e <USBH_AllocPipe>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7919      	ldrb	r1, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006748:	b292      	uxth	r2, r2
 800674a:	9202      	str	r2, [sp, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	9201      	str	r2, [sp, #4]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4603      	mov	r3, r0
 8006754:	2280      	movs	r2, #128	; 0x80
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f9da 	bl	8007b10 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7959      	ldrb	r1, [r3, #5]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006770:	b292      	uxth	r2, r2
 8006772:	9202      	str	r2, [sp, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	9201      	str	r2, [sp, #4]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4603      	mov	r3, r0
 800677c:	2200      	movs	r2, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 f9c6 	bl	8007b10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006784:	e114      	b.n	80069b0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f918 	bl	80069bc <USBH_HandleEnum>
 800678c:	4603      	mov	r3, r0
 800678e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 80fe 	bne.w	8006996 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d103      	bne.n	80067b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2208      	movs	r2, #8
 80067b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067b2:	e0f0      	b.n	8006996 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2207      	movs	r2, #7
 80067b8:	701a      	strb	r2, [r3, #0]
      break;
 80067ba:	e0ec      	b.n	8006996 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80e9 	beq.w	800699a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067ce:	2101      	movs	r1, #1
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2208      	movs	r2, #8
 80067d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80067da:	e0de      	b.n	800699a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fc2c 	bl	8007044 <USBH_SetCfg>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 80d5 	bne.w	800699e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2209      	movs	r2, #9
 80067f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067fa:	e0d0      	b.n	800699e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800680a:	2101      	movs	r1, #1
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc3c 	bl	800708a <USBH_SetFeature>
 8006812:	4603      	mov	r3, r0
 8006814:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	220a      	movs	r2, #10
 8006822:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006824:	e0bd      	b.n	80069a2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b03      	cmp	r3, #3
 800682c:	f040 80b9 	bne.w	80069a2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	220a      	movs	r2, #10
 8006834:	701a      	strb	r2, [r3, #0]
      break;
 8006836:	e0b4      	b.n	80069a2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	220a      	movs	r2, #10
 800683c:	701a      	strb	r2, [r3, #0]
      break;
 800683e:	e0b0      	b.n	80069a2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80ad 	beq.w	80069a6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e016      	b.n	8006888 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800685a:	7bfa      	ldrb	r2, [r7, #15]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	32de      	adds	r2, #222	; 0xde
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	791a      	ldrb	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800686c:	429a      	cmp	r2, r3
 800686e:	d108      	bne.n	8006882 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006870:	7bfa      	ldrb	r2, [r7, #15]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	32de      	adds	r2, #222	; 0xde
 8006876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006880:	e005      	b.n	800688e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	3301      	adds	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0e5      	beq.n	800685a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d016      	beq.n	80068c6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2206      	movs	r2, #6
 80068ae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b6:	2103      	movs	r1, #3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068bc:	e073      	b.n	80069a6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	220d      	movs	r2, #13
 80068c2:	701a      	strb	r2, [r3, #0]
      break;
 80068c4:	e06f      	b.n	80069a6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	220d      	movs	r2, #13
 80068ca:	701a      	strb	r2, [r3, #0]
      break;
 80068cc:	e06b      	b.n	80069a6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d017      	beq.n	8006908 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	4603      	mov	r3, r0
 80068e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d103      	bne.n	80068f8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	220b      	movs	r2, #11
 80068f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068f6:	e058      	b.n	80069aa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d154      	bne.n	80069aa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	220d      	movs	r2, #13
 8006904:	701a      	strb	r2, [r3, #0]
      break;
 8006906:	e050      	b.n	80069aa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	220d      	movs	r2, #13
 800690c:	701a      	strb	r2, [r3, #0]
      break;
 800690e:	e04c      	b.n	80069aa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d049      	beq.n	80069ae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
      }
      break;
 8006926:	e042      	b.n	80069ae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fd67 	bl	8006404 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006964:	2105      	movs	r1, #5
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d107      	bne.n	8006986 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe20 	bl	80065c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006984:	e014      	b.n	80069b0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 faa4 	bl	8007ed4 <USBH_LL_Start>
      break;
 800698c:	e010      	b.n	80069b0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800698e:	bf00      	nop
 8006990:	e00e      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 8006992:	bf00      	nop
 8006994:	e00c      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 8006996:	bf00      	nop
 8006998:	e00a      	b.n	80069b0 <USBH_Process+0x3cc>
    break;
 800699a:	bf00      	nop
 800699c:	e008      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 800699e:	bf00      	nop
 80069a0:	e006      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 80069a2:	bf00      	nop
 80069a4:	e004      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <USBH_Process+0x3cc>
      break;
 80069ae:	bf00      	nop
  }
  return USBH_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af04      	add	r7, sp, #16
 80069c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b07      	cmp	r3, #7
 80069d2:	f200 81c1 	bhi.w	8006d58 <USBH_HandleEnum+0x39c>
 80069d6:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <USBH_HandleEnum+0x20>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	080069fd 	.word	0x080069fd
 80069e0:	08006abb 	.word	0x08006abb
 80069e4:	08006b25 	.word	0x08006b25
 80069e8:	08006bb3 	.word	0x08006bb3
 80069ec:	08006c1d 	.word	0x08006c1d
 80069f0:	08006c8d 	.word	0x08006c8d
 80069f4:	08006cd3 	.word	0x08006cd3
 80069f8:	08006d19 	.word	0x08006d19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80069fc:	2108      	movs	r1, #8
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa50 	bl	8006ea4 <USBH_Get_DevDesc>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d130      	bne.n	8006a70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	7919      	ldrb	r1, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a32:	b292      	uxth	r2, r2
 8006a34:	9202      	str	r2, [sp, #8]
 8006a36:	2200      	movs	r2, #0
 8006a38:	9201      	str	r2, [sp, #4]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2280      	movs	r2, #128	; 0x80
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 f865 	bl	8007b10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7959      	ldrb	r1, [r3, #5]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	9202      	str	r2, [sp, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	9201      	str	r2, [sp, #4]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4603      	mov	r3, r0
 8006a66:	2200      	movs	r2, #0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f851 	bl	8007b10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a6e:	e175      	b.n	8006d5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f040 8172 	bne.w	8006d5c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d903      	bls.n	8006a9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	220d      	movs	r2, #13
 8006a96:	701a      	strb	r2, [r3, #0]
      break;
 8006a98:	e160      	b.n	8006d5c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	795b      	ldrb	r3, [r3, #5]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f885 	bl	8007bb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	791b      	ldrb	r3, [r3, #4]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f87f 	bl	8007bb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
      break;
 8006ab8:	e150      	b.n	8006d5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006aba:	2112      	movs	r1, #18
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f9f1 	bl	8006ea4 <USBH_Get_DevDesc>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ad2:	e145      	b.n	8006d60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	f040 8142 	bne.w	8006d60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d903      	bls.n	8006afe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	220d      	movs	r2, #13
 8006afa:	701a      	strb	r2, [r3, #0]
      break;
 8006afc:	e130      	b.n	8006d60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	795b      	ldrb	r3, [r3, #5]
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 f853 	bl	8007bb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	791b      	ldrb	r3, [r3, #4]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 f84d 	bl	8007bb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
      break;
 8006b22:	e11d      	b.n	8006d60 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b24:	2101      	movs	r1, #1
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa68 	bl	8006ffc <USBH_SetAddress>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d132      	bne.n	8006b9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b36:	2002      	movs	r0, #2
 8006b38:	f001 fb30 	bl	800819c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2203      	movs	r2, #3
 8006b48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7919      	ldrb	r1, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b5e:	b292      	uxth	r2, r2
 8006b60:	9202      	str	r2, [sp, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	9201      	str	r2, [sp, #4]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2280      	movs	r2, #128	; 0x80
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 ffcf 	bl	8007b10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7959      	ldrb	r1, [r3, #5]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b86:	b292      	uxth	r2, r2
 8006b88:	9202      	str	r2, [sp, #8]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	9201      	str	r2, [sp, #4]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	4603      	mov	r3, r0
 8006b92:	2200      	movs	r2, #0
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 ffbb 	bl	8007b10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b9a:	e0e3      	b.n	8006d64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	f040 80e0 	bne.w	8006d64 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	220d      	movs	r2, #13
 8006ba8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	705a      	strb	r2, [r3, #1]
      break;
 8006bb0:	e0d8      	b.n	8006d64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006bb2:	2109      	movs	r1, #9
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f99d 	bl	8006ef4 <USBH_Get_CfgDesc>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d103      	bne.n	8006bcc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bca:	e0cd      	b.n	8006d68 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	f040 80ca 	bne.w	8006d68 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bda:	3301      	adds	r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d903      	bls.n	8006bf6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	220d      	movs	r2, #13
 8006bf2:	701a      	strb	r2, [r3, #0]
      break;
 8006bf4:	e0b8      	b.n	8006d68 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	795b      	ldrb	r3, [r3, #5]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 ffd7 	bl	8007bb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	791b      	ldrb	r3, [r3, #4]
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 ffd1 	bl	8007bb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
      break;
 8006c1a:	e0a5      	b.n	8006d68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f965 	bl	8006ef4 <USBH_Get_CfgDesc>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d103      	bne.n	8006c3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2205      	movs	r2, #5
 8006c38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c3a:	e097      	b.n	8006d6c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	f040 8094 	bne.w	8006d6c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d903      	bls.n	8006c66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	220d      	movs	r2, #13
 8006c62:	701a      	strb	r2, [r3, #0]
      break;
 8006c64:	e082      	b.n	8006d6c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	795b      	ldrb	r3, [r3, #5]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 ff9f 	bl	8007bb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	791b      	ldrb	r3, [r3, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 ff99 	bl	8007bb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
      break;
 8006c8a:	e06f      	b.n	8006d6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d019      	beq.n	8006cca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006ca2:	23ff      	movs	r3, #255	; 0xff
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f949 	bl	8006f3c <USBH_Get_StringDesc>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2206      	movs	r2, #6
 8006cb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cba:	e059      	b.n	8006d70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d156      	bne.n	8006d70 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2206      	movs	r2, #6
 8006cc6:	705a      	strb	r2, [r3, #1]
      break;
 8006cc8:	e052      	b.n	8006d70 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2206      	movs	r2, #6
 8006cce:	705a      	strb	r2, [r3, #1]
      break;
 8006cd0:	e04e      	b.n	8006d70 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d019      	beq.n	8006d10 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ce8:	23ff      	movs	r3, #255	; 0xff
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f926 	bl	8006f3c <USBH_Get_StringDesc>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d00:	e038      	b.n	8006d74 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d135      	bne.n	8006d74 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	705a      	strb	r2, [r3, #1]
      break;
 8006d0e:	e031      	b.n	8006d74 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2207      	movs	r2, #7
 8006d14:	705a      	strb	r2, [r3, #1]
      break;
 8006d16:	e02d      	b.n	8006d74 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d017      	beq.n	8006d52 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d2e:	23ff      	movs	r3, #255	; 0xff
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f903 	bl	8006f3c <USBH_Get_StringDesc>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d44:	e018      	b.n	8006d78 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d115      	bne.n	8006d78 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d50:	e012      	b.n	8006d78 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
      break;
 8006d56:	e00f      	b.n	8006d78 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006d58:	bf00      	nop
 8006d5a:	e00e      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e00c      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d60:	bf00      	nop
 8006d62:	e00a      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d64:	bf00      	nop
 8006d66:	e008      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e006      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e004      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d70:	bf00      	nop
 8006d72:	e002      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <USBH_HandleEnum+0x3be>
      break;
 8006d78:	bf00      	nop
  }
  return Status;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f804 	bl	8006dc6 <USBH_HandleSof>
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b0b      	cmp	r3, #11
 8006dd6:	d10a      	bne.n	8006dee <USBH_HandleSof+0x28>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
  }
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006e06:	bf00      	nop
}
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006e22:	bf00      	nop
}
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f844 	bl	8007f0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fe91 	bl	8007bb0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	795b      	ldrb	r3, [r3, #5]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fe8b 	bl	8007bb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f864 	bl	8006f92 <USBH_GetDescriptor>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	b292      	uxth	r2, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f000 f918 	bl	800711a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	331c      	adds	r3, #28
 8006f04:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f10:	2100      	movs	r1, #0
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f83d 	bl	8006f92 <USBH_GetDescriptor>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006f22:	887b      	ldrh	r3, [r7, #2]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f987 	bl	800723c <USBH_ParseCfgDesc>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	461a      	mov	r2, r3
 8006f48:	460b      	mov	r3, r1
 8006f4a:	72fb      	strb	r3, [r7, #11]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f58:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f60:	893b      	ldrh	r3, [r7, #8]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	460b      	mov	r3, r1
 8006f66:	2100      	movs	r1, #0
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f812 	bl	8006f92 <USBH_GetDescriptor>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d107      	bne.n	8006f88 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f7e:	893a      	ldrh	r2, [r7, #8]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fb24 	bl	80075d0 <USBH_ParseStringDesc>
  }

  return status;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	72fb      	strb	r3, [r7, #11]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	789b      	ldrb	r3, [r3, #2]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d11c      	bne.n	8006fe6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2206      	movs	r2, #6
 8006fbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	893a      	ldrh	r2, [r7, #8]
 8006fc2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006fc4:	893b      	ldrh	r3, [r7, #8]
 8006fc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fce:	d104      	bne.n	8006fda <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f240 4209 	movw	r2, #1033	; 0x409
 8006fd6:	829a      	strh	r2, [r3, #20]
 8006fd8:	e002      	b.n	8006fe0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8b3a      	ldrh	r2, [r7, #24]
 8006fe4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006fe6:	8b3b      	ldrh	r3, [r7, #24]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fb3d 	bl	800766c <USBH_CtlReq>
 8006ff2:	4603      	mov	r3, r0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	789b      	ldrb	r3, [r3, #2]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10f      	bne.n	8007030 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2205      	movs	r2, #5
 800701a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007030:	2200      	movs	r2, #0
 8007032:	2100      	movs	r1, #0
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fb19 	bl	800766c <USBH_CtlReq>
 800703a:	4603      	mov	r3, r0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	789b      	ldrb	r3, [r3, #2]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10e      	bne.n	8007076 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2209      	movs	r2, #9
 8007062:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	887a      	ldrh	r2, [r7, #2]
 8007068:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 faf6 	bl	800766c <USBH_CtlReq>
 8007080:	4603      	mov	r3, r0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	460b      	mov	r3, r1
 8007094:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	789b      	ldrb	r3, [r3, #2]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d10f      	bne.n	80070be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2203      	movs	r2, #3
 80070a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070be:	2200      	movs	r2, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fad2 	bl	800766c <USBH_CtlReq>
 80070c8:	4603      	mov	r3, r0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	789b      	ldrb	r3, [r3, #2]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d10f      	bne.n	8007106 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007106:	2200      	movs	r2, #0
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 faae 	bl	800766c <USBH_CtlReq>
 8007110:	4603      	mov	r3, r0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	4613      	mov	r3, r2
 8007126:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	785a      	ldrb	r2, [r3, #1]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3302      	adds	r3, #2
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b29a      	uxth	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3303      	adds	r3, #3
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	b29b      	uxth	r3, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	791a      	ldrb	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	795a      	ldrb	r2, [r3, #5]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	799a      	ldrb	r2, [r3, #6]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	79da      	ldrb	r2, [r3, #7]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	79db      	ldrb	r3, [r3, #7]
 8007178:	2b20      	cmp	r3, #32
 800717a:	dc11      	bgt.n	80071a0 <USBH_ParseDevDesc+0x86>
 800717c:	2b08      	cmp	r3, #8
 800717e:	db16      	blt.n	80071ae <USBH_ParseDevDesc+0x94>
 8007180:	3b08      	subs	r3, #8
 8007182:	2201      	movs	r2, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800718c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007190:	2b00      	cmp	r3, #0
 8007192:	bf14      	ite	ne
 8007194:	2301      	movne	r3, #1
 8007196:	2300      	moveq	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <USBH_ParseDevDesc+0x8a>
 800719e:	e006      	b.n	80071ae <USBH_ParseDevDesc+0x94>
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d104      	bne.n	80071ae <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	79da      	ldrb	r2, [r3, #7]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	71da      	strb	r2, [r3, #7]
      break;
 80071ac:	e003      	b.n	80071b6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2240      	movs	r2, #64	; 0x40
 80071b2:	71da      	strb	r2, [r3, #7]
      break;
 80071b4:	bf00      	nop
  }

  if (length > 8U)
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d939      	bls.n	8007230 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3308      	adds	r3, #8
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	3309      	adds	r3, #9
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	330a      	adds	r3, #10
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	330b      	adds	r3, #11
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	330c      	adds	r3, #12
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	330d      	adds	r3, #13
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	b29b      	uxth	r3, r3
 8007208:	4313      	orrs	r3, r2
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	7b9a      	ldrb	r2, [r3, #14]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	7bda      	ldrb	r2, [r3, #15]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	7c1a      	ldrb	r2, [r3, #16]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	7c5a      	ldrb	r2, [r3, #17]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	745a      	strb	r2, [r3, #17]
  }
}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007250:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	785a      	ldrb	r2, [r3, #1]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	3302      	adds	r3, #2
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	3303      	adds	r3, #3
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	b29b      	uxth	r3, r3
 8007290:	4313      	orrs	r3, r2
 8007292:	b29b      	uxth	r3, r3
 8007294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007298:	bf28      	it	cs
 800729a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800729e:	b29a      	uxth	r2, r3
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	791a      	ldrb	r2, [r3, #4]
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	795a      	ldrb	r2, [r3, #5]
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	799a      	ldrb	r2, [r3, #6]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	79da      	ldrb	r2, [r3, #7]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	7a1a      	ldrb	r2, [r3, #8]
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	d002      	beq.n	80072da <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	2209      	movs	r2, #9
 80072d8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b09      	cmp	r3, #9
 80072de:	f240 809d 	bls.w	800741c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80072e2:	2309      	movs	r3, #9
 80072e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072ea:	e081      	b.n	80073f0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072ec:	f107 0316 	add.w	r3, r7, #22
 80072f0:	4619      	mov	r1, r3
 80072f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f4:	f000 f99f 	bl	8007636 <USBH_GetNextDesc>
 80072f8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d176      	bne.n	80073f0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b09      	cmp	r3, #9
 8007308:	d002      	beq.n	8007310 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	2209      	movs	r2, #9
 800730e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007314:	221a      	movs	r2, #26
 8007316:	fb02 f303 	mul.w	r3, r2, r3
 800731a:	3308      	adds	r3, #8
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	4413      	add	r3, r2
 8007320:	3302      	adds	r3, #2
 8007322:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007326:	69f8      	ldr	r0, [r7, #28]
 8007328:	f000 f87e 	bl	8007428 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007336:	e043      	b.n	80073c0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007338:	f107 0316 	add.w	r3, r7, #22
 800733c:	4619      	mov	r1, r3
 800733e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007340:	f000 f979 	bl	8007636 <USBH_GetNextDesc>
 8007344:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b05      	cmp	r3, #5
 800734c:	d138      	bne.n	80073c0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	795b      	ldrb	r3, [r3, #5]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10f      	bne.n	8007376 <USBH_ParseCfgDesc+0x13a>
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	799b      	ldrb	r3, [r3, #6]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d10b      	bne.n	8007376 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	79db      	ldrb	r3, [r3, #7]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <USBH_ParseCfgDesc+0x14a>
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b09      	cmp	r3, #9
 800736c:	d00b      	beq.n	8007386 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	2209      	movs	r2, #9
 8007372:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007374:	e007      	b.n	8007386 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b07      	cmp	r3, #7
 800737c:	d004      	beq.n	8007388 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	2207      	movs	r2, #7
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	e000      	b.n	8007388 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007386:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800738c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007390:	3201      	adds	r2, #1
 8007392:	00d2      	lsls	r2, r2, #3
 8007394:	211a      	movs	r1, #26
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	4413      	add	r3, r2
 800739c:	3308      	adds	r3, #8
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	4413      	add	r3, r2
 80073a2:	3304      	adds	r3, #4
 80073a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80073a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a8:	69b9      	ldr	r1, [r7, #24]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f86b 	bl	8007486 <USBH_ParseEPDesc>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80073b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073ba:	3301      	adds	r3, #1
 80073bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	791b      	ldrb	r3, [r3, #4]
 80073c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d204      	bcs.n	80073d6 <USBH_ParseCfgDesc+0x19a>
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	885a      	ldrh	r2, [r3, #2]
 80073d0:	8afb      	ldrh	r3, [r7, #22]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d8b0      	bhi.n	8007338 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073de:	429a      	cmp	r2, r3
 80073e0:	d201      	bcs.n	80073e6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e01c      	b.n	8007420 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80073e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ea:	3301      	adds	r3, #1
 80073ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d805      	bhi.n	8007404 <USBH_ParseCfgDesc+0x1c8>
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	885a      	ldrh	r2, [r3, #2]
 80073fc:	8afb      	ldrh	r3, [r7, #22]
 80073fe:	429a      	cmp	r2, r3
 8007400:	f63f af74 	bhi.w	80072ec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	791b      	ldrb	r3, [r3, #4]
 8007408:	2b02      	cmp	r3, #2
 800740a:	bf28      	it	cs
 800740c:	2302      	movcs	r3, #2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007414:	429a      	cmp	r2, r3
 8007416:	d201      	bcs.n	800741c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007418:	2303      	movs	r3, #3
 800741a:	e001      	b.n	8007420 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800741c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007420:	4618      	mov	r0, r3
 8007422:	3730      	adds	r7, #48	; 0x30
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	785a      	ldrb	r2, [r3, #1]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	789a      	ldrb	r2, [r3, #2]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	78da      	ldrb	r2, [r3, #3]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	791a      	ldrb	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	795a      	ldrb	r2, [r3, #5]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	799a      	ldrb	r2, [r3, #6]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	79da      	ldrb	r2, [r3, #7]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	7a1a      	ldrb	r2, [r3, #8]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	721a      	strb	r2, [r3, #8]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007486:	b480      	push	{r7}
 8007488:	b087      	sub	sp, #28
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	781a      	ldrb	r2, [r3, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	785a      	ldrb	r2, [r3, #1]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	789a      	ldrb	r2, [r3, #2]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	78da      	ldrb	r2, [r3, #3]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3304      	adds	r3, #4
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3305      	adds	r3, #5
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	799a      	ldrb	r2, [r3, #6]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d102      	bne.n	80074e8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80074e2:	2303      	movs	r3, #3
 80074e4:	75fb      	strb	r3, [r7, #23]
 80074e6:	e033      	b.n	8007550 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	889b      	ldrh	r3, [r3, #4]
 80074ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80074f0:	f023 0307 	bic.w	r3, r3, #7
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	889b      	ldrh	r3, [r3, #4]
 80074fe:	b21a      	sxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b299      	uxth	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3305      	adds	r3, #5
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	b29b      	uxth	r3, r3
 8007514:	430b      	orrs	r3, r1
 8007516:	b29b      	uxth	r3, r3
 8007518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800751c:	2b00      	cmp	r3, #0
 800751e:	d110      	bne.n	8007542 <USBH_ParseEPDesc+0xbc>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	b299      	uxth	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3305      	adds	r3, #5
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	b29b      	uxth	r3, r3
 8007534:	430b      	orrs	r3, r1
 8007536:	b29b      	uxth	r3, r3
 8007538:	b21b      	sxth	r3, r3
 800753a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800753e:	b21b      	sxth	r3, r3
 8007540:	e001      	b.n	8007546 <USBH_ParseEPDesc+0xc0>
 8007542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007546:	4313      	orrs	r3, r2
 8007548:	b21b      	sxth	r3, r3
 800754a:	b29a      	uxth	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007556:	2b00      	cmp	r3, #0
 8007558:	d116      	bne.n	8007588 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	78db      	ldrb	r3, [r3, #3]
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	2b01      	cmp	r3, #1
 8007564:	d005      	beq.n	8007572 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	78db      	ldrb	r3, [r3, #3]
 800756a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800756e:	2b03      	cmp	r3, #3
 8007570:	d127      	bne.n	80075c2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	799b      	ldrb	r3, [r3, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <USBH_ParseEPDesc+0xfc>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	799b      	ldrb	r3, [r3, #6]
 800757e:	2b10      	cmp	r3, #16
 8007580:	d91f      	bls.n	80075c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007582:	2303      	movs	r3, #3
 8007584:	75fb      	strb	r3, [r7, #23]
 8007586:	e01c      	b.n	80075c2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	78db      	ldrb	r3, [r3, #3]
 800758c:	f003 0303 	and.w	r3, r3, #3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10a      	bne.n	80075aa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	799b      	ldrb	r3, [r3, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <USBH_ParseEPDesc+0x11e>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	799b      	ldrb	r3, [r3, #6]
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d90e      	bls.n	80075c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075a4:	2303      	movs	r3, #3
 80075a6:	75fb      	strb	r3, [r7, #23]
 80075a8:	e00b      	b.n	80075c2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d105      	bne.n	80075c2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	799b      	ldrb	r3, [r3, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075be:	2303      	movs	r3, #3
 80075c0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d120      	bne.n	800762a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	1e9a      	subs	r2, r3, #2
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	4293      	cmp	r3, r2
 80075f2:	bf28      	it	cs
 80075f4:	4613      	movcs	r3, r2
 80075f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3302      	adds	r3, #2
 80075fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80075fe:	2300      	movs	r3, #0
 8007600:	82fb      	strh	r3, [r7, #22]
 8007602:	e00b      	b.n	800761c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3301      	adds	r3, #1
 8007614:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007616:	8afb      	ldrh	r3, [r7, #22]
 8007618:	3302      	adds	r3, #2
 800761a:	82fb      	strh	r3, [r7, #22]
 800761c:	8afa      	ldrh	r2, [r7, #22]
 800761e:	8abb      	ldrh	r3, [r7, #20]
 8007620:	429a      	cmp	r2, r3
 8007622:	d3ef      	bcc.n	8007604 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
  }
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	4413      	add	r3, r2
 800764c:	b29a      	uxth	r2, r3
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800767a:	2301      	movs	r3, #1
 800767c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	789b      	ldrb	r3, [r3, #2]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d002      	beq.n	800768c <USBH_CtlReq+0x20>
 8007686:	2b02      	cmp	r3, #2
 8007688:	d00f      	beq.n	80076aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800768a:	e027      	b.n	80076dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2202      	movs	r2, #2
 80076a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80076a4:	2301      	movs	r3, #1
 80076a6:	75fb      	strb	r3, [r7, #23]
      break;
 80076a8:	e018      	b.n	80076dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f81c 	bl	80076e8 <USBH_HandleControl>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <USBH_CtlReq+0x54>
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d106      	bne.n	80076ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	761a      	strb	r2, [r3, #24]
      break;
 80076cc:	e005      	b.n	80076da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d102      	bne.n	80076da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	709a      	strb	r2, [r3, #2]
      break;
 80076da:	bf00      	nop
  }
  return status;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7e1b      	ldrb	r3, [r3, #24]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	2b0a      	cmp	r3, #10
 8007700:	f200 8156 	bhi.w	80079b0 <USBH_HandleControl+0x2c8>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <USBH_HandleControl+0x24>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007739 	.word	0x08007739
 8007710:	08007753 	.word	0x08007753
 8007714:	080077bd 	.word	0x080077bd
 8007718:	080077e3 	.word	0x080077e3
 800771c:	0800781b 	.word	0x0800781b
 8007720:	08007845 	.word	0x08007845
 8007724:	08007897 	.word	0x08007897
 8007728:	080078b9 	.word	0x080078b9
 800772c:	080078f5 	.word	0x080078f5
 8007730:	0800791b 	.word	0x0800791b
 8007734:	08007959 	.word	0x08007959
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0110 	add.w	r1, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	795b      	ldrb	r3, [r3, #5]
 8007742:	461a      	mov	r2, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f943 	bl	80079d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	761a      	strb	r2, [r3, #24]
      break;
 8007750:	e139      	b.n	80079c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	795b      	ldrb	r3, [r3, #5]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fcc5 	bl	80080e8 <USBH_LL_GetURBState>
 800775e:	4603      	mov	r3, r0
 8007760:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d11e      	bne.n	80077a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7c1b      	ldrb	r3, [r3, #16]
 800776c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007770:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8adb      	ldrh	r3, [r3, #22]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800777a:	7b7b      	ldrb	r3, [r7, #13]
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d103      	bne.n	8007788 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007786:	e115      	b.n	80079b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2205      	movs	r2, #5
 800778c:	761a      	strb	r2, [r3, #24]
      break;
 800778e:	e111      	b.n	80079b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007790:	7b7b      	ldrb	r3, [r7, #13]
 8007792:	2b80      	cmp	r3, #128	; 0x80
 8007794:	d103      	bne.n	800779e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2209      	movs	r2, #9
 800779a:	761a      	strb	r2, [r3, #24]
      break;
 800779c:	e10a      	b.n	80079b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2207      	movs	r2, #7
 80077a2:	761a      	strb	r2, [r3, #24]
      break;
 80077a4:	e106      	b.n	80079b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d003      	beq.n	80077b4 <USBH_HandleControl+0xcc>
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	f040 8100 	bne.w	80079b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	220b      	movs	r2, #11
 80077b8:	761a      	strb	r2, [r3, #24]
      break;
 80077ba:	e0fb      	b.n	80079b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6899      	ldr	r1, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	899a      	ldrh	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f93a 	bl	8007a4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2204      	movs	r2, #4
 80077de:	761a      	strb	r2, [r3, #24]
      break;
 80077e0:	e0f1      	b.n	80079c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	791b      	ldrb	r3, [r3, #4]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fc7d 	bl	80080e8 <USBH_LL_GetURBState>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d102      	bne.n	80077fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2209      	movs	r2, #9
 80077fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b05      	cmp	r3, #5
 8007802:	d102      	bne.n	800780a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007804:	2303      	movs	r3, #3
 8007806:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007808:	e0d6      	b.n	80079b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b04      	cmp	r3, #4
 800780e:	f040 80d3 	bne.w	80079b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	220b      	movs	r2, #11
 8007816:	761a      	strb	r2, [r3, #24]
      break;
 8007818:	e0ce      	b.n	80079b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6899      	ldr	r1, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	899a      	ldrh	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	795b      	ldrb	r3, [r3, #5]
 8007826:	2001      	movs	r0, #1
 8007828:	9000      	str	r0, [sp, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f8ea 	bl	8007a04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2206      	movs	r2, #6
 8007840:	761a      	strb	r2, [r3, #24]
      break;
 8007842:	e0c0      	b.n	80079c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	795b      	ldrb	r3, [r3, #5]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fc4c 	bl	80080e8 <USBH_LL_GetURBState>
 8007850:	4603      	mov	r3, r0
 8007852:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d103      	bne.n	8007862 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2207      	movs	r2, #7
 800785e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007860:	e0ac      	b.n	80079bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b05      	cmp	r3, #5
 8007866:	d105      	bne.n	8007874 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	220c      	movs	r2, #12
 800786c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800786e:	2303      	movs	r3, #3
 8007870:	73fb      	strb	r3, [r7, #15]
      break;
 8007872:	e0a3      	b.n	80079bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d103      	bne.n	8007882 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2205      	movs	r2, #5
 800787e:	761a      	strb	r2, [r3, #24]
      break;
 8007880:	e09c      	b.n	80079bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b04      	cmp	r3, #4
 8007886:	f040 8099 	bne.w	80079bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	220b      	movs	r2, #11
 800788e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007890:	2302      	movs	r3, #2
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	e092      	b.n	80079bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	791b      	ldrb	r3, [r3, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	2100      	movs	r1, #0
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f8d5 	bl	8007a4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2208      	movs	r2, #8
 80078b4:	761a      	strb	r2, [r3, #24]

      break;
 80078b6:	e086      	b.n	80079c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	791b      	ldrb	r3, [r3, #4]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fc12 	bl	80080e8 <USBH_LL_GetURBState>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d105      	bne.n	80078da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078d8:	e072      	b.n	80079c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d103      	bne.n	80078e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	220b      	movs	r2, #11
 80078e4:	761a      	strb	r2, [r3, #24]
      break;
 80078e6:	e06b      	b.n	80079c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	d168      	bne.n	80079c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80078ee:	2303      	movs	r3, #3
 80078f0:	73fb      	strb	r3, [r7, #15]
      break;
 80078f2:	e065      	b.n	80079c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	795b      	ldrb	r3, [r3, #5]
 80078f8:	2201      	movs	r2, #1
 80078fa:	9200      	str	r2, [sp, #0]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f87f 	bl	8007a04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	220a      	movs	r2, #10
 8007916:	761a      	strb	r2, [r3, #24]
      break;
 8007918:	e055      	b.n	80079c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	795b      	ldrb	r3, [r3, #5]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fbe1 	bl	80080e8 <USBH_LL_GetURBState>
 8007926:	4603      	mov	r3, r0
 8007928:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d105      	bne.n	800793c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	220d      	movs	r2, #13
 8007938:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800793a:	e043      	b.n	80079c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d103      	bne.n	800794a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2209      	movs	r2, #9
 8007946:	761a      	strb	r2, [r3, #24]
      break;
 8007948:	e03c      	b.n	80079c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d139      	bne.n	80079c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	220b      	movs	r2, #11
 8007954:	761a      	strb	r2, [r3, #24]
      break;
 8007956:	e035      	b.n	80079c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7e5b      	ldrb	r3, [r3, #25]
 800795c:	3301      	adds	r3, #1
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	765a      	strb	r2, [r3, #25]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7e5b      	ldrb	r3, [r3, #25]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d806      	bhi.n	800797a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007978:	e025      	b.n	80079c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007980:	2106      	movs	r1, #6
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	795b      	ldrb	r3, [r3, #5]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f90c 	bl	8007bb0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	791b      	ldrb	r3, [r3, #4]
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f906 	bl	8007bb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80079aa:	2302      	movs	r3, #2
 80079ac:	73fb      	strb	r3, [r7, #15]
      break;
 80079ae:	e00a      	b.n	80079c6 <USBH_HandleControl+0x2de>

    default:
      break;
 80079b0:	bf00      	nop
 80079b2:	e008      	b.n	80079c6 <USBH_HandleControl+0x2de>
      break;
 80079b4:	bf00      	nop
 80079b6:	e006      	b.n	80079c6 <USBH_HandleControl+0x2de>
      break;
 80079b8:	bf00      	nop
 80079ba:	e004      	b.n	80079c6 <USBH_HandleControl+0x2de>
      break;
 80079bc:	bf00      	nop
 80079be:	e002      	b.n	80079c6 <USBH_HandleControl+0x2de>
      break;
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <USBH_HandleControl+0x2de>
      break;
 80079c4:	bf00      	nop
  }

  return status;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af04      	add	r7, sp, #16
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079de:	79f9      	ldrb	r1, [r7, #7]
 80079e0:	2300      	movs	r3, #0
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	2308      	movs	r3, #8
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	2300      	movs	r3, #0
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	2300      	movs	r3, #0
 80079f2:	2200      	movs	r2, #0
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fb46 	bl	8008086 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af04      	add	r7, sp, #16
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	461a      	mov	r2, r3
 8007a12:	460b      	mov	r3, r1
 8007a14:	80fb      	strh	r3, [r7, #6]
 8007a16:	4613      	mov	r3, r2
 8007a18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a28:	7979      	ldrb	r1, [r7, #5]
 8007a2a:	7e3b      	ldrb	r3, [r7, #24]
 8007a2c:	9303      	str	r3, [sp, #12]
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	9302      	str	r3, [sp, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	2301      	movs	r3, #1
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fb21 	bl	8008086 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b088      	sub	sp, #32
 8007a52:	af04      	add	r7, sp, #16
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	4611      	mov	r1, r2
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	80fb      	strh	r3, [r7, #6]
 8007a60:	4613      	mov	r3, r2
 8007a62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a64:	7979      	ldrb	r1, [r7, #5]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9303      	str	r3, [sp, #12]
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	2301      	movs	r3, #1
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2300      	movs	r3, #0
 8007a78:	2201      	movs	r2, #1
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fb03 	bl	8008086 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a80:	2300      	movs	r3, #0

}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b088      	sub	sp, #32
 8007a8e:	af04      	add	r7, sp, #16
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	4611      	mov	r1, r2
 8007a96:	461a      	mov	r2, r3
 8007a98:	460b      	mov	r3, r1
 8007a9a:	80fb      	strh	r3, [r7, #6]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007aae:	7979      	ldrb	r1, [r7, #5]
 8007ab0:	7e3b      	ldrb	r3, [r7, #24]
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	88fb      	ldrh	r3, [r7, #6]
 8007ab6:	9302      	str	r3, [sp, #8]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	2301      	movs	r3, #1
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fade 	bl	8008086 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af04      	add	r7, sp, #16
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	80fb      	strh	r3, [r7, #6]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007aea:	7979      	ldrb	r1, [r7, #5]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	9302      	str	r3, [sp, #8]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	2301      	movs	r3, #1
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2302      	movs	r3, #2
 8007afe:	2201      	movs	r2, #1
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 fac0 	bl	8008086 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af04      	add	r7, sp, #16
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	4608      	mov	r0, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	70fb      	strb	r3, [r7, #3]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70bb      	strb	r3, [r7, #2]
 8007b26:	4613      	mov	r3, r2
 8007b28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b2a:	7878      	ldrb	r0, [r7, #1]
 8007b2c:	78ba      	ldrb	r2, [r7, #2]
 8007b2e:	78f9      	ldrb	r1, [r7, #3]
 8007b30:	8b3b      	ldrh	r3, [r7, #24]
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	7d3b      	ldrb	r3, [r7, #20]
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	7c3b      	ldrb	r3, [r7, #16]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa53 	bl	8007fea <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa72 	bl	8008048 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f836 	bl	8007bec <USBH_GetFreePipe>
 8007b80:	4603      	mov	r3, r0
 8007b82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b84:	89fb      	ldrh	r3, [r7, #14]
 8007b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00a      	beq.n	8007ba4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	89fb      	ldrh	r3, [r7, #14]
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	33e0      	adds	r3, #224	; 0xe0
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007ba4:	89fb      	ldrh	r3, [r7, #14]
 8007ba6:	b2db      	uxtb	r3, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	2b0f      	cmp	r3, #15
 8007bc0:	d80d      	bhi.n	8007bde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	33e0      	adds	r3, #224	; 0xe0
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	33e0      	adds	r3, #224	; 0xe0
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
 8007bfc:	e00f      	b.n	8007c1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	33e0      	adds	r3, #224	; 0xe0
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	e007      	b.n	8007c28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	73fb      	strb	r3, [r7, #15]
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b0f      	cmp	r3, #15
 8007c22:	d9ec      	bls.n	8007bfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	490e      	ldr	r1, [pc, #56]	; (8007c74 <MX_USB_HOST_Init+0x40>)
 8007c3c:	480e      	ldr	r0, [pc, #56]	; (8007c78 <MX_USB_HOST_Init+0x44>)
 8007c3e:	f7fe fba7 	bl	8006390 <USBH_Init>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c48:	f7f8 fe86 	bl	8000958 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c4c:	490b      	ldr	r1, [pc, #44]	; (8007c7c <MX_USB_HOST_Init+0x48>)
 8007c4e:	480a      	ldr	r0, [pc, #40]	; (8007c78 <MX_USB_HOST_Init+0x44>)
 8007c50:	f7fe fc2c 	bl	80064ac <USBH_RegisterClass>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007c5a:	f7f8 fe7d 	bl	8000958 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007c5e:	4806      	ldr	r0, [pc, #24]	; (8007c78 <MX_USB_HOST_Init+0x44>)
 8007c60:	f7fe fcb0 	bl	80065c4 <USBH_Start>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007c6a:	f7f8 fe75 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007c6e:	bf00      	nop
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	08007c95 	.word	0x08007c95
 8007c78:	200001f8 	.word	0x200001f8
 8007c7c:	20000018 	.word	0x20000018

08007c80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <MX_USB_HOST_Process+0x10>)
 8007c86:	f7fe fcad 	bl	80065e4 <USBH_Process>
}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	200001f8 	.word	0x200001f8

08007c94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d819      	bhi.n	8007cdc <USBH_UserProcess+0x48>
 8007ca8:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <USBH_UserProcess+0x1c>)
 8007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cae:	bf00      	nop
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007ccd 	.word	0x08007ccd
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cc5 	.word	0x08007cc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <USBH_UserProcess+0x58>)
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	701a      	strb	r2, [r3, #0]
  break;
 8007cca:	e008      	b.n	8007cde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ccc:	4b07      	ldr	r3, [pc, #28]	; (8007cec <USBH_UserProcess+0x58>)
 8007cce:	2202      	movs	r2, #2
 8007cd0:	701a      	strb	r2, [r3, #0]
  break;
 8007cd2:	e004      	b.n	8007cde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <USBH_UserProcess+0x58>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
  break;
 8007cda:	e000      	b.n	8007cde <USBH_UserProcess+0x4a>

  default:
  break;
 8007cdc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	200005d0 	.word	0x200005d0

08007cf0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cf8:	f107 0314 	add.w	r3, r7, #20
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	609a      	str	r2, [r3, #8]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d10:	d147      	bne.n	8007da2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d12:	2300      	movs	r3, #0
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	4b25      	ldr	r3, [pc, #148]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	4a24      	ldr	r2, [pc, #144]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6313      	str	r3, [r2, #48]	; 0x30
 8007d22:	4b22      	ldr	r3, [pc, #136]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d3c:	f107 0314 	add.w	r3, r7, #20
 8007d40:	4619      	mov	r1, r3
 8007d42:	481b      	ldr	r0, [pc, #108]	; (8007db0 <HAL_HCD_MspInit+0xc0>)
 8007d44:	f7f9 f9dc 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d56:	2300      	movs	r3, #0
 8007d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d5e:	f107 0314 	add.w	r3, r7, #20
 8007d62:	4619      	mov	r1, r3
 8007d64:	4812      	ldr	r0, [pc, #72]	; (8007db0 <HAL_HCD_MspInit+0xc0>)
 8007d66:	f7f9 f9cb 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d6a:	4b10      	ldr	r3, [pc, #64]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6e:	4a0f      	ldr	r2, [pc, #60]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	6353      	str	r3, [r2, #52]	; 0x34
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	4a0b      	ldr	r2, [pc, #44]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d84:	6453      	str	r3, [r2, #68]	; 0x44
 8007d86:	4b09      	ldr	r3, [pc, #36]	; (8007dac <HAL_HCD_MspInit+0xbc>)
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d92:	2200      	movs	r2, #0
 8007d94:	2100      	movs	r1, #0
 8007d96:	2043      	movs	r0, #67	; 0x43
 8007d98:	f7f9 f97b 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d9c:	2043      	movs	r0, #67	; 0x43
 8007d9e:	f7f9 f994 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007da2:	bf00      	nop
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	40023800 	.word	0x40023800
 8007db0:	40020000 	.word	0x40020000

08007db4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe ffed 	bl	8006da2 <USBH_LL_IncTimer>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff f825 	bl	8006e2e <USBH_LL_Connect>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff f82e 	bl	8006e5c <USBH_LL_Disconnect>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
 8007e14:	4613      	mov	r3, r2
 8007e16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe ffdf 	bl	8006df6 <USBH_LL_PortEnabled>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe ffdf 	bl	8006e12 <USBH_LL_PortDisabled>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d12a      	bne.n	8007ec4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007e6e:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e7e:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007e86:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e88:	2208      	movs	r2, #8
 8007e8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007e8c:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007e98:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ea4:	480a      	ldr	r0, [pc, #40]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007ea6:	f7f9 fae0 	bl	800146a <HAL_HCD_Init>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007eb0:	f7f8 fd52 	bl	8000958 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007eb4:	4806      	ldr	r0, [pc, #24]	; (8007ed0 <USBH_LL_Init+0x74>)
 8007eb6:	f7f9 fec4 	bl	8001c42 <HAL_HCD_GetCurrentFrame>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fe ff60 	bl	8006d84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	200005d4 	.word	0x200005d4

08007ed4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 fe33 	bl	8001b56 <HAL_HCD_Start>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f95c 	bl	80081b4 <USBH_Get_USB_Status>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7f9 fe3b 	bl	8001b9c <HAL_HCD_Stop>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 f941 	bl	80081b4 <USBH_Get_USB_Status>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7f9 fe83 	bl	8001c5e <HAL_HCD_GetCurrentSpeed>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d00c      	beq.n	8007f78 <USBH_LL_GetSpeed+0x38>
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d80d      	bhi.n	8007f7e <USBH_LL_GetSpeed+0x3e>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <USBH_LL_GetSpeed+0x2c>
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d003      	beq.n	8007f72 <USBH_LL_GetSpeed+0x32>
 8007f6a:	e008      	b.n	8007f7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f70:	e008      	b.n	8007f84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007f72:	2301      	movs	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
    break;
 8007f76:	e005      	b.n	8007f84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7c:	e002      	b.n	8007f84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	73fb      	strb	r3, [r7, #15]
    break;
 8007f82:	bf00      	nop
  }
  return  speed;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7f9 fe16 	bl	8001bd6 <HAL_HCD_ResetPort>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f8ff 	bl	80081b4 <USBH_Get_USB_Status>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f9 fe1d 	bl	8001c1a <HAL_HCD_HC_GetXferCount>
 8007fe0:	4603      	mov	r3, r0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fea:	b590      	push	{r4, r7, lr}
 8007fec:	b089      	sub	sp, #36	; 0x24
 8007fee:	af04      	add	r7, sp, #16
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70bb      	strb	r3, [r7, #2]
 8008000:	4613      	mov	r3, r2
 8008002:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008012:	787c      	ldrb	r4, [r7, #1]
 8008014:	78ba      	ldrb	r2, [r7, #2]
 8008016:	78f9      	ldrb	r1, [r7, #3]
 8008018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	4623      	mov	r3, r4
 800802a:	f7f9 fa80 	bl	800152e <HAL_HCD_HC_Init>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8bd 	bl	80081b4 <USBH_Get_USB_Status>
 800803a:	4603      	mov	r3, r0
 800803c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	bd90      	pop	{r4, r7, pc}

08008048 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f7f9 faf0 	bl	800164c <HAL_HCD_HC_Halt>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f89e 	bl	80081b4 <USBH_Get_USB_Status>
 8008078:	4603      	mov	r3, r0
 800807a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800807c:	7bbb      	ldrb	r3, [r7, #14]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008086:	b590      	push	{r4, r7, lr}
 8008088:	b089      	sub	sp, #36	; 0x24
 800808a:	af04      	add	r7, sp, #16
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	461a      	mov	r2, r3
 8008094:	4603      	mov	r3, r0
 8008096:	70fb      	strb	r3, [r7, #3]
 8008098:	460b      	mov	r3, r1
 800809a:	70bb      	strb	r3, [r7, #2]
 800809c:	4613      	mov	r3, r2
 800809e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080ae:	787c      	ldrb	r4, [r7, #1]
 80080b0:	78ba      	ldrb	r2, [r7, #2]
 80080b2:	78f9      	ldrb	r1, [r7, #3]
 80080b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080b8:	9303      	str	r3, [sp, #12]
 80080ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080bc:	9302      	str	r3, [sp, #8]
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4623      	mov	r3, r4
 80080ca:	f7f9 fae3 	bl	8001694 <HAL_HCD_HC_SubmitRequest>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f86d 	bl	80081b4 <USBH_Get_USB_Status>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080de:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd90      	pop	{r4, r7, pc}

080080e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f7f9 fd77 	bl	8001bf2 <HAL_HCD_HC_GetURBState>
 8008104:	4603      	mov	r3, r0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008120:	2b01      	cmp	r3, #1
 8008122:	d103      	bne.n	800812c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f870 	bl	800820c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800812c:	20c8      	movs	r0, #200	; 0xc8
 800812e:	f7f8 feb1 	bl	8000e94 <HAL_Delay>
  return USBH_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
 8008148:	4613      	mov	r3, r2
 800814a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008152:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	212c      	movs	r1, #44	; 0x2c
 800815a:	fb01 f303 	mul.w	r3, r1, r3
 800815e:	4413      	add	r3, r2
 8008160:	333b      	adds	r3, #59	; 0x3b
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	212c      	movs	r1, #44	; 0x2c
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	3354      	adds	r3, #84	; 0x54
 8008176:	78ba      	ldrb	r2, [r7, #2]
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	e008      	b.n	800818e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	212c      	movs	r1, #44	; 0x2c
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	4413      	add	r3, r2
 8008188:	3355      	adds	r3, #85	; 0x55
 800818a:	78ba      	ldrb	r2, [r7, #2]
 800818c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7f8 fe75 	bl	8000e94 <HAL_Delay>
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d817      	bhi.n	80081f8 <USBH_Get_USB_Status+0x44>
 80081c8:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBH_Get_USB_Status+0x1c>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081e7 	.word	0x080081e7
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	080081f3 	.word	0x080081f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e00b      	b.n	80081fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e008      	b.n	80081fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	e005      	b.n	80081fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80081f2:	2302      	movs	r3, #2
 80081f4:	73fb      	strb	r3, [r7, #15]
    break;
 80081f6:	e002      	b.n	80081fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80081f8:	2302      	movs	r3, #2
 80081fa:	73fb      	strb	r3, [r7, #15]
    break;
 80081fc:	bf00      	nop
  }
  return usb_status;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
 8008224:	e001      	b.n	800822a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	461a      	mov	r2, r3
 800822e:	2101      	movs	r1, #1
 8008230:	4803      	ldr	r0, [pc, #12]	; (8008240 <MX_DriverVbusFS+0x34>)
 8008232:	f7f9 f901 	bl	8001438 <HAL_GPIO_WritePin>
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40020800 	.word	0x40020800

08008244 <__errno>:
 8008244:	4b01      	ldr	r3, [pc, #4]	; (800824c <__errno+0x8>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000038 	.word	0x20000038

08008250 <__libc_init_array>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4d0d      	ldr	r5, [pc, #52]	; (8008288 <__libc_init_array+0x38>)
 8008254:	4c0d      	ldr	r4, [pc, #52]	; (800828c <__libc_init_array+0x3c>)
 8008256:	1b64      	subs	r4, r4, r5
 8008258:	10a4      	asrs	r4, r4, #2
 800825a:	2600      	movs	r6, #0
 800825c:	42a6      	cmp	r6, r4
 800825e:	d109      	bne.n	8008274 <__libc_init_array+0x24>
 8008260:	4d0b      	ldr	r5, [pc, #44]	; (8008290 <__libc_init_array+0x40>)
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <__libc_init_array+0x44>)
 8008264:	f000 f92e 	bl	80084c4 <_init>
 8008268:	1b64      	subs	r4, r4, r5
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	2600      	movs	r6, #0
 800826e:	42a6      	cmp	r6, r4
 8008270:	d105      	bne.n	800827e <__libc_init_array+0x2e>
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	f855 3b04 	ldr.w	r3, [r5], #4
 8008278:	4798      	blx	r3
 800827a:	3601      	adds	r6, #1
 800827c:	e7ee      	b.n	800825c <__libc_init_array+0xc>
 800827e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008282:	4798      	blx	r3
 8008284:	3601      	adds	r6, #1
 8008286:	e7f2      	b.n	800826e <__libc_init_array+0x1e>
 8008288:	08008500 	.word	0x08008500
 800828c:	08008500 	.word	0x08008500
 8008290:	08008500 	.word	0x08008500
 8008294:	08008504 	.word	0x08008504

08008298 <malloc>:
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <malloc+0xc>)
 800829a:	4601      	mov	r1, r0
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f000 b87f 	b.w	80083a0 <_malloc_r>
 80082a2:	bf00      	nop
 80082a4:	20000038 	.word	0x20000038

080082a8 <free>:
 80082a8:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <free+0xc>)
 80082aa:	4601      	mov	r1, r0
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	f000 b80b 	b.w	80082c8 <_free_r>
 80082b2:	bf00      	nop
 80082b4:	20000038 	.word	0x20000038

080082b8 <memset>:
 80082b8:	4402      	add	r2, r0
 80082ba:	4603      	mov	r3, r0
 80082bc:	4293      	cmp	r3, r2
 80082be:	d100      	bne.n	80082c2 <memset+0xa>
 80082c0:	4770      	bx	lr
 80082c2:	f803 1b01 	strb.w	r1, [r3], #1
 80082c6:	e7f9      	b.n	80082bc <memset+0x4>

080082c8 <_free_r>:
 80082c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ca:	2900      	cmp	r1, #0
 80082cc:	d044      	beq.n	8008358 <_free_r+0x90>
 80082ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d2:	9001      	str	r0, [sp, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f1a1 0404 	sub.w	r4, r1, #4
 80082da:	bfb8      	it	lt
 80082dc:	18e4      	addlt	r4, r4, r3
 80082de:	f000 f8e3 	bl	80084a8 <__malloc_lock>
 80082e2:	4a1e      	ldr	r2, [pc, #120]	; (800835c <_free_r+0x94>)
 80082e4:	9801      	ldr	r0, [sp, #4]
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	b933      	cbnz	r3, 80082f8 <_free_r+0x30>
 80082ea:	6063      	str	r3, [r4, #4]
 80082ec:	6014      	str	r4, [r2, #0]
 80082ee:	b003      	add	sp, #12
 80082f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082f4:	f000 b8de 	b.w	80084b4 <__malloc_unlock>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d908      	bls.n	800830e <_free_r+0x46>
 80082fc:	6825      	ldr	r5, [r4, #0]
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	428b      	cmp	r3, r1
 8008302:	bf01      	itttt	eq
 8008304:	6819      	ldreq	r1, [r3, #0]
 8008306:	685b      	ldreq	r3, [r3, #4]
 8008308:	1949      	addeq	r1, r1, r5
 800830a:	6021      	streq	r1, [r4, #0]
 800830c:	e7ed      	b.n	80082ea <_free_r+0x22>
 800830e:	461a      	mov	r2, r3
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	b10b      	cbz	r3, 8008318 <_free_r+0x50>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d9fa      	bls.n	800830e <_free_r+0x46>
 8008318:	6811      	ldr	r1, [r2, #0]
 800831a:	1855      	adds	r5, r2, r1
 800831c:	42a5      	cmp	r5, r4
 800831e:	d10b      	bne.n	8008338 <_free_r+0x70>
 8008320:	6824      	ldr	r4, [r4, #0]
 8008322:	4421      	add	r1, r4
 8008324:	1854      	adds	r4, r2, r1
 8008326:	42a3      	cmp	r3, r4
 8008328:	6011      	str	r1, [r2, #0]
 800832a:	d1e0      	bne.n	80082ee <_free_r+0x26>
 800832c:	681c      	ldr	r4, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	6053      	str	r3, [r2, #4]
 8008332:	4421      	add	r1, r4
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	e7da      	b.n	80082ee <_free_r+0x26>
 8008338:	d902      	bls.n	8008340 <_free_r+0x78>
 800833a:	230c      	movs	r3, #12
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	e7d6      	b.n	80082ee <_free_r+0x26>
 8008340:	6825      	ldr	r5, [r4, #0]
 8008342:	1961      	adds	r1, r4, r5
 8008344:	428b      	cmp	r3, r1
 8008346:	bf04      	itt	eq
 8008348:	6819      	ldreq	r1, [r3, #0]
 800834a:	685b      	ldreq	r3, [r3, #4]
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	bf04      	itt	eq
 8008350:	1949      	addeq	r1, r1, r5
 8008352:	6021      	streq	r1, [r4, #0]
 8008354:	6054      	str	r4, [r2, #4]
 8008356:	e7ca      	b.n	80082ee <_free_r+0x26>
 8008358:	b003      	add	sp, #12
 800835a:	bd30      	pop	{r4, r5, pc}
 800835c:	200008d8 	.word	0x200008d8

08008360 <sbrk_aligned>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4e0e      	ldr	r6, [pc, #56]	; (800839c <sbrk_aligned+0x3c>)
 8008364:	460c      	mov	r4, r1
 8008366:	6831      	ldr	r1, [r6, #0]
 8008368:	4605      	mov	r5, r0
 800836a:	b911      	cbnz	r1, 8008372 <sbrk_aligned+0x12>
 800836c:	f000 f88c 	bl	8008488 <_sbrk_r>
 8008370:	6030      	str	r0, [r6, #0]
 8008372:	4621      	mov	r1, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f000 f887 	bl	8008488 <_sbrk_r>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d00a      	beq.n	8008394 <sbrk_aligned+0x34>
 800837e:	1cc4      	adds	r4, r0, #3
 8008380:	f024 0403 	bic.w	r4, r4, #3
 8008384:	42a0      	cmp	r0, r4
 8008386:	d007      	beq.n	8008398 <sbrk_aligned+0x38>
 8008388:	1a21      	subs	r1, r4, r0
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f87c 	bl	8008488 <_sbrk_r>
 8008390:	3001      	adds	r0, #1
 8008392:	d101      	bne.n	8008398 <sbrk_aligned+0x38>
 8008394:	f04f 34ff 	mov.w	r4, #4294967295
 8008398:	4620      	mov	r0, r4
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	200008dc 	.word	0x200008dc

080083a0 <_malloc_r>:
 80083a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a4:	1ccd      	adds	r5, r1, #3
 80083a6:	f025 0503 	bic.w	r5, r5, #3
 80083aa:	3508      	adds	r5, #8
 80083ac:	2d0c      	cmp	r5, #12
 80083ae:	bf38      	it	cc
 80083b0:	250c      	movcc	r5, #12
 80083b2:	2d00      	cmp	r5, #0
 80083b4:	4607      	mov	r7, r0
 80083b6:	db01      	blt.n	80083bc <_malloc_r+0x1c>
 80083b8:	42a9      	cmp	r1, r5
 80083ba:	d905      	bls.n	80083c8 <_malloc_r+0x28>
 80083bc:	230c      	movs	r3, #12
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	2600      	movs	r6, #0
 80083c2:	4630      	mov	r0, r6
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	4e2e      	ldr	r6, [pc, #184]	; (8008484 <_malloc_r+0xe4>)
 80083ca:	f000 f86d 	bl	80084a8 <__malloc_lock>
 80083ce:	6833      	ldr	r3, [r6, #0]
 80083d0:	461c      	mov	r4, r3
 80083d2:	bb34      	cbnz	r4, 8008422 <_malloc_r+0x82>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff ffc2 	bl	8008360 <sbrk_aligned>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	4604      	mov	r4, r0
 80083e0:	d14d      	bne.n	800847e <_malloc_r+0xde>
 80083e2:	6834      	ldr	r4, [r6, #0]
 80083e4:	4626      	mov	r6, r4
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	d140      	bne.n	800846c <_malloc_r+0xcc>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	4631      	mov	r1, r6
 80083ee:	4638      	mov	r0, r7
 80083f0:	eb04 0803 	add.w	r8, r4, r3
 80083f4:	f000 f848 	bl	8008488 <_sbrk_r>
 80083f8:	4580      	cmp	r8, r0
 80083fa:	d13a      	bne.n	8008472 <_malloc_r+0xd2>
 80083fc:	6821      	ldr	r1, [r4, #0]
 80083fe:	3503      	adds	r5, #3
 8008400:	1a6d      	subs	r5, r5, r1
 8008402:	f025 0503 	bic.w	r5, r5, #3
 8008406:	3508      	adds	r5, #8
 8008408:	2d0c      	cmp	r5, #12
 800840a:	bf38      	it	cc
 800840c:	250c      	movcc	r5, #12
 800840e:	4629      	mov	r1, r5
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff ffa5 	bl	8008360 <sbrk_aligned>
 8008416:	3001      	adds	r0, #1
 8008418:	d02b      	beq.n	8008472 <_malloc_r+0xd2>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	442b      	add	r3, r5
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	e00e      	b.n	8008440 <_malloc_r+0xa0>
 8008422:	6822      	ldr	r2, [r4, #0]
 8008424:	1b52      	subs	r2, r2, r5
 8008426:	d41e      	bmi.n	8008466 <_malloc_r+0xc6>
 8008428:	2a0b      	cmp	r2, #11
 800842a:	d916      	bls.n	800845a <_malloc_r+0xba>
 800842c:	1961      	adds	r1, r4, r5
 800842e:	42a3      	cmp	r3, r4
 8008430:	6025      	str	r5, [r4, #0]
 8008432:	bf18      	it	ne
 8008434:	6059      	strne	r1, [r3, #4]
 8008436:	6863      	ldr	r3, [r4, #4]
 8008438:	bf08      	it	eq
 800843a:	6031      	streq	r1, [r6, #0]
 800843c:	5162      	str	r2, [r4, r5]
 800843e:	604b      	str	r3, [r1, #4]
 8008440:	4638      	mov	r0, r7
 8008442:	f104 060b 	add.w	r6, r4, #11
 8008446:	f000 f835 	bl	80084b4 <__malloc_unlock>
 800844a:	f026 0607 	bic.w	r6, r6, #7
 800844e:	1d23      	adds	r3, r4, #4
 8008450:	1af2      	subs	r2, r6, r3
 8008452:	d0b6      	beq.n	80083c2 <_malloc_r+0x22>
 8008454:	1b9b      	subs	r3, r3, r6
 8008456:	50a3      	str	r3, [r4, r2]
 8008458:	e7b3      	b.n	80083c2 <_malloc_r+0x22>
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	42a3      	cmp	r3, r4
 800845e:	bf0c      	ite	eq
 8008460:	6032      	streq	r2, [r6, #0]
 8008462:	605a      	strne	r2, [r3, #4]
 8008464:	e7ec      	b.n	8008440 <_malloc_r+0xa0>
 8008466:	4623      	mov	r3, r4
 8008468:	6864      	ldr	r4, [r4, #4]
 800846a:	e7b2      	b.n	80083d2 <_malloc_r+0x32>
 800846c:	4634      	mov	r4, r6
 800846e:	6876      	ldr	r6, [r6, #4]
 8008470:	e7b9      	b.n	80083e6 <_malloc_r+0x46>
 8008472:	230c      	movs	r3, #12
 8008474:	603b      	str	r3, [r7, #0]
 8008476:	4638      	mov	r0, r7
 8008478:	f000 f81c 	bl	80084b4 <__malloc_unlock>
 800847c:	e7a1      	b.n	80083c2 <_malloc_r+0x22>
 800847e:	6025      	str	r5, [r4, #0]
 8008480:	e7de      	b.n	8008440 <_malloc_r+0xa0>
 8008482:	bf00      	nop
 8008484:	200008d8 	.word	0x200008d8

08008488 <_sbrk_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d06      	ldr	r5, [pc, #24]	; (80084a4 <_sbrk_r+0x1c>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f8 fc1a 	bl	8000ccc <_sbrk>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_sbrk_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_sbrk_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	200008e0 	.word	0x200008e0

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__malloc_lock+0x8>)
 80084aa:	f000 b809 	b.w	80084c0 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	200008e4 	.word	0x200008e4

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__malloc_unlock+0x8>)
 80084b6:	f000 b804 	b.w	80084c2 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	200008e4 	.word	0x200008e4

080084c0 <__retarget_lock_acquire_recursive>:
 80084c0:	4770      	bx	lr

080084c2 <__retarget_lock_release_recursive>:
 80084c2:	4770      	bx	lr

080084c4 <_init>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	bf00      	nop
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr

080084d0 <_fini>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr
