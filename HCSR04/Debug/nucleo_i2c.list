
nucleo_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08004cec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004cec  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e808  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002069  00000000  00000000  0002e83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00031470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000139a1  00000000  00000000  00031f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0b8  00000000  00000000  00045911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078b5d  00000000  00000000  000549c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  000cd578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c4c 	.word	0x08004c4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004c4c 	.word	0x08004c4c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint8_t pdata[10];
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fb78 	bl	8000ba0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81c 	bl	80004ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f984 	bl	80007c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f964 	bl	8000784 <MX_DMA_Init>
  MX_ADC_Init();
 80004bc:	f000 f88c 	bl	80005d8 <MX_ADC_Init>
  MX_I2C1_Init();
 80004c0:	f000 f8f0 	bl	80006a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004c4:	f000 f92e 	bl	8000724 <MX_USART1_UART_Init>
 // Scan_I2C_Address();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, pdata, 10);
 80004c8:	4906      	ldr	r1, [pc, #24]	; (80004e4 <main+0x3c>)
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <main+0x40>)
 80004cc:	220a      	movs	r2, #10
 80004ce:	0018      	movs	r0, r3
 80004d0:	f003 f92a 	bl	8003728 <HAL_UART_Receive_IT>
  while(1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart1, pdata, 10);
 80004d4:	4903      	ldr	r1, [pc, #12]	; (80004e4 <main+0x3c>)
 80004d6:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <main+0x40>)
 80004d8:	220a      	movs	r2, #10
 80004da:	0018      	movs	r0, r3
 80004dc:	f003 f924 	bl	8003728 <HAL_UART_Receive_IT>
 80004e0:	e7f8      	b.n	80004d4 <main+0x2c>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	2000019c 	.word	0x2000019c
 80004e8:	20000118 	.word	0x20000118

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b09d      	sub	sp, #116	; 0x74
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2438      	movs	r4, #56	; 0x38
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2338      	movs	r3, #56	; 0x38
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f004 fb9d 	bl	8004c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2324      	movs	r3, #36	; 0x24
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2314      	movs	r3, #20
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f004 fb95 	bl	8004c3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2324      	movs	r3, #36	; 0x24
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f004 fb8e 	bl	8004c3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <SystemClock_Config+0xe4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <SystemClock_Config+0xe8>)
 8000526:	401a      	ands	r2, r3
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <SystemClock_Config+0xe4>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0109      	lsls	r1, r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2210      	movs	r2, #16
 8000544:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2202      	movs	r2, #2
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	02d2      	lsls	r2, r2, #11
 8000558:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	03d2      	lsls	r2, r2, #15
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	187b      	adds	r3, r7, r1
 8000564:	0018      	movs	r0, r3
 8000566:	f002 f93f 	bl	80027e8 <HAL_RCC_OscConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800056e:	f000 f993 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	2124      	movs	r1, #36	; 0x24
 8000574:	187b      	adds	r3, r7, r1
 8000576:	220f      	movs	r2, #15
 8000578:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2203      	movs	r2, #3
 800057e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2101      	movs	r1, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f002 fcea 	bl	8002f70 <HAL_RCC_ClockConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005a0:	f000 f97a 	bl	8000898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2209      	movs	r2, #9
 80005a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fefd 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005c2:	f000 f969 	bl	8000898 <Error_Handler>
  }
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b01d      	add	sp, #116	; 0x74
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40007000 	.word	0x40007000
 80005d4:	ffffe7ff 	.word	0xffffe7ff

080005d8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	003b      	movs	r3, r7
 80005e0:	0018      	movs	r0, r3
 80005e2:	2308      	movs	r3, #8
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f004 fb28 	bl	8004c3c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_ADC_Init+0xc0>)
 80005ee:	4a2b      	ldr	r2, [pc, #172]	; (800069c <MX_ADC_Init+0xc4>)
 80005f0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <MX_ADC_Init+0xc0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_ADC_Init+0xc0>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	05d2      	lsls	r2, r2, #23
 80005fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_ADC_Init+0xc0>)
 8000602:	2208      	movs	r2, #8
 8000604:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_ADC_Init+0xc0>)
 8000608:	2200      	movs	r2, #0
 800060a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_ADC_Init+0xc0>)
 800060e:	2201      	movs	r2, #1
 8000610:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_ADC_Init+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ADC_Init+0xc0>)
 800061a:	2220      	movs	r2, #32
 800061c:	2101      	movs	r1, #1
 800061e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ADC_Init+0xc0>)
 8000622:	2221      	movs	r2, #33	; 0x21
 8000624:	2100      	movs	r1, #0
 8000626:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ADC_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ADC_Init+0xc0>)
 8000630:	22c2      	movs	r2, #194	; 0xc2
 8000632:	32ff      	adds	r2, #255	; 0xff
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ADC_Init+0xc0>)
 8000638:	222c      	movs	r2, #44	; 0x2c
 800063a:	2101      	movs	r1, #1
 800063c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_ADC_Init+0xc0>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_ADC_Init+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_ADC_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_ADC_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_ADC_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_ADC_Init+0xc0>)
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fb0e 	bl	8000c80 <HAL_ADC_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000668:	f000 f916 	bl	8000898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800066c:	003b      	movs	r3, r7
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <MX_ADC_Init+0xc8>)
 8000670:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000672:	003b      	movs	r3, r7
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0152      	lsls	r2, r2, #5
 8000678:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800067a:	003a      	movs	r2, r7
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_ADC_Init+0xc0>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fc71 	bl	8000f68 <HAL_ADC_ConfigChannel>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800068a:	f000 f905 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000028 	.word	0x20000028
 800069c:	40012400 	.word	0x40012400
 80006a0:	48040000 	.word	0x48040000

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_I2C1_Init+0x74>)
 80006aa:	4a1c      	ldr	r2, [pc, #112]	; (800071c <MX_I2C1_Init+0x78>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_I2C1_Init+0x74>)
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <MX_I2C1_Init+0x7c>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_I2C1_Init+0x74>)
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x74>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f953 	bl	800198c <HAL_I2C_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ea:	f000 f8d5 	bl	8000898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x74>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 ffe0 	bl	80026b8 <HAL_I2CEx_ConfigAnalogFilter>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f8cc 	bl	8000898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <MX_I2C1_Init+0x74>)
 8000702:	2100      	movs	r1, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f002 f823 	bl	8002750 <HAL_I2CEx_ConfigDigitalFilter>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800070e:	f000 f8c3 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000cc 	.word	0x200000cc
 800071c:	40005400 	.word	0x40005400
 8000720:	00707cbb 	.word	0x00707cbb

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART1_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_USART1_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000730:	22e1      	movs	r2, #225	; 0xe1
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART1_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART1_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_USART1_UART_Init+0x58>)
 8000768:	0018      	movs	r0, r3
 800076a:	f002 ff89 	bl	8003680 <HAL_UART_Init>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f891 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000118 	.word	0x20000118
 8000780:	40013800 	.word	0x40013800

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_DMA_Init+0x38>)
 800078c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_DMA_Init+0x38>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_DMA_Init+0x38>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	2201      	movs	r2, #1
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fd4a 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007ac:	200a      	movs	r0, #10
 80007ae:	f000 fd5c 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	240c      	movs	r4, #12
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f004 fa33 	bl	8004c3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007dc:	2104      	movs	r1, #4
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	2204      	movs	r2, #4
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_GPIO_Init+0xd0>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_GPIO_Init+0xd0>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0xd0>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2200      	movs	r2, #0
 8000824:	2160      	movs	r1, #96	; 0x60
 8000826:	0018      	movs	r0, r3
 8000828:	f001 f86c 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0192      	lsls	r2, r2, #6
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2288      	movs	r2, #136	; 0x88
 8000838:	0352      	lsls	r2, r2, #13
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000842:	193b      	adds	r3, r7, r4
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_GPIO_Init+0xd4>)
 8000846:	0019      	movs	r1, r3
 8000848:	0010      	movs	r0, r2
 800084a:	f000 fee5 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800084e:	0021      	movs	r1, r4
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2260      	movs	r2, #96	; 0x60
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	187a      	adds	r2, r7, r1
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fed1 	bl	8001618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fce0 	bl	8001240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000880:	2007      	movs	r0, #7
 8000882:	f000 fcf2 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	; 0x24
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000
 8000894:	50000800 	.word	0x50000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_MspInit+0x24>)
 80008ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x24>)
 80008be:	2101      	movs	r1, #1
 80008c0:	430a      	orrs	r2, r1
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <HAL_MspInit+0x24>)
 80008c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_MspInit+0x24>)
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	0549      	lsls	r1, r1, #21
 80008ce:	430a      	orrs	r2, r1
 80008d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <HAL_ADC_MspInit+0x80>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d131      	bne.n	8000952 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_ADC_MspInit+0x84>)
 80008f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_ADC_MspInit+0x84>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	430a      	orrs	r2, r1
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel2;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_ADC_MspInit+0x88>)
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_ADC_MspInit+0x8c>)
 8000900:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	00d2      	lsls	r2, r2, #3
 8000928:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fcb3 	bl	80012a4 <HAL_DMA_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <HAL_ADC_MspInit+0x6a>
    {
      Error_Handler();
 8000942:	f7ff ffa9 	bl	8000898 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800094a:	64da      	str	r2, [r3, #76]	; 0x4c
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40012400 	.word	0x40012400
 8000960:	40021000 	.word	0x40021000
 8000964:	20000084 	.word	0x20000084
 8000968:	4002001c 	.word	0x4002001c

0800096c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	240c      	movs	r4, #12
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f004 f95c 	bl	8004c3c <memset>
  if(hi2c->Instance==I2C1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <HAL_I2C_MspInit+0x8c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d130      	bne.n	80009f0 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_I2C_MspInit+0x90>)
 8000990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_I2C_MspInit+0x90>)
 8000994:	2102      	movs	r1, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_I2C_MspInit+0x90>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a6:	0021      	movs	r1, r4
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	22c0      	movs	r2, #192	; 0xc0
 80009ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2212      	movs	r2, #18
 80009b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2203      	movs	r2, #3
 80009be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2201      	movs	r2, #1
 80009c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_I2C_MspInit+0x94>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f000 fe23 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_I2C_MspInit+0x90>)
 80009d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_I2C_MspInit+0x90>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0389      	lsls	r1, r1, #14
 80009dc:	430a      	orrs	r2, r1
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2017      	movs	r0, #23
 80009e6:	f000 fc2b 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80009ea:	2017      	movs	r0, #23
 80009ec:	f000 fc3d 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b009      	add	sp, #36	; 0x24
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40005400 	.word	0x40005400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	50000400 	.word	0x50000400

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	240c      	movs	r4, #12
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f004 f910 	bl	8004c3c <memset>
  if(huart->Instance==USART1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <HAL_UART_MspInit+0x90>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d132      	bne.n	8000a8c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	01c9      	lsls	r1, r1, #7
 8000a30:	430a      	orrs	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x94>)
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	2201      	movs	r2, #1
 8000a46:	4013      	ands	r3, r2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	0021      	movs	r1, r4
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2202      	movs	r2, #2
 8000a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2203      	movs	r2, #3
 8000a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	187a      	adds	r2, r7, r1
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fdce 	bl	8001618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	201b      	movs	r0, #27
 8000a82:	f000 fbdd 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a86:	201b      	movs	r0, #27
 8000a88:	f000 fbef 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b009      	add	sp, #36	; 0x24
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f8c2 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff34 	bl	8001940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fcdb 	bl	80014a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000084 	.word	0x20000084

08000af8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <I2C1_IRQHandler+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	23e0      	movs	r3, #224	; 0xe0
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4013      	ands	r3, r2
 8000b08:	d004      	beq.n	8000b14 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <I2C1_IRQHandler+0x2c>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 ffed 	bl	8001aec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000b12:	e003      	b.n	8000b1c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <I2C1_IRQHandler+0x2c>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 ffce 	bl	8001ab8 <HAL_I2C_EV_IRQHandler>
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200000cc 	.word	0x200000cc

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <USART1_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 fe62 	bl	80037f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000118 	.word	0x20000118

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490e      	ldr	r1, [pc, #56]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b76:	f7ff ffe3 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f004 f83b 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fc93 	bl	80004a8 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b90:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 8000b94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b98:	200001ac 	.word	0x200001ac

08000b9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_COMP_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_Init+0x3c>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_Init+0x3c>)
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f811 	bl	8000be0 <HAL_InitTick>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e001      	b.n	8000bce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bca:	f7ff fe73 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_InitTick+0x5c>)
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x60>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	23fa      	movs	r3, #250	; 0xfa
 8000bf4:	0098      	lsls	r0, r3, #2
 8000bf6:	f7ff fa87 	bl	8000108 <__udivsi3>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f7ff fa82 	bl	8000108 <__udivsi3>
 8000c04:	0003      	movs	r3, r0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fb3f 	bl	800128a <HAL_SYSTICK_Config>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e00f      	b.n	8000c34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d80b      	bhi.n	8000c32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
 8000c20:	2200      	movs	r2, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fb0c 	bl	8001240 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_InitTick+0x64>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	001a      	movs	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	18d2      	adds	r2, r2, r3
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200001a8 	.word	0x200001a8

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	200001a8 	.word	0x200001a8

08000c80 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e159      	b.n	8000f46 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10a      	bne.n	8000cb0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2250      	movs	r2, #80	; 0x50
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fe16 	bl	80008dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	d005      	beq.n	8000cc8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000cc6:	d00b      	beq.n	8000ce0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ccc:	2210      	movs	r2, #16
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2250      	movs	r2, #80	; 0x50
 8000cd8:	2100      	movs	r1, #0
 8000cda:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e132      	b.n	8000f46 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce4:	4a9a      	ldr	r2, [pc, #616]	; (8000f50 <HAL_ADC_Init+0x2d0>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	2202      	movs	r2, #2
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d108      	bne.n	8000d10 <HAL_ADC_Init+0x90>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2201      	movs	r2, #1
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_ADC_Init+0x90>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <HAL_ADC_Init+0x92>
 8000d10:	2300      	movs	r3, #0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d149      	bne.n	8000daa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	061b      	lsls	r3, r3, #24
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d00b      	beq.n	8000d3a <HAL_ADC_Init+0xba>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	05db      	lsls	r3, r3, #23
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d005      	beq.n	8000d3a <HAL_ADC_Init+0xba>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	061b      	lsls	r3, r3, #24
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d111      	bne.n	8000d5e <HAL_ADC_Init+0xde>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	0892      	lsrs	r2, r2, #2
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6919      	ldr	r1, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	e014      	b.n	8000d88 <HAL_ADC_Init+0x108>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	0892      	lsrs	r2, r2, #2
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	4b79      	ldr	r3, [pc, #484]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000d74:	4978      	ldr	r1, [pc, #480]	; (8000f58 <HAL_ADC_Init+0x2d8>)
 8000d76:	400a      	ands	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	4b76      	ldr	r3, [pc, #472]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4b74      	ldr	r3, [pc, #464]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2118      	movs	r1, #24
 8000d94:	438a      	bics	r2, r1
 8000d96:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68d9      	ldr	r1, [r3, #12]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000daa:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000db0:	496a      	ldr	r1, [pc, #424]	; (8000f5c <HAL_ADC_Init+0x2dc>)
 8000db2:	400a      	ands	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000db6:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	065a      	lsls	r2, r3, #25
 8000dc0:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <HAL_ADC_Init+0x2d4>)
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	055b      	lsls	r3, r3, #21
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d108      	bne.n	8000de6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	0549      	lsls	r1, r1, #21
 8000de2:	430a      	orrs	r2, r1
 8000de4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	495b      	ldr	r1, [pc, #364]	; (8000f60 <HAL_ADC_Init+0x2e0>)
 8000df2:	400a      	ands	r2, r1
 8000df4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68d9      	ldr	r1, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d101      	bne.n	8000e0c <HAL_ADC_Init+0x18c>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e000      	b.n	8000e0e <HAL_ADC_Init+0x18e>
 8000e0c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e0e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2020      	movs	r0, #32
 8000e14:	5c1b      	ldrb	r3, [r3, r0]
 8000e16:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e18:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	202c      	movs	r0, #44	; 0x2c
 8000e1e:	5c1b      	ldrb	r3, [r3, r0]
 8000e20:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e22:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000e30:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000e38:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e46:	23c2      	movs	r3, #194	; 0xc2
 8000e48:	33ff      	adds	r3, #255	; 0xff
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d00b      	beq.n	8000e66 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68d9      	ldr	r1, [r3, #12]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2221      	movs	r2, #33	; 0x21
 8000e6a:	5c9b      	ldrb	r3, [r3, r2]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d11a      	bne.n	8000ea6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d109      	bne.n	8000e8e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0249      	lsls	r1, r1, #9
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	e00b      	b.n	8000ea6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e92:	2220      	movs	r2, #32
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d11f      	bne.n	8000eee <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	492a      	ldr	r1, [pc, #168]	; (8000f64 <HAL_ADC_Init+0x2e4>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6919      	ldr	r1, [r3, #16]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ecc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000ed2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	e00e      	b.n	8000f0c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d107      	bne.n	8000f0c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2101      	movs	r1, #1
 8000f08:	438a      	bics	r2, r1
 8000f0a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2107      	movs	r1, #7
 8000f18:	438a      	bics	r2, r1
 8000f1a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6959      	ldr	r1, [r3, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4393      	bics	r3, r2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	fffffefd 	.word	0xfffffefd
 8000f54:	40012708 	.word	0x40012708
 8000f58:	ffc3ffff 	.word	0xffc3ffff
 8000f5c:	fdffffff 	.word	0xfdffffff
 8000f60:	fffe0219 	.word	0xfffe0219
 8000f64:	fffffc03 	.word	0xfffffc03

08000f68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2250      	movs	r2, #80	; 0x50
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x18>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e085      	b.n	800108c <HAL_ADC_ConfigChannel+0x124>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2250      	movs	r2, #80	; 0x50
 8000f84:	2101      	movs	r1, #1
 8000f86:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
 8000f92:	d00b      	beq.n	8000fac <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f98:	2220      	movs	r2, #32
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2250      	movs	r2, #80	; 0x50
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e06f      	b.n	800108c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_ADC_ConfigChannel+0x12c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d035      	beq.n	8001022 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	035b      	lsls	r3, r3, #13
 8000fc2:	0b5a      	lsrs	r2, r3, #13
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	02db      	lsls	r3, r3, #11
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d009      	beq.n	8000fec <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0409      	lsls	r1, r1, #16
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 f85e 	bl	80010a8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	029b      	lsls	r3, r3, #10
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d006      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	03c9      	lsls	r1, r1, #15
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	025b      	lsls	r3, r3, #9
 800100e:	4013      	ands	r3, r2
 8001010:	d037      	beq.n	8001082 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0449      	lsls	r1, r1, #17
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e02f      	b.n	8001082 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	035b      	lsls	r3, r3, #13
 800102e:	0b5b      	lsrs	r3, r3, #13
 8001030:	43d9      	mvns	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	400a      	ands	r2, r1
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	02db      	lsls	r3, r3, #11
 8001042:	4013      	ands	r3, r2
 8001044:	d005      	beq.n	8001052 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 800104c:	4913      	ldr	r1, [pc, #76]	; (800109c <HAL_ADC_ConfigChannel+0x134>)
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	4013      	ands	r3, r2
 800105c:	d005      	beq.n	800106a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8001064:	490e      	ldr	r1, [pc, #56]	; (80010a0 <HAL_ADC_ConfigChannel+0x138>)
 8001066:	400a      	ands	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	4013      	ands	r3, r2
 8001074:	d005      	beq.n	8001082 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_ADC_ConfigChannel+0x130>)
 800107c:	4909      	ldr	r1, [pc, #36]	; (80010a4 <HAL_ADC_ConfigChannel+0x13c>)
 800107e:	400a      	ands	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2250      	movs	r2, #80	; 0x50
 8001086:	2100      	movs	r1, #0
 8001088:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}
 8001094:	00001001 	.word	0x00001001
 8001098:	40012708 	.word	0x40012708
 800109c:	ff7fffff 	.word	0xff7fffff
 80010a0:	ffbfffff 	.word	0xffbfffff
 80010a4:	feffffff 	.word	0xfeffffff

080010a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <ADC_DelayMicroSecond+0x38>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	490b      	ldr	r1, [pc, #44]	; (80010e4 <ADC_DelayMicroSecond+0x3c>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff f826 	bl	8000108 <__udivsi3>
 80010bc:	0003      	movs	r3, r0
 80010be:	001a      	movs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4353      	muls	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80010c6:	e002      	b.n	80010ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f9      	bne.n	80010c8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b004      	add	sp, #16
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	20000000 	.word	0x20000000
 80010e4:	000f4240 	.word	0x000f4240

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d809      	bhi.n	8001110 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	001a      	movs	r2, r3
 8001102:	231f      	movs	r3, #31
 8001104:	401a      	ands	r2, r3
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_EnableIRQ+0x30>)
 8001108:	2101      	movs	r1, #1
 800110a:	4091      	lsls	r1, r2
 800110c:	000a      	movs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
  }
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b7f      	cmp	r3, #127	; 0x7f
 8001130:	d828      	bhi.n	8001184 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <__NVIC_SetPriority+0xd4>)
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	33c0      	adds	r3, #192	; 0xc0
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	589b      	ldr	r3, [r3, r2]
 8001142:	1dfa      	adds	r2, r7, #7
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	0011      	movs	r1, r2
 8001148:	2203      	movs	r2, #3
 800114a:	400a      	ands	r2, r1
 800114c:	00d2      	lsls	r2, r2, #3
 800114e:	21ff      	movs	r1, #255	; 0xff
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	43d2      	mvns	r2, r2
 8001156:	401a      	ands	r2, r3
 8001158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	019b      	lsls	r3, r3, #6
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	401a      	ands	r2, r3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	0018      	movs	r0, r3
 8001168:	2303      	movs	r3, #3
 800116a:	4003      	ands	r3, r0
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001170:	481f      	ldr	r0, [pc, #124]	; (80011f0 <__NVIC_SetPriority+0xd4>)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b25b      	sxtb	r3, r3
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	430a      	orrs	r2, r1
 800117c:	33c0      	adds	r3, #192	; 0xc0
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001182:	e031      	b.n	80011e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <__NVIC_SetPriority+0xd8>)
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	0019      	movs	r1, r3
 800118c:	230f      	movs	r3, #15
 800118e:	400b      	ands	r3, r1
 8001190:	3b08      	subs	r3, #8
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3306      	adds	r3, #6
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1dfa      	adds	r2, r7, #7
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	0011      	movs	r1, r2
 80011a4:	2203      	movs	r2, #3
 80011a6:	400a      	ands	r2, r1
 80011a8:	00d2      	lsls	r2, r2, #3
 80011aa:	21ff      	movs	r1, #255	; 0xff
 80011ac:	4091      	lsls	r1, r2
 80011ae:	000a      	movs	r2, r1
 80011b0:	43d2      	mvns	r2, r2
 80011b2:	401a      	ands	r2, r3
 80011b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	019b      	lsls	r3, r3, #6
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	401a      	ands	r2, r3
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	0018      	movs	r0, r3
 80011c4:	2303      	movs	r3, #3
 80011c6:	4003      	ands	r3, r0
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <__NVIC_SetPriority+0xd8>)
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	001c      	movs	r4, r3
 80011d4:	230f      	movs	r3, #15
 80011d6:	4023      	ands	r3, r4
 80011d8:	3b08      	subs	r3, #8
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	430a      	orrs	r2, r1
 80011de:	3306      	adds	r3, #6
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	18c3      	adds	r3, r0, r3
 80011e4:	3304      	adds	r3, #4
 80011e6:	601a      	str	r2, [r3, #0]
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b003      	add	sp, #12
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	045b      	lsls	r3, r3, #17
 8001208:	429a      	cmp	r2, r3
 800120a:	d301      	bcc.n	8001210 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120c:	2301      	movs	r3, #1
 800120e:	e010      	b.n	8001232 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <SysTick_Config+0x44>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	3a01      	subs	r2, #1
 8001216:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001218:	2301      	movs	r3, #1
 800121a:	425b      	negs	r3, r3
 800121c:	2103      	movs	r1, #3
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff ff7c 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Config+0x44>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Config+0x44>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	210f      	movs	r1, #15
 800124c:	187b      	adds	r3, r7, r1
 800124e:	1c02      	adds	r2, r0, #0
 8001250:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	187b      	adds	r3, r7, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	0011      	movs	r1, r2
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	0002      	movs	r2, r0
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff33 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff ffaf 	bl	80011f8 <SysTick_Config>
 800129a:	0003      	movs	r3, r0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e061      	b.n	800137a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_DMA_Init+0xe0>)
 80012bc:	4694      	mov	ip, r2
 80012be:	4463      	add	r3, ip
 80012c0:	2114      	movs	r1, #20
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7fe ff20 	bl	8000108 <__udivsi3>
 80012c8:	0003      	movs	r3, r0
 80012ca:	009a      	lsls	r2, r3, #2
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_DMA_Init+0xe4>)
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2225      	movs	r2, #37	; 0x25
 80012da:	2102      	movs	r1, #2
 80012dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4a28      	ldr	r2, [pc, #160]	; (800138c <HAL_DMA_Init+0xe8>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	01db      	lsls	r3, r3, #7
 800132c:	429a      	cmp	r2, r3
 800132e:	d018      	beq.n	8001362 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_DMA_Init+0xec>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	211c      	movs	r1, #28
 800133a:	400b      	ands	r3, r1
 800133c:	210f      	movs	r1, #15
 800133e:	4099      	lsls	r1, r3
 8001340:	000b      	movs	r3, r1
 8001342:	43d9      	mvns	r1, r3
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_DMA_Init+0xec>)
 8001346:	400a      	ands	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_DMA_Init+0xec>)
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	201c      	movs	r0, #28
 8001358:	4003      	ands	r3, r0
 800135a:	409a      	lsls	r2, r3
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_DMA_Init+0xec>)
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2225      	movs	r2, #37	; 0x25
 800136c:	2101      	movs	r1, #1
 800136e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	bffdfff8 	.word	0xbffdfff8
 8001388:	40020000 	.word	0x40020000
 800138c:	ffff800f 	.word	0xffff800f
 8001390:	400200a8 	.word	0x400200a8

08001394 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2225      	movs	r2, #37	; 0x25
 80013a8:	5c9b      	ldrb	r3, [r3, r2]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2224      	movs	r2, #36	; 0x24
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e024      	b.n	800140c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	210e      	movs	r1, #14
 80013ce:	438a      	bics	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	438a      	bics	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	221c      	movs	r2, #28
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2101      	movs	r1, #1
 80013f0:	4091      	lsls	r1, r2
 80013f2:	000a      	movs	r2, r1
 80013f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2225      	movs	r2, #37	; 0x25
 80013fa:	2101      	movs	r1, #1
 80013fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2224      	movs	r2, #36	; 0x24
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]

    return status;
 8001406:	230f      	movs	r3, #15
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141c:	210f      	movs	r1, #15
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2225      	movs	r2, #37	; 0x25
 8001428:	5c9b      	ldrb	r3, [r3, r2]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d006      	beq.n	800143e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2204      	movs	r2, #4
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	e02a      	b.n	8001494 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	210e      	movs	r1, #14
 800144a:	438a      	bics	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	438a      	bics	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	221c      	movs	r2, #28
 8001464:	401a      	ands	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	2101      	movs	r1, #1
 800146c:	4091      	lsls	r1, r2
 800146e:	000a      	movs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2225      	movs	r2, #37	; 0x25
 8001476:	2101      	movs	r1, #1
 8001478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2224      	movs	r2, #36	; 0x24
 800147e:	2100      	movs	r1, #0
 8001480:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	0010      	movs	r0, r2
 8001492:	4798      	blx	r3
    }
  }
  return status;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	781b      	ldrb	r3, [r3, #0]
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	221c      	movs	r2, #28
 80014c0:	4013      	ands	r3, r2
 80014c2:	2204      	movs	r2, #4
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	d026      	beq.n	800151c <HAL_DMA_IRQHandler+0x7a>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	d022      	beq.n	800151c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2220      	movs	r2, #32
 80014de:	4013      	ands	r3, r2
 80014e0:	d107      	bne.n	80014f2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2104      	movs	r1, #4
 80014ee:	438a      	bics	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	221c      	movs	r2, #28
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2104      	movs	r1, #4
 8001500:	4091      	lsls	r1, r2
 8001502:	000a      	movs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	2b00      	cmp	r3, #0
 800150c:	d100      	bne.n	8001510 <HAL_DMA_IRQHandler+0x6e>
 800150e:	e071      	b.n	80015f4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	0010      	movs	r0, r2
 8001518:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800151a:	e06b      	b.n	80015f4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	221c      	movs	r2, #28
 8001522:	4013      	ands	r3, r2
 8001524:	2202      	movs	r2, #2
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	d02d      	beq.n	800158c <HAL_DMA_IRQHandler+0xea>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d029      	beq.n	800158c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2220      	movs	r2, #32
 8001540:	4013      	ands	r3, r2
 8001542:	d10b      	bne.n	800155c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	210a      	movs	r1, #10
 8001550:	438a      	bics	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2225      	movs	r2, #37	; 0x25
 8001558:	2101      	movs	r1, #1
 800155a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	221c      	movs	r2, #28
 8001562:	401a      	ands	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2102      	movs	r1, #2
 800156a:	4091      	lsls	r1, r2
 800156c:	000a      	movs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d039      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	0010      	movs	r0, r2
 8001588:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800158a:	e033      	b.n	80015f4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	221c      	movs	r2, #28
 8001592:	4013      	ands	r3, r2
 8001594:	2208      	movs	r2, #8
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	d02a      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x154>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2208      	movs	r2, #8
 80015a4:	4013      	ands	r3, r2
 80015a6:	d026      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	210e      	movs	r1, #14
 80015b4:	438a      	bics	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	221c      	movs	r2, #28
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2101      	movs	r1, #1
 80015c6:	4091      	lsls	r1, r2
 80015c8:	000a      	movs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2225      	movs	r2, #37	; 0x25
 80015d6:	2101      	movs	r1, #1
 80015d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2224      	movs	r2, #36	; 0x24
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	0010      	movs	r0, r2
 80015f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46c0      	nop			; (mov r8, r8)
}
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2225      	movs	r2, #37	; 0x25
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	b2db      	uxtb	r3, r3
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800162e:	e14f      	b.n	80018d0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <HAL_GPIO_Init+0x30>
 8001646:	e140      	b.n	80018ca <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	4013      	ands	r3, r2
 8001650:	2b01      	cmp	r3, #1
 8001652:	d005      	beq.n	8001660 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800165c:	2b02      	cmp	r3, #2
 800165e:	d130      	bne.n	80016c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001696:	2201      	movs	r2, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	2201      	movs	r2, #1
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2203      	movs	r2, #3
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d017      	beq.n	80016fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	4013      	ands	r3, r2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d123      	bne.n	8001752 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	58d3      	ldr	r3, [r2, r3]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2207      	movs	r2, #7
 800171c:	4013      	ands	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2107      	movs	r1, #7
 8001736:	400b      	ands	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	6939      	ldr	r1, [r7, #16]
 8001750:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	409a      	lsls	r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	401a      	ands	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_GPIO_Init+0x17c>
 8001792:	e09a      	b.n	80018ca <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <HAL_GPIO_Init+0x2d0>)
 8001796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_GPIO_Init+0x2d0>)
 800179a:	2101      	movs	r1, #1
 800179c:	430a      	orrs	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x2d4>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	589b      	ldr	r3, [r3, r2]
 80017ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	23a0      	movs	r3, #160	; 0xa0
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x1ea>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_GPIO_Init+0x2d8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x1e6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <HAL_GPIO_Init+0x2dc>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x1de>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_GPIO_Init+0x2e4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x1da>
 80017ee:	2305      	movs	r3, #5
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x1ec>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x1ec>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x1ec>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x1ec>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x1ec>
 8001802:	2300      	movs	r3, #0
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	2103      	movs	r1, #3
 8001808:	400a      	ands	r2, r1
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_GPIO_Init+0x2d4>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	4013      	ands	r3, r2
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43da      	mvns	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	029b      	lsls	r3, r3, #10
 8001864:	4013      	ands	r3, r2
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	4013      	ands	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	039b      	lsls	r3, r3, #14
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	1e13      	subs	r3, r2, #0
 80018da:	d000      	beq.n	80018de <HAL_GPIO_Init+0x2c6>
 80018dc:	e6a8      	b.n	8001630 <HAL_GPIO_Init+0x18>
  }
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b006      	add	sp, #24
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	50000400 	.word	0x50000400
 80018f4:	50000800 	.word	0x50000800
 80018f8:	50000c00 	.word	0x50000c00
 80018fc:	50001c00 	.word	0x50001c00
 8001900:	40010400 	.word	0x40010400

08001904 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	0008      	movs	r0, r1
 800190e:	0011      	movs	r1, r2
 8001910:	1cbb      	adds	r3, r7, #2
 8001912:	1c02      	adds	r2, r0, #0
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	1c7b      	adds	r3, r7, #1
 8001918:	1c0a      	adds	r2, r1, #0
 800191a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191c:	1c7b      	adds	r3, r7, #1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001924:	1cbb      	adds	r3, r7, #2
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800192e:	1cbb      	adds	r3, r7, #2
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	0002      	movs	r2, r0
 8001948:	1dbb      	adds	r3, r7, #6
 800194a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	1dba      	adds	r2, r7, #6
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	4013      	ands	r3, r2
 8001956:	d008      	beq.n	800196a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800195a:	1dba      	adds	r2, r7, #6
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	1dbb      	adds	r3, r7, #6
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f000 f807 	bl	8001978 <HAL_GPIO_EXTI_Callback>
  }
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	0002      	movs	r2, r0
 8001980:	1dbb      	adds	r3, r7, #6
 8001982:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e082      	b.n	8001aa4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2241      	movs	r2, #65	; 0x41
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7fe ffd9 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	2124      	movs	r1, #36	; 0x24
 80019c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	438a      	bics	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4934      	ldr	r1, [pc, #208]	; (8001aac <HAL_I2C_Init+0x120>)
 80019dc:	400a      	ands	r2, r1
 80019de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4931      	ldr	r1, [pc, #196]	; (8001ab0 <HAL_I2C_Init+0x124>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0209      	lsls	r1, r1, #8
 8001a04:	430a      	orrs	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	e007      	b.n	8001a1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2184      	movs	r1, #132	; 0x84
 8001a14:	0209      	lsls	r1, r1, #8
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d104      	bne.n	8001a2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	491f      	ldr	r1, [pc, #124]	; (8001ab4 <HAL_I2C_Init+0x128>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	491a      	ldr	r1, [pc, #104]	; (8001ab0 <HAL_I2C_Init+0x124>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69d9      	ldr	r1, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2241      	movs	r2, #65	; 0x41
 8001a90:	2120      	movs	r1, #32
 8001a92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2242      	movs	r2, #66	; 0x42
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	f0ffffff 	.word	0xf0ffffff
 8001ab0:	ffff7fff 	.word	0xffff7fff
 8001ab4:	02008000 	.word	0x02008000

08001ab8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
  }
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b004      	add	sp, #16
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d010      	beq.n	8001b32 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	09db      	lsrs	r3, r3, #7
 8001b14:	001a      	movs	r2, r3
 8001b16:	2301      	movs	r3, #1
 8001b18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b1a:	d00a      	beq.n	8001b32 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	2201      	movs	r2, #1
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0052      	lsls	r2, r2, #1
 8001b30:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	0a9b      	lsrs	r3, r3, #10
 8001b36:	001a      	movs	r2, r3
 8001b38:	2301      	movs	r3, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d010      	beq.n	8001b60 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	09db      	lsrs	r3, r3, #7
 8001b42:	001a      	movs	r2, r3
 8001b44:	2301      	movs	r3, #1
 8001b46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b48:	d00a      	beq.n	8001b60 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	2208      	movs	r2, #8
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	00d2      	lsls	r2, r2, #3
 8001b5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	001a      	movs	r2, r3
 8001b66:	2301      	movs	r3, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d010      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	09db      	lsrs	r3, r3, #7
 8001b70:	001a      	movs	r2, r3
 8001b72:	2301      	movs	r3, #1
 8001b74:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b76:	d00a      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	220b      	movs	r2, #11
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d005      	beq.n	8001ba8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 fbd8 	bl	8002358 <I2C_ITError>
  }
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b006      	add	sp, #24
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	0008      	movs	r0, r1
 8001bda:	0011      	movs	r1, r2
 8001bdc:	1cfb      	adds	r3, r7, #3
 8001bde:	1c02      	adds	r2, r0, #0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	003b      	movs	r3, r7
 8001be4:	1c0a      	adds	r2, r1, #0
 8001be6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	5c9b      	ldrb	r3, [r3, r2]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <I2C_Slave_ISR_IT+0x24>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0fa      	b.n	8001e3a <I2C_Slave_ISR_IT+0x21a>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	2101      	movs	r1, #1
 8001c4a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	001a      	movs	r2, r3
 8001c52:	2301      	movs	r3, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	d00b      	beq.n	8001c70 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c62:	d005      	beq.n	8001c70 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0011      	movs	r1, r2
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 f9f6 	bl	800205c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	001a      	movs	r2, r3
 8001c76:	2301      	movs	r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d054      	beq.n	8001d26 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	001a      	movs	r2, r3
 8001c82:	2301      	movs	r3, #1
 8001c84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c86:	d04e      	beq.n	8001d26 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12d      	bne.n	8001cee <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2241      	movs	r2, #65	; 0x41
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b28      	cmp	r3, #40	; 0x28
 8001c9c:	d10b      	bne.n	8001cb6 <I2C_Slave_ISR_IT+0x96>
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	049b      	lsls	r3, r3, #18
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 faf8 	bl	80022a4 <I2C_ITListenCplt>
 8001cb4:	e036      	b.n	8001d24 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2241      	movs	r2, #65	; 0x41
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b29      	cmp	r3, #41	; 0x29
 8001cc0:	d110      	bne.n	8001ce4 <I2C_Slave_ISR_IT+0xc4>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4a5f      	ldr	r2, [pc, #380]	; (8001e44 <I2C_Slave_ISR_IT+0x224>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00c      	beq.n	8001ce4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2210      	movs	r2, #16
 8001cd0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fc4a 	bl	800256e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 f957 	bl	8001f90 <I2C_ITSlaveSeqCplt>
 8001ce2:	e01f      	b.n	8001d24 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001cec:	e09d      	b.n	8001e2a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <I2C_Slave_ISR_IT+0xf4>
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	045b      	lsls	r3, r3, #17
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d000      	beq.n	8001d14 <I2C_Slave_ISR_IT+0xf4>
 8001d12:	e08a      	b.n	8001e2a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 fb1b 	bl	8002358 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d22:	e082      	b.n	8001e2a <I2C_Slave_ISR_IT+0x20a>
 8001d24:	e081      	b.n	8001e2a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d031      	beq.n	8001d96 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	001a      	movs	r2, r3
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d3c:	d02b      	beq.n	8001d96 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d018      	beq.n	8001d7a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d154      	bne.n	8001e2e <I2C_Slave_ISR_IT+0x20e>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <I2C_Slave_ISR_IT+0x224>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d050      	beq.n	8001e2e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f8fe 	bl	8001f90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001d94:	e04b      	b.n	8001e2e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d00c      	beq.n	8001dbc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	001a      	movs	r2, r3
 8001da8:	2301      	movs	r3, #1
 8001daa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001dac:	d006      	beq.n	8001dbc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	0011      	movs	r1, r2
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 f847 	bl	8001e48 <I2C_ITAddrCplt>
 8001dba:	e039      	b.n	8001e30 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d033      	beq.n	8001e30 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	001a      	movs	r2, r3
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001dd2:	d02d      	beq.n	8001e30 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d018      	beq.n	8001e10 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e0e:	e00f      	b.n	8001e30 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	045b      	lsls	r3, r3, #17
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d002      	beq.n	8001e20 <I2C_Slave_ISR_IT+0x200>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f8b4 	bl	8001f90 <I2C_ITSlaveSeqCplt>
 8001e28:	e002      	b.n	8001e30 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	e000      	b.n	8001e30 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001e2e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2240      	movs	r2, #64	; 0x40
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b006      	add	sp, #24
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	ffff0000 	.word	0xffff0000

08001e48 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2241      	movs	r2, #65	; 0x41
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	2328      	movs	r3, #40	; 0x28
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b28      	cmp	r3, #40	; 0x28
 8001e62:	d000      	beq.n	8001e66 <I2C_ITAddrCplt+0x1e>
 8001e64:	e088      	b.n	8001f78 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	250f      	movs	r5, #15
 8001e72:	197b      	adds	r3, r7, r5
 8001e74:	2101      	movs	r1, #1
 8001e76:	400a      	ands	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	200c      	movs	r0, #12
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	21fe      	movs	r1, #254	; 0xfe
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	240a      	movs	r4, #10
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	0592      	lsls	r2, r2, #22
 8001e9c:	0d92      	lsrs	r2, r2, #22
 8001e9e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	21fe      	movs	r1, #254	; 0xfe
 8001eae:	400a      	ands	r2, r1
 8001eb0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d148      	bne.n	8001f4c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001eba:	0021      	movs	r1, r4
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	09db      	lsrs	r3, r3, #7
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	183b      	adds	r3, r7, r0
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	4053      	eors	r3, r2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	001a      	movs	r2, r3
 8001ece:	2306      	movs	r3, #6
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d120      	bne.n	8001f16 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	187a      	adds	r2, r7, r1
 8001ed8:	8812      	ldrh	r2, [r2, #0]
 8001eda:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d14c      	bne.n	8001f88 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	197b      	adds	r3, r7, r5
 8001f0a:	7819      	ldrb	r1, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff fe5e 	bl	8001bd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001f14:	e038      	b.n	8001f88 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001f16:	240c      	movs	r4, #12
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	18ba      	adds	r2, r7, r2
 8001f1e:	8812      	ldrh	r2, [r2, #0]
 8001f20:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fb60 	bl	80025f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	2100      	movs	r1, #0
 8001f36:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	7819      	ldrb	r1, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff fe43 	bl	8001bd0 <HAL_I2C_AddrCallback>
}
 8001f4a:	e01d      	b.n	8001f88 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	021a      	lsls	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 fb4b 	bl	80025f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2240      	movs	r2, #64	; 0x40
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f62:	230c      	movs	r3, #12
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	230f      	movs	r3, #15
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	7819      	ldrb	r1, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fe2d 	bl	8001bd0 <HAL_I2C_AddrCallback>
}
 8001f76:	e007      	b.n	8001f88 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bdb0      	pop	{r4, r5, r7, pc}

08001f90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2242      	movs	r2, #66	; 0x42
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	0b9b      	lsrs	r3, r3, #14
 8001fac:	001a      	movs	r2, r3
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d008      	beq.n	8001fc6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4925      	ldr	r1, [pc, #148]	; (8002054 <I2C_ITSlaveSeqCplt+0xc4>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e00d      	b.n	8001fe2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0bdb      	lsrs	r3, r3, #15
 8001fca:	001a      	movs	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	491e      	ldr	r1, [pc, #120]	; (8002058 <I2C_ITSlaveSeqCplt+0xc8>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2241      	movs	r2, #65	; 0x41
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b29      	cmp	r3, #41	; 0x29
 8001fec:	d114      	bne.n	8002018 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2241      	movs	r2, #65	; 0x41
 8001ff2:	2128      	movs	r1, #40	; 0x28
 8001ff4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2101      	movs	r1, #1
 8002000:	0018      	movs	r0, r3
 8002002:	f000 faf5 	bl	80025f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff fdcd 	bl	8001bb0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002016:	e019      	b.n	800204c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2241      	movs	r2, #65	; 0x41
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b2a      	cmp	r3, #42	; 0x2a
 8002022:	d113      	bne.n	800204c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2241      	movs	r2, #65	; 0x41
 8002028:	2128      	movs	r1, #40	; 0x28
 800202a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2222      	movs	r2, #34	; 0x22
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2102      	movs	r1, #2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fada 	bl	80025f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff fdba 	bl	8001bc0 <HAL_I2C_SlaveRxCpltCallback>
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	ffffbfff 	.word	0xffffbfff
 8002058:	ffff7fff 	.word	0xffff7fff

0800205c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002072:	200f      	movs	r0, #15
 8002074:	183b      	adds	r3, r7, r0
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	2141      	movs	r1, #65	; 0x41
 800207a:	5c52      	ldrb	r2, [r2, r1]
 800207c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2220      	movs	r2, #32
 8002084:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002086:	183b      	adds	r3, r7, r0
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b21      	cmp	r3, #33	; 0x21
 800208c:	d003      	beq.n	8002096 <I2C_ITSlaveCplt+0x3a>
 800208e:	183b      	adds	r3, r7, r0
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b29      	cmp	r3, #41	; 0x29
 8002094:	d109      	bne.n	80020aa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002096:	4a7d      	ldr	r2, [pc, #500]	; (800228c <I2C_ITSlaveCplt+0x230>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f000 faa7 	bl	80025f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2221      	movs	r2, #33	; 0x21
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
 80020a8:	e011      	b.n	80020ce <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020aa:	220f      	movs	r2, #15
 80020ac:	18bb      	adds	r3, r7, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b22      	cmp	r3, #34	; 0x22
 80020b2:	d003      	beq.n	80020bc <I2C_ITSlaveCplt+0x60>
 80020b4:	18bb      	adds	r3, r7, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b2a      	cmp	r3, #42	; 0x2a
 80020ba:	d108      	bne.n	80020ce <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80020bc:	4a74      	ldr	r2, [pc, #464]	; (8002290 <I2C_ITSlaveCplt+0x234>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0011      	movs	r1, r2
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fa94 	bl	80025f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2222      	movs	r2, #34	; 0x22
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0209      	lsls	r1, r1, #8
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	496a      	ldr	r1, [pc, #424]	; (8002294 <I2C_ITSlaveCplt+0x238>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fa3b 	bl	800256e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	0b9b      	lsrs	r3, r3, #14
 80020fc:	001a      	movs	r2, r3
 80020fe:	2301      	movs	r3, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d013      	beq.n	800212c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4962      	ldr	r1, [pc, #392]	; (8002298 <I2C_ITSlaveCplt+0x23c>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800212a:	e018      	b.n	800215e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	0bdb      	lsrs	r3, r3, #15
 8002130:	001a      	movs	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	4013      	ands	r3, r2
 8002136:	d012      	beq.n	800215e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4956      	ldr	r1, [pc, #344]	; (800229c <I2C_ITSlaveCplt+0x240>)
 8002144:	400a      	ands	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	001a      	movs	r2, r3
 8002164:	2301      	movs	r3, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d020      	beq.n	80021ac <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2204      	movs	r2, #4
 800216e:	4393      	bics	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	2204      	movs	r2, #4
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2242      	movs	r2, #66	; 0x42
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f8b9 	bl	8002358 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2241      	movs	r2, #65	; 0x41
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b28      	cmp	r3, #40	; 0x28
 80021f0:	d147      	bne.n	8002282 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0011      	movs	r1, r2
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f853 	bl	80022a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021fe:	e040      	b.n	8002282 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <I2C_ITSlaveCplt+0x244>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d016      	beq.n	8002238 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff febf 	bl	8001f90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <I2C_ITSlaveCplt+0x244>)
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2120      	movs	r1, #32
 800221e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff fcdd 	bl	8001bf0 <HAL_I2C_ListenCpltCallback>
}
 8002236:	e024      	b.n	8002282 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2241      	movs	r2, #65	; 0x41
 800223c:	5c9b      	ldrb	r3, [r3, r2]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b22      	cmp	r3, #34	; 0x22
 8002242:	d10f      	bne.n	8002264 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2241      	movs	r2, #65	; 0x41
 8002248:	2120      	movs	r1, #32
 800224a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff fcaf 	bl	8001bc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002262:	e00e      	b.n	8002282 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	2120      	movs	r1, #32
 800226a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff fc97 	bl	8001bb0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b006      	add	sp, #24
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	00008001 	.word	0x00008001
 8002290:	00008002 	.word	0x00008002
 8002294:	fe00e800 	.word	0xfe00e800
 8002298:	ffffbfff 	.word	0xffffbfff
 800229c:	ffff7fff 	.word	0xffff7fff
 80022a0:	ffff0000 	.word	0xffff0000

080022a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a27      	ldr	r2, [pc, #156]	; (8002350 <I2C_ITListenCplt+0xac>)
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2241      	movs	r2, #65	; 0x41
 80022be:	2120      	movs	r1, #32
 80022c0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2242      	movs	r2, #66	; 0x42
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	001a      	movs	r2, r3
 80022d6:	2301      	movs	r3, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	d022      	beq.n	8002322 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	2204      	movs	r2, #4
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <I2C_ITListenCplt+0xb0>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0011      	movs	r1, r2
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f961 	bl	80025f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	2100      	movs	r1, #0
 800233c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff fc55 	bl	8001bf0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	b002      	add	sp, #8
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	00008003 	.word	0x00008003

08002358 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002362:	200f      	movs	r0, #15
 8002364:	183b      	adds	r3, r7, r0
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	2141      	movs	r1, #65	; 0x41
 800236a:	5c52      	ldrb	r2, [r2, r1]
 800236c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2242      	movs	r2, #66	; 0x42
 8002372:	2100      	movs	r1, #0
 8002374:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a62      	ldr	r2, [pc, #392]	; (8002504 <I2C_ITError+0x1ac>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800238e:	183b      	adds	r3, r7, r0
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b28      	cmp	r3, #40	; 0x28
 8002394:	d007      	beq.n	80023a6 <I2C_ITError+0x4e>
 8002396:	183b      	adds	r3, r7, r0
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b29      	cmp	r3, #41	; 0x29
 800239c:	d003      	beq.n	80023a6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b2a      	cmp	r3, #42	; 0x2a
 80023a4:	d10c      	bne.n	80023c0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2103      	movs	r1, #3
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 f920 	bl	80025f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2241      	movs	r2, #65	; 0x41
 80023b4:	2128      	movs	r1, #40	; 0x28
 80023b6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a53      	ldr	r2, [pc, #332]	; (8002508 <I2C_ITError+0x1b0>)
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34
 80023be:	e012      	b.n	80023e6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <I2C_ITError+0x1b4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0011      	movs	r1, r2
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 f912 	bl	80025f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2241      	movs	r2, #65	; 0x41
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b60      	cmp	r3, #96	; 0x60
 80023d6:	d003      	beq.n	80023e0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2241      	movs	r2, #65	; 0x41
 80023dc:	2120      	movs	r1, #32
 80023de:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03b      	beq.n	800246c <I2C_ITError+0x114>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b11      	cmp	r3, #17
 80023f8:	d002      	beq.n	8002400 <I2C_ITError+0xa8>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b21      	cmp	r3, #33	; 0x21
 80023fe:	d135      	bne.n	800246c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	01db      	lsls	r3, r3, #7
 800240a:	401a      	ands	r2, r3
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	493c      	ldr	r1, [pc, #240]	; (8002510 <I2C_ITError+0x1b8>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff f8e8 	bl	80015fe <HAL_DMA_GetState>
 800242e:	0003      	movs	r3, r0
 8002430:	2b01      	cmp	r3, #1
 8002432:	d016      	beq.n	8002462 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	4a36      	ldr	r2, [pc, #216]	; (8002514 <I2C_ITError+0x1bc>)
 800243a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	0018      	movs	r0, r3
 800244a:	f7fe ffe3 	bl	8001414 <HAL_DMA_Abort_IT>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d051      	beq.n	80024f6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	0018      	movs	r0, r3
 800245e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002460:	e049      	b.n	80024f6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f859 	bl	800251c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800246a:	e044      	b.n	80024f6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03b      	beq.n	80024ec <I2C_ITError+0x194>
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b12      	cmp	r3, #18
 8002478:	d002      	beq.n	8002480 <I2C_ITError+0x128>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b22      	cmp	r3, #34	; 0x22
 800247e:	d135      	bne.n	80024ec <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	401a      	ands	r2, r3
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	491e      	ldr	r1, [pc, #120]	; (8002518 <I2C_ITError+0x1c0>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff f8a8 	bl	80015fe <HAL_DMA_GetState>
 80024ae:	0003      	movs	r3, r0
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d016      	beq.n	80024e2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	4a16      	ldr	r2, [pc, #88]	; (8002514 <I2C_ITError+0x1bc>)
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe ffa3 	bl	8001414 <HAL_DMA_Abort_IT>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d013      	beq.n	80024fa <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	0018      	movs	r0, r3
 80024de:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024e0:	e00b      	b.n	80024fa <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f819 	bl	800251c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024ea:	e006      	b.n	80024fa <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f814 	bl	800251c <I2C_TreatErrorCallback>
  }
}
 80024f4:	e002      	b.n	80024fc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	e000      	b.n	80024fc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024fa:	46c0      	nop			; (mov r8, r8)
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	ffff0000 	.word	0xffff0000
 8002508:	08001c21 	.word	0x08001c21
 800250c:	00008003 	.word	0x00008003
 8002510:	ffffbfff 	.word	0xffffbfff
 8002514:	080025b3 	.word	0x080025b3
 8002518:	ffff7fff 	.word	0xffff7fff

0800251c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2241      	movs	r2, #65	; 0x41
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b60      	cmp	r3, #96	; 0x60
 800252e:	d10f      	bne.n	8002550 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2241      	movs	r2, #65	; 0x41
 8002534:	2120      	movs	r1, #32
 8002536:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff fb61 	bl	8001c10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800254e:	e00a      	b.n	8002566 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff fb4d 	bl	8001c00 <HAL_I2C_ErrorCallback>
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2202      	movs	r2, #2
 800257e:	4013      	ands	r3, r2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d103      	bne.n	800258c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	2b01      	cmp	r3, #1
 8002598:	d007      	beq.n	80025aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	430a      	orrs	r2, r1
 80025a8:	619a      	str	r2, [r3, #24]
  }
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025cc:	2200      	movs	r2, #0
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ff9a 	bl	800251c <I2C_TreatErrorCallback>
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	000a      	movs	r2, r1
 80025fa:	1cbb      	adds	r3, r7, #2
 80025fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002602:	1cbb      	adds	r3, r7, #2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d010      	beq.n	800262e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2242      	movs	r2, #66	; 0x42
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2241      	movs	r2, #65	; 0x41
 8002618:	5c9b      	ldrb	r3, [r3, r2]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	001a      	movs	r2, r3
 800261e:	2328      	movs	r3, #40	; 0x28
 8002620:	4013      	ands	r3, r2
 8002622:	2b28      	cmp	r3, #40	; 0x28
 8002624:	d003      	beq.n	800262e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22b0      	movs	r2, #176	; 0xb0
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800262e:	1cbb      	adds	r3, r7, #2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	d010      	beq.n	800265a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2244      	movs	r2, #68	; 0x44
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2241      	movs	r2, #65	; 0x41
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	001a      	movs	r2, r3
 800264a:	2328      	movs	r3, #40	; 0x28
 800264c:	4013      	ands	r3, r2
 800264e:	2b28      	cmp	r3, #40	; 0x28
 8002650:	d003      	beq.n	800265a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22b0      	movs	r2, #176	; 0xb0
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800265a:	1cbb      	adds	r3, r7, #2
 800265c:	2200      	movs	r2, #0
 800265e:	5e9b      	ldrsh	r3, [r3, r2]
 8002660:	2b00      	cmp	r3, #0
 8002662:	da03      	bge.n	800266c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	22b8      	movs	r2, #184	; 0xb8
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800266c:	1cbb      	adds	r3, r7, #2
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d103      	bne.n	800267c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2290      	movs	r2, #144	; 0x90
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800267c:	1cbb      	adds	r3, r7, #2
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b20      	cmp	r3, #32
 8002682:	d103      	bne.n	800268c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800268c:	1cbb      	adds	r3, r7, #2
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d103      	bne.n	800269c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43d9      	mvns	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b004      	add	sp, #16
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2241      	movs	r2, #65	; 0x41
 80026c6:	5c9b      	ldrb	r3, [r3, r2]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d138      	bne.n	8002740 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2240      	movs	r2, #64	; 0x40
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026d8:	2302      	movs	r3, #2
 80026da:	e032      	b.n	8002742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2241      	movs	r2, #65	; 0x41
 80026e8:	2124      	movs	r1, #36	; 0x24
 80026ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2101      	movs	r1, #1
 80026f8:	438a      	bics	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4911      	ldr	r1, [pc, #68]	; (800274c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002708:	400a      	ands	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	2120      	movs	r1, #32
 8002732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	ffffefff 	.word	0xffffefff

08002750 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2241      	movs	r2, #65	; 0x41
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d139      	bne.n	80027da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002770:	2302      	movs	r3, #2
 8002772:	e033      	b.n	80027dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	2101      	movs	r1, #1
 800277a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2241      	movs	r2, #65	; 0x41
 8002780:	2124      	movs	r1, #36	; 0x24
 8002782:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2101      	movs	r1, #1
 8002790:	438a      	bics	r2, r1
 8002792:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2241      	movs	r2, #65	; 0x41
 80027ca:	2120      	movs	r1, #32
 80027cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
  }
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	fffff0ff 	.word	0xfffff0ff

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f000 fbaf 	bl	8002f5a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fc:	4bcf      	ldr	r3, [pc, #828]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	220c      	movs	r2, #12
 8002802:	4013      	ands	r3, r2
 8002804:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002806:	4bcd      	ldr	r3, [pc, #820]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	025b      	lsls	r3, r3, #9
 800280e:	4013      	ands	r3, r2
 8002810:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d100      	bne.n	800281e <HAL_RCC_OscConfig+0x36>
 800281c:	e07e      	b.n	800291c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d007      	beq.n	8002834 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x68>
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	025b      	lsls	r3, r3, #9
 8002830:	429a      	cmp	r2, r3
 8002832:	d10d      	bne.n	8002850 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4bc1      	ldr	r3, [pc, #772]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	029b      	lsls	r3, r3, #10
 800283c:	4013      	ands	r3, r2
 800283e:	d100      	bne.n	8002842 <HAL_RCC_OscConfig+0x5a>
 8002840:	e06b      	b.n	800291a <HAL_RCC_OscConfig+0x132>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d167      	bne.n	800291a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f000 fb85 	bl	8002f5a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	025b      	lsls	r3, r3, #9
 8002858:	429a      	cmp	r2, r3
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x84>
 800285c:	4bb7      	ldr	r3, [pc, #732]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4bb6      	ldr	r3, [pc, #728]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0249      	lsls	r1, r1, #9
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e027      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	23a0      	movs	r3, #160	; 0xa0
 8002872:	02db      	lsls	r3, r3, #11
 8002874:	429a      	cmp	r2, r3
 8002876:	d10e      	bne.n	8002896 <HAL_RCC_OscConfig+0xae>
 8002878:	4bb0      	ldr	r3, [pc, #704]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4baf      	ldr	r3, [pc, #700]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	02c9      	lsls	r1, r1, #11
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4bad      	ldr	r3, [pc, #692]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4bac      	ldr	r3, [pc, #688]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0249      	lsls	r1, r1, #9
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e012      	b.n	80028bc <HAL_RCC_OscConfig+0xd4>
 8002896:	4ba9      	ldr	r3, [pc, #676]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4ba8      	ldr	r3, [pc, #672]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800289c:	49a8      	ldr	r1, [pc, #672]	; (8002b40 <HAL_RCC_OscConfig+0x358>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	4ba6      	ldr	r3, [pc, #664]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4ba2      	ldr	r3, [pc, #648]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4ba1      	ldr	r3, [pc, #644]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80028b6:	49a3      	ldr	r1, [pc, #652]	; (8002b44 <HAL_RCC_OscConfig+0x35c>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe f9d2 	bl	8000c6c <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ce:	f7fe f9cd 	bl	8000c6c <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	; 0x64
 80028da:	d902      	bls.n	80028e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	f000 fb3c 	bl	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e2:	4b96      	ldr	r3, [pc, #600]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	4013      	ands	r3, r2
 80028ec:	d0ef      	beq.n	80028ce <HAL_RCC_OscConfig+0xe6>
 80028ee:	e015      	b.n	800291c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f9bc 	bl	8000c6c <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fa:	f7fe f9b7 	bl	8000c6c <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	; 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e326      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800290c:	4b8b      	ldr	r3, [pc, #556]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	4013      	ands	r3, r2
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x112>
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2202      	movs	r2, #2
 8002922:	4013      	ands	r3, r2
 8002924:	d100      	bne.n	8002928 <HAL_RCC_OscConfig+0x140>
 8002926:	e08b      	b.n	8002a40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d13e      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1d0>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d13b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002940:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d004      	beq.n	8002954 <HAL_RCC_OscConfig+0x16c>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e302      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a7b      	ldr	r2, [pc, #492]	; (8002b48 <HAL_RCC_OscConfig+0x360>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2209      	movs	r2, #9
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	4b71      	ldr	r3, [pc, #452]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800297c:	f000 fc40 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8002980:	0001      	movs	r1, r0
 8002982:	4b6e      	ldr	r3, [pc, #440]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	220f      	movs	r2, #15
 800298a:	4013      	ands	r3, r2
 800298c:	4a6f      	ldr	r2, [pc, #444]	; (8002b4c <HAL_RCC_OscConfig+0x364>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	000a      	movs	r2, r1
 8002992:	40da      	lsrs	r2, r3
 8002994:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x368>)
 8002996:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002998:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0x36c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2513      	movs	r5, #19
 800299e:	197c      	adds	r4, r7, r5
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7fe f91d 	bl	8000be0 <HAL_InitTick>
 80029a6:	0003      	movs	r3, r0
 80029a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80029aa:	197b      	adds	r3, r7, r5
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d046      	beq.n	8002a40 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80029b2:	197b      	adds	r3, r7, r5
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	e2d0      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d027      	beq.n	8002a0e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029be:	4b5f      	ldr	r3, [pc, #380]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2209      	movs	r2, #9
 80029c4:	4393      	bics	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	4b5c      	ldr	r3, [pc, #368]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe f94c 	bl	8000c6c <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe f947 	bl	8000c6c <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e2b6      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ec:	4b53      	ldr	r3, [pc, #332]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2204      	movs	r2, #4
 80029f2:	4013      	ands	r3, r2
 80029f4:	d0f1      	beq.n	80029da <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b51      	ldr	r3, [pc, #324]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a53      	ldr	r2, [pc, #332]	; (8002b48 <HAL_RCC_OscConfig+0x360>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	021a      	lsls	r2, r3, #8
 8002a06:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	e018      	b.n	8002a40 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	438a      	bics	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f927 	bl	8000c6c <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe f922 	bl	8000c6c <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e291      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d1f1      	bne.n	8002a24 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2210      	movs	r2, #16
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x264>
 8002a4a:	e0a1      	b.n	8002b90 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d140      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d005      	beq.n	8002a6a <HAL_RCC_OscConfig+0x282>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e277      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x370>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	0a19      	lsrs	r1, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	061a      	lsls	r2, r3, #24
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	0b5b      	lsrs	r3, r3, #13
 8002a98:	3301      	adds	r3, #1
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	0212      	lsls	r2, r2, #8
 8002a9e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	400b      	ands	r3, r1
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <HAL_RCC_OscConfig+0x364>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x368>)
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_OscConfig+0x36c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2513      	movs	r5, #19
 8002aba:	197c      	adds	r4, r7, r5
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fe f88f 	bl	8000be0 <HAL_InitTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002ac6:	197b      	adds	r3, r7, r5
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d060      	beq.n	8002b90 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002ace:	197b      	adds	r3, r7, r5
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	e242      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d03f      	beq.n	8002b5c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0049      	lsls	r1, r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe f8bf 	bl	8000c6c <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af4:	f7fe f8ba 	bl	8000c6c <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e229      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_RCC_OscConfig+0x370>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	0a19      	lsrs	r1, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	061a      	lsls	r2, r3, #24
 8002b34:	4b01      	ldr	r3, [pc, #4]	; (8002b3c <HAL_RCC_OscConfig+0x354>)
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e029      	b.n	8002b90 <HAL_RCC_OscConfig+0x3a8>
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	fffeffff 	.word	0xfffeffff
 8002b44:	fffbffff 	.word	0xfffbffff
 8002b48:	ffffe0ff 	.word	0xffffe0ff
 8002b4c:	08004c64 	.word	0x08004c64
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004
 8002b58:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b5c:	4bbd      	ldr	r3, [pc, #756]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4bbc      	ldr	r3, [pc, #752]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002b62:	49bd      	ldr	r1, [pc, #756]	; (8002e58 <HAL_RCC_OscConfig+0x670>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe f880 	bl	8000c6c <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b72:	f7fe f87b 	bl	8000c6c <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1ea      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b84:	4bb3      	ldr	r3, [pc, #716]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2208      	movs	r2, #8
 8002b96:	4013      	ands	r3, r2
 8002b98:	d036      	beq.n	8002c08 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d019      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	4bac      	ldr	r3, [pc, #688]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba6:	4bab      	ldr	r3, [pc, #684]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fe f85d 	bl	8000c6c <HAL_GetTick>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe f858 	bl	8000c6c <HAL_GetTick>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1c7      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bca:	4ba2      	ldr	r3, [pc, #648]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bce:	2202      	movs	r2, #2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d0f1      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x3d0>
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd6:	4b9f      	ldr	r3, [pc, #636]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bda:	4b9e      	ldr	r3, [pc, #632]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	438a      	bics	r2, r1
 8002be0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7fe f843 	bl	8000c6c <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe f83e 	bl	8000c6c <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1ad      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfe:	4b95      	ldr	r3, [pc, #596]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d1f1      	bne.n	8002bec <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d100      	bne.n	8002c14 <HAL_RCC_OscConfig+0x42c>
 8002c12:	e0ae      	b.n	8002d72 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2027      	movs	r0, #39	; 0x27
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1c:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	055b      	lsls	r3, r3, #21
 8002c24:	4013      	ands	r3, r2
 8002c26:	d109      	bne.n	8002c3c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c28:	4b8a      	ldr	r3, [pc, #552]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2c:	4b89      	ldr	r3, [pc, #548]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0549      	lsls	r1, r1, #21
 8002c32:	430a      	orrs	r2, r1
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002c36:	183b      	adds	r3, r7, r0
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b87      	ldr	r3, [pc, #540]	; (8002e5c <HAL_RCC_OscConfig+0x674>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	d11a      	bne.n	8002c7e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c48:	4b84      	ldr	r3, [pc, #528]	; (8002e5c <HAL_RCC_OscConfig+0x674>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <HAL_RCC_OscConfig+0x674>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0049      	lsls	r1, r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7fe f809 	bl	8000c6c <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe f804 	bl	8000c6c <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e173      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b7a      	ldr	r3, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x674>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_OscConfig+0x4b2>
 8002c8a:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8e:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	0049      	lsls	r1, r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	651a      	str	r2, [r3, #80]	; 0x50
 8002c98:	e031      	b.n	8002cfe <HAL_RCC_OscConfig+0x516>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca6:	4b6b      	ldr	r3, [pc, #428]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002ca8:	496b      	ldr	r1, [pc, #428]	; (8002e58 <HAL_RCC_OscConfig+0x670>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	651a      	str	r2, [r3, #80]	; 0x50
 8002cae:	4b69      	ldr	r3, [pc, #420]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb2:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cb4:	496a      	ldr	r1, [pc, #424]	; (8002e60 <HAL_RCC_OscConfig+0x678>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cba:	e020      	b.n	8002cfe <HAL_RCC_OscConfig+0x516>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	23a0      	movs	r3, #160	; 0xa0
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4fe>
 8002cc8:	4b62      	ldr	r3, [pc, #392]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ccc:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	00c9      	lsls	r1, r1, #3
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	651a      	str	r2, [r3, #80]	; 0x50
 8002cd6:	4b5f      	ldr	r3, [pc, #380]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cda:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	0049      	lsls	r1, r1, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x516>
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cec:	495a      	ldr	r1, [pc, #360]	; (8002e58 <HAL_RCC_OscConfig+0x670>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8002cf2:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002cf8:	4959      	ldr	r1, [pc, #356]	; (8002e60 <HAL_RCC_OscConfig+0x678>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fd ffb1 	bl	8000c6c <HAL_GetTick>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0e:	e009      	b.n	8002d24 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fd ffac 	bl	8000c6c <HAL_GetTick>
 8002d14:	0002      	movs	r2, r0
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_RCC_OscConfig+0x67c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e11a      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d0ef      	beq.n	8002d10 <HAL_RCC_OscConfig+0x528>
 8002d30:	e014      	b.n	8002d5c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fd ff9b 	bl	8000c6c <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d3a:	e009      	b.n	8002d50 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fd ff96 	bl	8000c6c <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	4a47      	ldr	r2, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x67c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e104      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d1ef      	bne.n	8002d3c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d5c:	2327      	movs	r3, #39	; 0x27
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d6c:	493e      	ldr	r1, [pc, #248]	; (8002e68 <HAL_RCC_OscConfig+0x680>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2220      	movs	r2, #32
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d049      	beq.n	8002e10 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d026      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9c:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <HAL_RCC_OscConfig+0x684>)
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <HAL_RCC_OscConfig+0x684>)
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	0189      	lsls	r1, r1, #6
 8002da6:	430a      	orrs	r2, r1
 8002da8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fd ff5f 	bl	8000c6c <HAL_GetTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db4:	f7fd ff5a 	bl	8000c6c <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0c9      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d0f1      	beq.n	8002db4 <HAL_RCC_OscConfig+0x5cc>
 8002dd0:	e01e      	b.n	8002e10 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	438a      	bics	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_RCC_OscConfig+0x684>)
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_OscConfig+0x684>)
 8002de4:	4922      	ldr	r1, [pc, #136]	; (8002e70 <HAL_RCC_OscConfig+0x688>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd ff3f 	bl	8000c6c <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df4:	f7fd ff3a 	bl	8000c6c <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0a9      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d1f1      	bne.n	8002df4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d100      	bne.n	8002e1a <HAL_RCC_OscConfig+0x632>
 8002e18:	e09e      	b.n	8002f58 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d100      	bne.n	8002e22 <HAL_RCC_OscConfig+0x63a>
 8002e20:	e077      	b.n	8002f12 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d158      	bne.n	8002edc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_OscConfig+0x66c>)
 8002e30:	4910      	ldr	r1, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x68c>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fd ff19 	bl	8000c6c <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fd ff14 	bl	8000c6c <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d914      	bls.n	8002e78 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e083      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40021000 	.word	0x40021000
 8002e58:	fffffeff 	.word	0xfffffeff
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	fffffbff 	.word	0xfffffbff
 8002e64:	00001388 	.word	0x00001388
 8002e68:	efffffff 	.word	0xefffffff
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	ffffdfff 	.word	0xffffdfff
 8002e74:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e78:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	049b      	lsls	r3, r3, #18
 8002e80:	4013      	ands	r3, r2
 8002e82:	d1dd      	bne.n	8002e40 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a37      	ldr	r2, [pc, #220]	; (8002f68 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	0449      	lsls	r1, r1, #17
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fd fedb 	bl	8000c6c <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fd fed6 	bl	8000c6c <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e045      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	049b      	lsls	r3, r3, #18
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x6d4>
 8002eda:	e03d      	b.n	8002f58 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002ee2:	4922      	ldr	r1, [pc, #136]	; (8002f6c <HAL_RCC_OscConfig+0x784>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd fec0 	bl	8000c6c <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fd febb 	bl	8000c6c <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e02a      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f04:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	049b      	lsls	r3, r3, #18
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x70a>
 8002f10:	e022      	b.n	8002f58 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01d      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_RCC_OscConfig+0x77c>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	025b      	lsls	r3, r3, #9
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d10f      	bne.n	8002f54 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	23f0      	movs	r3, #240	; 0xf0
 8002f38:	039b      	lsls	r3, r3, #14
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	23c0      	movs	r3, #192	; 0xc0
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b00a      	add	sp, #40	; 0x28
 8002f60:	bdb0      	pop	{r4, r5, r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	40021000 	.word	0x40021000
 8002f68:	ff02ffff 	.word	0xff02ffff
 8002f6c:	feffffff 	.word	0xfeffffff

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e128      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b96      	ldr	r3, [pc, #600]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d91e      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b93      	ldr	r3, [pc, #588]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4393      	bics	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	4b90      	ldr	r3, [pc, #576]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fa4:	f7fd fe62 	bl	8000c6c <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fae:	f7fd fe5d 	bl	8000c6c <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_RCC_ClockConfig+0x274>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e109      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1ee      	bne.n	8002fae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fda:	4b83      	ldr	r3, [pc, #524]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	22f0      	movs	r2, #240	; 0xf0
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x8a>
 8002ff8:	e089      	b.n	800310e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003002:	4b79      	ldr	r3, [pc, #484]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	4013      	ands	r3, r2
 800300c:	d120      	bne.n	8003050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e1      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301a:	4b73      	ldr	r3, [pc, #460]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	049b      	lsls	r3, r3, #18
 8003022:	4013      	ands	r3, r2
 8003024:	d114      	bne.n	8003050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0d5      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d106      	bne.n	8003040 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003032:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2204      	movs	r2, #4
 8003038:	4013      	ands	r3, r2
 800303a:	d109      	bne.n	8003050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ca      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003040:	4b69      	ldr	r3, [pc, #420]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4013      	ands	r3, r2
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0c2      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003050:	4b65      	ldr	r3, [pc, #404]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2203      	movs	r2, #3
 8003056:	4393      	bics	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fd fe02 	bl	8000c6c <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d111      	bne.n	8003098 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003074:	e009      	b.n	800308a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7fd fdf9 	bl	8000c6c <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_ClockConfig+0x274>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0a5      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	220c      	movs	r2, #12
 8003090:	4013      	ands	r3, r2
 8003092:	2b08      	cmp	r3, #8
 8003094:	d1ef      	bne.n	8003076 <HAL_RCC_ClockConfig+0x106>
 8003096:	e03a      	b.n	800310e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d111      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a0:	e009      	b.n	80030b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a2:	f7fd fde3 	bl	8000c6c <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_RCC_ClockConfig+0x274>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e08f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b6:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	220c      	movs	r2, #12
 80030bc:	4013      	ands	r3, r2
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d1ef      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x132>
 80030c2:	e024      	b.n	800310e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d11b      	bne.n	8003104 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030cc:	e009      	b.n	80030e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f7fd fdcd 	bl	8000c6c <HAL_GetTick>
 80030d2:	0002      	movs	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	4a42      	ldr	r2, [pc, #264]	; (80031e4 <HAL_RCC_ClockConfig+0x274>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e079      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	220c      	movs	r2, #12
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d1ef      	bne.n	80030ce <HAL_RCC_ClockConfig+0x15e>
 80030ee:	e00e      	b.n	800310e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fd fdbc 	bl	8000c6c <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	4a3a      	ldr	r2, [pc, #232]	; (80031e4 <HAL_RCC_ClockConfig+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e068      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003104:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	220c      	movs	r2, #12
 800310a:	4013      	ands	r3, r2
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d21e      	bcs.n	800315a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311c:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	4393      	bics	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800312e:	f7fd fd9d 	bl	8000c6c <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	e009      	b.n	800314c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fd fd98 	bl	8000c6c <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_RCC_ClockConfig+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e044      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCC_ClockConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d1ee      	bne.n	8003138 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2204      	movs	r2, #4
 8003160:	4013      	ands	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_RCC_ClockConfig+0x27c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2208      	movs	r2, #8
 800317e:	4013      	ands	r3, r2
 8003180:	d00a      	beq.n	8003198 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <HAL_RCC_ClockConfig+0x280>)
 8003188:	4013      	ands	r3, r2
 800318a:	0019      	movs	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00da      	lsls	r2, r3, #3
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 8003194:	430a      	orrs	r2, r1
 8003196:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003198:	f000 f832 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800319c:	0001      	movs	r1, r0
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x278>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	220f      	movs	r2, #15
 80031a6:	4013      	ands	r3, r2
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_RCC_ClockConfig+0x284>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	000a      	movs	r2, r1
 80031ae:	40da      	lsrs	r2, r3
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80031b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_RCC_ClockConfig+0x28c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	250b      	movs	r5, #11
 80031ba:	197c      	adds	r4, r7, r5
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fd fd0f 	bl	8000be0 <HAL_InitTick>
 80031c2:	0003      	movs	r3, r0
 80031c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80031c6:	197b      	adds	r3, r7, r5
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80031ce:	197b      	adds	r3, r7, r5
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bdb0      	pop	{r4, r5, r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	40022000 	.word	0x40022000
 80031e4:	00001388 	.word	0x00001388
 80031e8:	40021000 	.word	0x40021000
 80031ec:	fffff8ff 	.word	0xfffff8ff
 80031f0:	ffffc7ff 	.word	0xffffc7ff
 80031f4:	08004c64 	.word	0x08004c64
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b08e      	sub	sp, #56	; 0x38
 8003204:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_GetSysClockFreq+0x138>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320e:	230c      	movs	r3, #12
 8003210:	4013      	ands	r3, r2
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d014      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x40>
 8003216:	d900      	bls.n	800321a <HAL_RCC_GetSysClockFreq+0x1a>
 8003218:	e07b      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x112>
 800321a:	2b04      	cmp	r3, #4
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x24>
 800321e:	2b08      	cmp	r3, #8
 8003220:	d00b      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x3a>
 8003222:	e076      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <HAL_RCC_GetSysClockFreq+0x138>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2210      	movs	r2, #16
 800322a:	4013      	ands	r3, r2
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003232:	e07c      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003234:	4b42      	ldr	r3, [pc, #264]	; (8003340 <HAL_RCC_GetSysClockFreq+0x140>)
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003238:	e079      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <HAL_RCC_GetSysClockFreq+0x144>)
 800323c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800323e:	e076      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	0c9a      	lsrs	r2, r3, #18
 8003244:	230f      	movs	r3, #15
 8003246:	401a      	ands	r2, r3
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_GetSysClockFreq+0x148>)
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	0d9a      	lsrs	r2, r3, #22
 8003252:	2303      	movs	r3, #3
 8003254:	4013      	ands	r3, r2
 8003256:	3301      	adds	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_GetSysClockFreq+0x138>)
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	025b      	lsls	r3, r3, #9
 8003262:	4013      	ands	r3, r2
 8003264:	d01a      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	4a35      	ldr	r2, [pc, #212]	; (8003344 <HAL_RCC_GetSysClockFreq+0x144>)
 8003270:	2300      	movs	r3, #0
 8003272:	69b8      	ldr	r0, [r7, #24]
 8003274:	69f9      	ldr	r1, [r7, #28]
 8003276:	f7fc fff3 	bl	8000260 <__aeabi_lmul>
 800327a:	0002      	movs	r2, r0
 800327c:	000b      	movs	r3, r1
 800327e:	0010      	movs	r0, r2
 8003280:	0019      	movs	r1, r3
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f7fc ffc7 	bl	8000220 <__aeabi_uldivmod>
 8003292:	0002      	movs	r2, r0
 8003294:	000b      	movs	r3, r1
 8003296:	0013      	movs	r3, r2
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
 800329a:	e037      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_RCC_GetSysClockFreq+0x138>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2210      	movs	r2, #16
 80032a2:	4013      	ands	r3, r2
 80032a4:	d01a      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_RCC_GetSysClockFreq+0x13c>)
 80032b0:	2300      	movs	r3, #0
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	f7fc ffd3 	bl	8000260 <__aeabi_lmul>
 80032ba:	0002      	movs	r2, r0
 80032bc:	000b      	movs	r3, r1
 80032be:	0010      	movs	r0, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f7fc ffa7 	bl	8000220 <__aeabi_uldivmod>
 80032d2:	0002      	movs	r2, r0
 80032d4:	000b      	movs	r3, r1
 80032d6:	0013      	movs	r3, r2
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
 80032da:	e017      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	0018      	movs	r0, r3
 80032e0:	2300      	movs	r3, #0
 80032e2:	0019      	movs	r1, r3
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_RCC_GetSysClockFreq+0x140>)
 80032e6:	2300      	movs	r3, #0
 80032e8:	f7fc ffba 	bl	8000260 <__aeabi_lmul>
 80032ec:	0002      	movs	r2, r0
 80032ee:	000b      	movs	r3, r1
 80032f0:	0010      	movs	r0, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	001c      	movs	r4, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	001d      	movs	r5, r3
 80032fc:	0022      	movs	r2, r4
 80032fe:	002b      	movs	r3, r5
 8003300:	f7fc ff8e 	bl	8000220 <__aeabi_uldivmod>
 8003304:	0002      	movs	r2, r0
 8003306:	000b      	movs	r3, r1
 8003308:	0013      	movs	r3, r2
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003310:	e00d      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_GetSysClockFreq+0x138>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0b5b      	lsrs	r3, r3, #13
 8003318:	2207      	movs	r2, #7
 800331a:	4013      	ands	r3, r2
 800331c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	3301      	adds	r3, #1
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	0212      	lsls	r2, r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	0013      	movs	r3, r2
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800332c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b00e      	add	sp, #56	; 0x38
 8003336:	bdb0      	pop	{r4, r5, r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	003d0900 	.word	0x003d0900
 8003340:	00f42400 	.word	0x00f42400
 8003344:	007a1200 	.word	0x007a1200
 8003348:	08004c7c 	.word	0x08004c7c

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <HAL_RCC_GetHCLKFreq+0x10>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	20000000 	.word	0x20000000

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003364:	f7ff fff2 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003368:	0001      	movs	r1, r0
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	2207      	movs	r2, #7
 8003372:	4013      	ands	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	40d9      	lsrs	r1, r3
 800337a:	000b      	movs	r3, r1
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40021000 	.word	0x40021000
 8003388:	08004c74 	.word	0x08004c74

0800338c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003390:	f7ff ffdc 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003394:	0001      	movs	r1, r0
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0adb      	lsrs	r3, r3, #11
 800339c:	2207      	movs	r2, #7
 800339e:	4013      	ands	r3, r2
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	40d9      	lsrs	r1, r3
 80033a6:	000b      	movs	r3, r1
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08004c74 	.word	0x08004c74

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80033c0:	2317      	movs	r3, #23
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2220      	movs	r2, #32
 80033ce:	4013      	ands	r3, r2
 80033d0:	d106      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	4013      	ands	r3, r2
 80033dc:	d100      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80033de:	e0d9      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b9c      	ldr	r3, [pc, #624]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	055b      	lsls	r3, r3, #21
 80033e8:	4013      	ands	r3, r2
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b99      	ldr	r3, [pc, #612]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f0:	4b98      	ldr	r3, [pc, #608]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	0549      	lsls	r1, r1, #21
 80033f6:	430a      	orrs	r2, r1
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033fa:	2317      	movs	r3, #23
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b95      	ldr	r3, [pc, #596]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4013      	ands	r3, r2
 800340c:	d11a      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340e:	4b92      	ldr	r3, [pc, #584]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b91      	ldr	r3, [pc, #580]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0049      	lsls	r1, r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7fd fc26 	bl	8000c6c <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	e008      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003426:	f7fd fc21 	bl	8000c6c <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b64      	cmp	r3, #100	; 0x64
 8003432:	d901      	bls.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e108      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	4b87      	ldr	r3, [pc, #540]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4013      	ands	r3, r2
 8003442:	d0f0      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003444:	4b83      	ldr	r3, [pc, #524]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	23c0      	movs	r3, #192	; 0xc0
 800344a:	039b      	lsls	r3, r3, #14
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	23c0      	movs	r3, #192	; 0xc0
 8003456:	039b      	lsls	r3, r3, #14
 8003458:	4013      	ands	r3, r2
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	23c0      	movs	r3, #192	; 0xc0
 8003466:	039b      	lsls	r3, r3, #14
 8003468:	4013      	ands	r3, r2
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d013      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	029b      	lsls	r3, r3, #10
 8003478:	401a      	ands	r2, r3
 800347a:	23c0      	movs	r3, #192	; 0xc0
 800347c:	029b      	lsls	r3, r3, #10
 800347e:	429a      	cmp	r2, r3
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003482:	4b74      	ldr	r3, [pc, #464]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	029b      	lsls	r3, r3, #10
 800348a:	401a      	ands	r2, r3
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	029b      	lsls	r3, r3, #10
 8003490:	429a      	cmp	r2, r3
 8003492:	d101      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0d8      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003498:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800349a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800349c:	23c0      	movs	r3, #192	; 0xc0
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d049      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	23c0      	movs	r3, #192	; 0xc0
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	4013      	ands	r3, r2
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d004      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	4013      	ands	r3, r2
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	23c0      	movs	r3, #192	; 0xc0
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	4013      	ands	r3, r2
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d034      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	d02e      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80034e0:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	4a5d      	ldr	r2, [pc, #372]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ea:	4b5a      	ldr	r3, [pc, #360]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ee:	4b59      	ldr	r3, [pc, #356]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0309      	lsls	r1, r1, #12
 80034f4:	430a      	orrs	r2, r1
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034f8:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034fc:	4b55      	ldr	r3, [pc, #340]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034fe:	4958      	ldr	r1, [pc, #352]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003500:	400a      	ands	r2, r1
 8003502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003504:	4b53      	ldr	r3, [pc, #332]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4013      	ands	r3, r2
 8003512:	d014      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fbaa 	bl	8000c6c <HAL_GetTick>
 8003518:	0003      	movs	r3, r0
 800351a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800351c:	e009      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fd fba5 	bl	8000c6c <HAL_GetTick>
 8003522:	0002      	movs	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e08b      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003532:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d0ef      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	23c0      	movs	r3, #192	; 0xc0
 8003544:	029b      	lsls	r3, r3, #10
 8003546:	401a      	ands	r2, r3
 8003548:	23c0      	movs	r3, #192	; 0xc0
 800354a:	029b      	lsls	r3, r3, #10
 800354c:	429a      	cmp	r2, r3
 800354e:	d10c      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003550:	4b40      	ldr	r3, [pc, #256]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a44      	ldr	r2, [pc, #272]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	23c0      	movs	r3, #192	; 0xc0
 8003560:	039b      	lsls	r3, r3, #14
 8003562:	401a      	ands	r2, r3
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800356c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	23c0      	movs	r3, #192	; 0xc0
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	401a      	ands	r2, r3
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800357a:	430a      	orrs	r2, r1
 800357c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800357e:	2317      	movs	r3, #23
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800358a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003590:	400a      	ands	r2, r1
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	2203      	movs	r2, #3
 80035a4:	4393      	bics	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035ae:	430a      	orrs	r2, r1
 80035b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d009      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	220c      	movs	r2, #12
 80035c2:	4393      	bics	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035cc:	430a      	orrs	r2, r1
 80035ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	4a24      	ldr	r2, [pc, #144]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2208      	movs	r2, #8
 80035f4:	4013      	ands	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003608:	430a      	orrs	r2, r1
 800360a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2240      	movs	r2, #64	; 0x40
 8003612:	4013      	ands	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003626:	430a      	orrs	r2, r1
 8003628:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	4013      	ands	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800363a:	4013      	ands	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003644:	430a      	orrs	r2, r1
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b006      	add	sp, #24
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	fffcffff 	.word	0xfffcffff
 8003660:	fff7ffff 	.word	0xfff7ffff
 8003664:	00001388 	.word	0x00001388
 8003668:	ffcfffff 	.word	0xffcfffff
 800366c:	efffffff 	.word	0xefffffff
 8003670:	fffff3ff 	.word	0xfffff3ff
 8003674:	ffffcfff 	.word	0xffffcfff
 8003678:	fbffffff 	.word	0xfbffffff
 800367c:	fff3ffff 	.word	0xfff3ffff

08003680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e044      	b.n	800371c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2274      	movs	r2, #116	; 0x74
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fd f9ad 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2224      	movs	r2, #36	; 0x24
 80036ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2101      	movs	r1, #1
 80036bc:	438a      	bics	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 fb8e 	bl	8003de4 <UART_SetConfig>
 80036c8:	0003      	movs	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e024      	b.n	800371c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 fe05 	bl	80042ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	490d      	ldr	r1, [pc, #52]	; (8003724 <HAL_UART_Init+0xa4>)
 80036ee:	400a      	ands	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	212a      	movs	r1, #42	; 0x2a
 80036fe:	438a      	bics	r2, r1
 8003700:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fe9d 	bl	8004454 <UART_CheckIdleState>
 800371a:	0003      	movs	r3, r0
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	ffffb7ff 	.word	0xffffb7ff

08003728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	1dbb      	adds	r3, r7, #6
 8003734:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373a:	2b20      	cmp	r3, #32
 800373c:	d155      	bne.n	80037ea <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_UART_Receive_IT+0x24>
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e04d      	b.n	80037ec <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	429a      	cmp	r2, r3
 800375a:	d109      	bne.n	8003770 <HAL_UART_Receive_IT+0x48>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	d001      	beq.n	8003770 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e03d      	b.n	80037ec <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2274      	movs	r2, #116	; 0x74
 8003774:	5c9b      	ldrb	r3, [r3, r2]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Receive_IT+0x56>
 800377a:	2302      	movs	r3, #2
 800377c:	e036      	b.n	80037ec <HAL_UART_Receive_IT+0xc4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2274      	movs	r2, #116	; 0x74
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <HAL_UART_Receive_IT+0xcc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d020      	beq.n	80037d8 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	4013      	ands	r3, r2
 80037a2:	d019      	beq.n	80037d8 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a4:	f3ef 8310 	mrs	r3, PRIMASK
 80037a8:	613b      	str	r3, [r7, #16]
  return(result);
 80037aa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	04c9      	lsls	r1, r1, #19
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 ff43 	bl	800466c <UART_Start_Receive_IT>
 80037e6:	0003      	movs	r3, r0
 80037e8:	e000      	b.n	80037ec <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b008      	add	sp, #32
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40004800 	.word	0x40004800

080037f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b0ab      	sub	sp, #172	; 0xac
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	22a4      	movs	r2, #164	; 0xa4
 8003808:	18b9      	adds	r1, r7, r2
 800380a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	20a0      	movs	r0, #160	; 0xa0
 8003814:	1839      	adds	r1, r7, r0
 8003816:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	219c      	movs	r1, #156	; 0x9c
 8003820:	1879      	adds	r1, r7, r1
 8003822:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003824:	0011      	movs	r1, r2
 8003826:	18bb      	adds	r3, r7, r2
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a99      	ldr	r2, [pc, #612]	; (8003a90 <HAL_UART_IRQHandler+0x298>)
 800382c:	4013      	ands	r3, r2
 800382e:	2298      	movs	r2, #152	; 0x98
 8003830:	18bc      	adds	r4, r7, r2
 8003832:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003834:	18bb      	adds	r3, r7, r2
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d114      	bne.n	8003866 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800383c:	187b      	adds	r3, r7, r1
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2220      	movs	r2, #32
 8003842:	4013      	ands	r3, r2
 8003844:	d00f      	beq.n	8003866 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003846:	183b      	adds	r3, r7, r0
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2220      	movs	r2, #32
 800384c:	4013      	ands	r3, r2
 800384e:	d00a      	beq.n	8003866 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003854:	2b00      	cmp	r3, #0
 8003856:	d100      	bne.n	800385a <HAL_UART_IRQHandler+0x62>
 8003858:	e298      	b.n	8003d8c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	0010      	movs	r0, r2
 8003862:	4798      	blx	r3
      }
      return;
 8003864:	e292      	b.n	8003d8c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003866:	2398      	movs	r3, #152	; 0x98
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <HAL_UART_IRQHandler+0x7a>
 8003870:	e114      	b.n	8003a9c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003872:	239c      	movs	r3, #156	; 0x9c
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d106      	bne.n	800388c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800387e:	23a0      	movs	r3, #160	; 0xa0
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a83      	ldr	r2, [pc, #524]	; (8003a94 <HAL_UART_IRQHandler+0x29c>)
 8003886:	4013      	ands	r3, r2
 8003888:	d100      	bne.n	800388c <HAL_UART_IRQHandler+0x94>
 800388a:	e107      	b.n	8003a9c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800388c:	23a4      	movs	r3, #164	; 0xa4
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	4013      	ands	r3, r2
 8003896:	d012      	beq.n	80038be <HAL_UART_IRQHandler+0xc6>
 8003898:	23a0      	movs	r3, #160	; 0xa0
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00b      	beq.n	80038be <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	589b      	ldr	r3, [r3, r2]
 80038b4:	2201      	movs	r2, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038be:	23a4      	movs	r3, #164	; 0xa4
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	d011      	beq.n	80038ee <HAL_UART_IRQHandler+0xf6>
 80038ca:	239c      	movs	r3, #156	; 0x9c
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00b      	beq.n	80038ee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2202      	movs	r2, #2
 80038dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	589b      	ldr	r3, [r3, r2]
 80038e4:	2204      	movs	r2, #4
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038ee:	23a4      	movs	r3, #164	; 0xa4
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	d011      	beq.n	800391e <HAL_UART_IRQHandler+0x126>
 80038fa:	239c      	movs	r3, #156	; 0x9c
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2201      	movs	r2, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d00b      	beq.n	800391e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2204      	movs	r2, #4
 800390c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	589b      	ldr	r3, [r3, r2]
 8003914:	2202      	movs	r2, #2
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800391e:	23a4      	movs	r3, #164	; 0xa4
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	4013      	ands	r3, r2
 8003928:	d017      	beq.n	800395a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800392a:	23a0      	movs	r3, #160	; 0xa0
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2220      	movs	r2, #32
 8003932:	4013      	ands	r3, r2
 8003934:	d105      	bne.n	8003942 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003936:	239c      	movs	r3, #156	; 0x9c
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003940:	d00b      	beq.n	800395a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2208      	movs	r2, #8
 8003948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	589b      	ldr	r3, [r3, r2]
 8003950:	2208      	movs	r2, #8
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800395a:	23a4      	movs	r3, #164	; 0xa4
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4013      	ands	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_UART_IRQHandler+0x198>
 8003968:	23a0      	movs	r3, #160	; 0xa0
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	04db      	lsls	r3, r3, #19
 8003972:	4013      	ands	r3, r2
 8003974:	d00c      	beq.n	8003990 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	589b      	ldr	r3, [r3, r2]
 8003986:	2220      	movs	r2, #32
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	589b      	ldr	r3, [r3, r2]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d100      	bne.n	800399c <HAL_UART_IRQHandler+0x1a4>
 800399a:	e1f9      	b.n	8003d90 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800399c:	23a4      	movs	r3, #164	; 0xa4
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2220      	movs	r2, #32
 80039a4:	4013      	ands	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039a8:	23a0      	movs	r3, #160	; 0xa0
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2220      	movs	r2, #32
 80039b0:	4013      	ands	r3, r2
 80039b2:	d008      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	0010      	movs	r0, r2
 80039c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	589b      	ldr	r3, [r3, r2]
 80039cc:	2194      	movs	r1, #148	; 0x94
 80039ce:	187a      	adds	r2, r7, r1
 80039d0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	4013      	ands	r3, r2
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d004      	beq.n	80039ea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2228      	movs	r2, #40	; 0x28
 80039e6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e8:	d047      	beq.n	8003a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 feed 	bl	80047cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d137      	bne.n	8003a70 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	2090      	movs	r0, #144	; 0x90
 8003a0a:	183a      	adds	r2, r7, r0
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2140      	movs	r1, #64	; 0x40
 8003a26:	438a      	bics	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_UART_IRQHandler+0x2a0>)
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fd fce1 	bl	8001414 <HAL_DMA_Abort_IT>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d01a      	beq.n	8003a8c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	0018      	movs	r0, r3
 8003a62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e012      	b.n	8003a8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f9a7 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	e00d      	b.n	8003a8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f9a2 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e008      	b.n	8003a8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 f99d 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	2100      	movs	r1, #0
 8003a88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a8a:	e181      	b.n	8003d90 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	46c0      	nop			; (mov r8, r8)
    return;
 8003a8e:	e17f      	b.n	8003d90 <HAL_UART_IRQHandler+0x598>
 8003a90:	0000080f 	.word	0x0000080f
 8003a94:	04000120 	.word	0x04000120
 8003a98:	08004891 	.word	0x08004891

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d000      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x2ae>
 8003aa4:	e133      	b.n	8003d0e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aa6:	23a4      	movs	r3, #164	; 0xa4
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d100      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x2bc>
 8003ab2:	e12c      	b.n	8003d0e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ab4:	23a0      	movs	r3, #160	; 0xa0
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2210      	movs	r2, #16
 8003abc:	4013      	ands	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x2ca>
 8003ac0:	e125      	b.n	8003d0e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d000      	beq.n	8003ada <HAL_UART_IRQHandler+0x2e2>
 8003ad8:	e09d      	b.n	8003c16 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	217e      	movs	r1, #126	; 0x7e
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d100      	bne.n	8003af2 <HAL_UART_IRQHandler+0x2fa>
 8003af0:	e150      	b.n	8003d94 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2258      	movs	r2, #88	; 0x58
 8003af6:	5a9b      	ldrh	r3, [r3, r2]
 8003af8:	187a      	adds	r2, r7, r1
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d300      	bcc.n	8003b02 <HAL_UART_IRQHandler+0x30a>
 8003b00:	e148      	b.n	8003d94 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	187a      	adds	r2, r7, r1
 8003b06:	215a      	movs	r1, #90	; 0x5a
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2220      	movs	r2, #32
 8003b16:	4013      	ands	r3, r2
 8003b18:	d16e      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b24:	2301      	movs	r3, #1
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	499a      	ldr	r1, [pc, #616]	; (8003da4 <HAL_UART_IRQHandler+0x5ac>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	f383 8810 	msr	PRIMASK, r3
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	677b      	str	r3, [r7, #116]	; 0x74
 8003b56:	2301      	movs	r3, #1
 8003b58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	438a      	bics	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b86:	673b      	str	r3, [r7, #112]	; 0x70
 8003b88:	2301      	movs	r3, #1
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2140      	movs	r1, #64	; 0x40
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003baa:	f383 8810 	msr	PRIMASK, r3
}
 8003bae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2110      	movs	r1, #16
 8003bde:	438a      	bics	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7fd fbce 	bl	8001394 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2258      	movs	r2, #88	; 0x58
 8003bfc:	5a9a      	ldrh	r2, [r3, r2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	215a      	movs	r1, #90	; 0x5a
 8003c02:	5a5b      	ldrh	r3, [r3, r1]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	0011      	movs	r1, r2
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 f8dc 	bl	8003dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c14:	e0be      	b.n	8003d94 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2258      	movs	r2, #88	; 0x58
 8003c1a:	5a99      	ldrh	r1, [r3, r2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	225a      	movs	r2, #90	; 0x5a
 8003c20:	5a9b      	ldrh	r3, [r3, r2]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	208e      	movs	r0, #142	; 0x8e
 8003c26:	183b      	adds	r3, r7, r0
 8003c28:	1a8a      	subs	r2, r1, r2
 8003c2a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	225a      	movs	r2, #90	; 0x5a
 8003c30:	5a9b      	ldrh	r3, [r3, r2]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d100      	bne.n	8003c3a <HAL_UART_IRQHandler+0x442>
 8003c38:	e0ae      	b.n	8003d98 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d100      	bne.n	8003c44 <HAL_UART_IRQHandler+0x44c>
 8003c42:	e0a9      	b.n	8003d98 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c44:	f3ef 8310 	mrs	r3, PRIMASK
 8003c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4c:	2488      	movs	r4, #136	; 0x88
 8003c4e:	193a      	adds	r2, r7, r4
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	2301      	movs	r3, #1
 8003c54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f383 8810 	msr	PRIMASK, r3
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	494f      	ldr	r1, [pc, #316]	; (8003da8 <HAL_UART_IRQHandler+0x5b0>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f383 8810 	msr	PRIMASK, r3
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c82:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c84:	2484      	movs	r4, #132	; 0x84
 8003c86:	193a      	adds	r2, r7, r4
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			; (mov r8, r8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	438a      	bics	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	193b      	adds	r3, r7, r4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cce:	2480      	movs	r4, #128	; 0x80
 8003cd0:	193a      	adds	r2, r7, r4
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2110      	movs	r1, #16
 8003cec:	438a      	bics	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f860 	bl	8003dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d0c:	e044      	b.n	8003d98 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d0e:	23a4      	movs	r3, #164	; 0xa4
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	035b      	lsls	r3, r3, #13
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d010      	beq.n	8003d3e <HAL_UART_IRQHandler+0x546>
 8003d1c:	239c      	movs	r3, #156	; 0x9c
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	03db      	lsls	r3, r3, #15
 8003d26:	4013      	ands	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	0352      	lsls	r2, r2, #13
 8003d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 ff54 	bl	8004be4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d3c:	e02f      	b.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d3e:	23a4      	movs	r3, #164	; 0xa4
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	4013      	ands	r3, r2
 8003d48:	d00f      	beq.n	8003d6a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d4a:	23a0      	movs	r3, #160	; 0xa0
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	4013      	ands	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01e      	beq.n	8003d9c <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	0010      	movs	r0, r2
 8003d66:	4798      	blx	r3
    }
    return;
 8003d68:	e018      	b.n	8003d9c <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d6a:	23a4      	movs	r3, #164	; 0xa4
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2240      	movs	r2, #64	; 0x40
 8003d72:	4013      	ands	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
 8003d76:	23a0      	movs	r3, #160	; 0xa0
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2240      	movs	r2, #64	; 0x40
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d00d      	beq.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f000 fd9a 	bl	80048be <UART_EndTransmit_IT>
    return;
 8003d8a:	e008      	b.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
      return;
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	e006      	b.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
    return;
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	e004      	b.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
      return;
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	e002      	b.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
      return;
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	e000      	b.n	8003d9e <HAL_UART_IRQHandler+0x5a6>
    return;
 8003d9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b02b      	add	sp, #172	; 0xac
 8003da2:	bd90      	pop	{r4, r7, pc}
 8003da4:	fffffeff 	.word	0xfffffeff
 8003da8:	fffffedf 	.word	0xfffffedf

08003dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	000a      	movs	r2, r1
 8003dd6:	1cbb      	adds	r3, r7, #2
 8003dd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b002      	add	sp, #8
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dec:	231a      	movs	r3, #26
 8003dee:	2218      	movs	r2, #24
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4ac6      	ldr	r2, [pc, #792]	; (8004130 <UART_SetConfig+0x34c>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4ac1      	ldr	r2, [pc, #772]	; (8004134 <UART_SetConfig+0x350>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4abb      	ldr	r2, [pc, #748]	; (8004138 <UART_SetConfig+0x354>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e54:	4313      	orrs	r3, r2
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4ab7      	ldr	r2, [pc, #732]	; (800413c <UART_SetConfig+0x358>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4ab3      	ldr	r2, [pc, #716]	; (8004140 <UART_SetConfig+0x35c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d131      	bne.n	8003edc <UART_SetConfig+0xf8>
 8003e78:	4bb2      	ldr	r3, [pc, #712]	; (8004144 <UART_SetConfig+0x360>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d01d      	beq.n	8003ec0 <UART_SetConfig+0xdc>
 8003e84:	d823      	bhi.n	8003ece <UART_SetConfig+0xea>
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d00c      	beq.n	8003ea4 <UART_SetConfig+0xc0>
 8003e8a:	d820      	bhi.n	8003ece <UART_SetConfig+0xea>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <UART_SetConfig+0xb2>
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d00e      	beq.n	8003eb2 <UART_SetConfig+0xce>
 8003e94:	e01b      	b.n	8003ece <UART_SetConfig+0xea>
 8003e96:	231b      	movs	r3, #27
 8003e98:	2218      	movs	r2, #24
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e09c      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	2218      	movs	r2, #24
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	2202      	movs	r2, #2
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e095      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003eb2:	231b      	movs	r3, #27
 8003eb4:	2218      	movs	r2, #24
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	19db      	adds	r3, r3, r7
 8003eba:	2204      	movs	r2, #4
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e08e      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003ec0:	231b      	movs	r3, #27
 8003ec2:	2218      	movs	r2, #24
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	19db      	adds	r3, r3, r7
 8003ec8:	2208      	movs	r2, #8
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e087      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003ece:	231b      	movs	r3, #27
 8003ed0:	2218      	movs	r2, #24
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	19db      	adds	r3, r3, r7
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e080      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a99      	ldr	r2, [pc, #612]	; (8004148 <UART_SetConfig+0x364>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d131      	bne.n	8003f4a <UART_SetConfig+0x166>
 8003ee6:	4b97      	ldr	r3, [pc, #604]	; (8004144 <UART_SetConfig+0x360>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	220c      	movs	r2, #12
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d01d      	beq.n	8003f2e <UART_SetConfig+0x14a>
 8003ef2:	d823      	bhi.n	8003f3c <UART_SetConfig+0x158>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d00c      	beq.n	8003f12 <UART_SetConfig+0x12e>
 8003ef8:	d820      	bhi.n	8003f3c <UART_SetConfig+0x158>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x120>
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d00e      	beq.n	8003f20 <UART_SetConfig+0x13c>
 8003f02:	e01b      	b.n	8003f3c <UART_SetConfig+0x158>
 8003f04:	231b      	movs	r3, #27
 8003f06:	2218      	movs	r2, #24
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e065      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003f12:	231b      	movs	r3, #27
 8003f14:	2218      	movs	r2, #24
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	19db      	adds	r3, r3, r7
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e05e      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003f20:	231b      	movs	r3, #27
 8003f22:	2218      	movs	r2, #24
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	2204      	movs	r2, #4
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e057      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003f2e:	231b      	movs	r3, #27
 8003f30:	2218      	movs	r2, #24
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	19db      	adds	r3, r3, r7
 8003f36:	2208      	movs	r2, #8
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e050      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003f3c:	231b      	movs	r3, #27
 8003f3e:	2218      	movs	r2, #24
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	19db      	adds	r3, r3, r7
 8003f44:	2210      	movs	r2, #16
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	e049      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a7a      	ldr	r2, [pc, #488]	; (8004138 <UART_SetConfig+0x354>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d13e      	bne.n	8003fd2 <UART_SetConfig+0x1ee>
 8003f54:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <UART_SetConfig+0x360>)
 8003f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f58:	23c0      	movs	r3, #192	; 0xc0
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	22c0      	movs	r2, #192	; 0xc0
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <UART_SetConfig+0x1d2>
 8003f66:	22c0      	movs	r2, #192	; 0xc0
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d82a      	bhi.n	8003fc4 <UART_SetConfig+0x1e0>
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d011      	beq.n	8003f9a <UART_SetConfig+0x1b6>
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d822      	bhi.n	8003fc4 <UART_SetConfig+0x1e0>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <UART_SetConfig+0x1a8>
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	00d2      	lsls	r2, r2, #3
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <UART_SetConfig+0x1c4>
 8003f8a:	e01b      	b.n	8003fc4 <UART_SetConfig+0x1e0>
 8003f8c:	231b      	movs	r3, #27
 8003f8e:	2218      	movs	r2, #24
 8003f90:	189b      	adds	r3, r3, r2
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e021      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003f9a:	231b      	movs	r3, #27
 8003f9c:	2218      	movs	r2, #24
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e01a      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003fa8:	231b      	movs	r3, #27
 8003faa:	2218      	movs	r2, #24
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	19db      	adds	r3, r3, r7
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e013      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003fb6:	231b      	movs	r3, #27
 8003fb8:	2218      	movs	r2, #24
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	19db      	adds	r3, r3, r7
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e00c      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003fc4:	231b      	movs	r3, #27
 8003fc6:	2218      	movs	r2, #24
 8003fc8:	189b      	adds	r3, r3, r2
 8003fca:	19db      	adds	r3, r3, r7
 8003fcc:	2210      	movs	r2, #16
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e005      	b.n	8003fde <UART_SetConfig+0x1fa>
 8003fd2:	231b      	movs	r3, #27
 8003fd4:	2218      	movs	r2, #24
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	19db      	adds	r3, r3, r7
 8003fda:	2210      	movs	r2, #16
 8003fdc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a55      	ldr	r2, [pc, #340]	; (8004138 <UART_SetConfig+0x354>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d000      	beq.n	8003fea <UART_SetConfig+0x206>
 8003fe8:	e084      	b.n	80040f4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fea:	231b      	movs	r3, #27
 8003fec:	2218      	movs	r2, #24
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d01d      	beq.n	8004034 <UART_SetConfig+0x250>
 8003ff8:	dc20      	bgt.n	800403c <UART_SetConfig+0x258>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d015      	beq.n	800402a <UART_SetConfig+0x246>
 8003ffe:	dc1d      	bgt.n	800403c <UART_SetConfig+0x258>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <UART_SetConfig+0x226>
 8004004:	2b02      	cmp	r3, #2
 8004006:	d005      	beq.n	8004014 <UART_SetConfig+0x230>
 8004008:	e018      	b.n	800403c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7ff f9a9 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 800400e:	0003      	movs	r3, r0
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004012:	e01c      	b.n	800404e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004014:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <UART_SetConfig+0x360>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2210      	movs	r2, #16
 800401a:	4013      	ands	r3, r2
 800401c:	d002      	beq.n	8004024 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800401e:	4b4b      	ldr	r3, [pc, #300]	; (800414c <UART_SetConfig+0x368>)
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004022:	e014      	b.n	800404e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004024:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <UART_SetConfig+0x36c>)
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004028:	e011      	b.n	800404e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7ff f8e9 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800402e:	0003      	movs	r3, r0
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004032:	e00c      	b.n	800404e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800403a:	e008      	b.n	800404e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004040:	231a      	movs	r3, #26
 8004042:	2218      	movs	r2, #24
 8004044:	189b      	adds	r3, r3, r2
 8004046:	19db      	adds	r3, r3, r7
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
        break;
 800404c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d100      	bne.n	8004056 <UART_SetConfig+0x272>
 8004054:	e133      	b.n	80042be <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	0013      	movs	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	189b      	adds	r3, r3, r2
 8004060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004062:	429a      	cmp	r2, r3
 8004064:	d305      	bcc.n	8004072 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	429a      	cmp	r2, r3
 8004070:	d906      	bls.n	8004080 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004072:	231a      	movs	r3, #26
 8004074:	2218      	movs	r2, #24
 8004076:	189b      	adds	r3, r3, r2
 8004078:	19db      	adds	r3, r3, r7
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	e11e      	b.n	80042be <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	6939      	ldr	r1, [r7, #16]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	000b      	movs	r3, r1
 800408e:	0e1b      	lsrs	r3, r3, #24
 8004090:	0010      	movs	r0, r2
 8004092:	0205      	lsls	r5, r0, #8
 8004094:	431d      	orrs	r5, r3
 8004096:	000b      	movs	r3, r1
 8004098:	021c      	lsls	r4, r3, #8
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68b8      	ldr	r0, [r7, #8]
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	1900      	adds	r0, r0, r4
 80040ac:	4169      	adcs	r1, r5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f7fc f8b0 	bl	8000220 <__aeabi_uldivmod>
 80040c0:	0002      	movs	r2, r0
 80040c2:	000b      	movs	r3, r1
 80040c4:	0013      	movs	r3, r2
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ca:	23c0      	movs	r3, #192	; 0xc0
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d309      	bcc.n	80040e6 <UART_SetConfig+0x302>
 80040d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	035b      	lsls	r3, r3, #13
 80040d8:	429a      	cmp	r2, r3
 80040da:	d204      	bcs.n	80040e6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	e0eb      	b.n	80042be <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 80040e6:	231a      	movs	r3, #26
 80040e8:	2218      	movs	r2, #24
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e0e4      	b.n	80042be <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d000      	beq.n	8004102 <UART_SetConfig+0x31e>
 8004100:	e086      	b.n	8004210 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8004102:	231b      	movs	r3, #27
 8004104:	2218      	movs	r2, #24
 8004106:	189b      	adds	r3, r3, r2
 8004108:	19db      	adds	r3, r3, r7
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d837      	bhi.n	8004180 <UART_SetConfig+0x39c>
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <UART_SetConfig+0x370>)
 8004114:	18d3      	adds	r3, r2, r3
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411a:	f7ff f921 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 800411e:	0003      	movs	r3, r0
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004122:	e036      	b.n	8004192 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff f932 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 8004128:	0003      	movs	r3, r0
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800412c:	e031      	b.n	8004192 <UART_SetConfig+0x3ae>
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	efff69f3 	.word	0xefff69f3
 8004134:	ffffcfff 	.word	0xffffcfff
 8004138:	40004800 	.word	0x40004800
 800413c:	fffff4ff 	.word	0xfffff4ff
 8004140:	40013800 	.word	0x40013800
 8004144:	40021000 	.word	0x40021000
 8004148:	40004400 	.word	0x40004400
 800414c:	003d0900 	.word	0x003d0900
 8004150:	00f42400 	.word	0x00f42400
 8004154:	08004c88 	.word	0x08004c88
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004158:	4b60      	ldr	r3, [pc, #384]	; (80042dc <UART_SetConfig+0x4f8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2210      	movs	r2, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d002      	beq.n	8004168 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <UART_SetConfig+0x4fc>)
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004166:	e014      	b.n	8004192 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004168:	4b5e      	ldr	r3, [pc, #376]	; (80042e4 <UART_SetConfig+0x500>)
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800416c:	e011      	b.n	8004192 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7ff f847 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8004172:	0003      	movs	r3, r0
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004176:	e00c      	b.n	8004192 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800417e:	e008      	b.n	8004192 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004184:	231a      	movs	r3, #26
 8004186:	2218      	movs	r2, #24
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
        break;
 8004190:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d100      	bne.n	800419a <UART_SetConfig+0x3b6>
 8004198:	e091      	b.n	80042be <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	005a      	lsls	r2, r3, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	18d2      	adds	r2, r2, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0019      	movs	r1, r3
 80041ac:	0010      	movs	r0, r2
 80041ae:	f7fb ffab 	bl	8000108 <__udivsi3>
 80041b2:	0003      	movs	r3, r0
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b0f      	cmp	r3, #15
 80041bc:	d921      	bls.n	8004202 <UART_SetConfig+0x41e>
 80041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d21c      	bcs.n	8004202 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	200e      	movs	r0, #14
 80041ce:	2418      	movs	r4, #24
 80041d0:	1903      	adds	r3, r0, r4
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	210f      	movs	r1, #15
 80041d6:	438a      	bics	r2, r1
 80041d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2207      	movs	r2, #7
 80041e2:	4013      	ands	r3, r2
 80041e4:	b299      	uxth	r1, r3
 80041e6:	1903      	adds	r3, r0, r4
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	1902      	adds	r2, r0, r4
 80041ec:	19d2      	adds	r2, r2, r7
 80041ee:	8812      	ldrh	r2, [r2, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1902      	adds	r2, r0, r4
 80041fa:	19d2      	adds	r2, r2, r7
 80041fc:	8812      	ldrh	r2, [r2, #0]
 80041fe:	60da      	str	r2, [r3, #12]
 8004200:	e05d      	b.n	80042be <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8004202:	231a      	movs	r3, #26
 8004204:	2218      	movs	r2, #24
 8004206:	189b      	adds	r3, r3, r2
 8004208:	19db      	adds	r3, r3, r7
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e056      	b.n	80042be <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004210:	231b      	movs	r3, #27
 8004212:	2218      	movs	r2, #24
 8004214:	189b      	adds	r3, r3, r2
 8004216:	19db      	adds	r3, r3, r7
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d822      	bhi.n	8004264 <UART_SetConfig+0x480>
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <UART_SetConfig+0x504>)
 8004222:	18d3      	adds	r3, r2, r3
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7ff f89a 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 800422c:	0003      	movs	r3, r0
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004230:	e021      	b.n	8004276 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004232:	f7ff f8ab 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 8004236:	0003      	movs	r3, r0
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800423a:	e01c      	b.n	8004276 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <UART_SetConfig+0x4f8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	4013      	ands	r3, r2
 8004244:	d002      	beq.n	800424c <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <UART_SetConfig+0x4fc>)
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800424a:	e014      	b.n	8004276 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <UART_SetConfig+0x500>)
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004250:	e011      	b.n	8004276 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004252:	f7fe ffd5 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8004256:	0003      	movs	r3, r0
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800425a:	e00c      	b.n	8004276 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004262:	e008      	b.n	8004276 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004268:	231a      	movs	r3, #26
 800426a:	2218      	movs	r2, #24
 800426c:	189b      	adds	r3, r3, r2
 800426e:	19db      	adds	r3, r3, r7
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
        break;
 8004274:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	085a      	lsrs	r2, r3, #1
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	18d2      	adds	r2, r2, r3
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0019      	movs	r1, r3
 800428c:	0010      	movs	r0, r2
 800428e:	f7fb ff3b 	bl	8000108 <__udivsi3>
 8004292:	0003      	movs	r3, r0
 8004294:	b29b      	uxth	r3, r3
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b0f      	cmp	r3, #15
 800429c:	d909      	bls.n	80042b2 <UART_SetConfig+0x4ce>
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	025b      	lsls	r3, r3, #9
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d204      	bcs.n	80042b2 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	e005      	b.n	80042be <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80042b2:	231a      	movs	r3, #26
 80042b4:	2218      	movs	r2, #24
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	19db      	adds	r3, r3, r7
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2200      	movs	r2, #0
 80042c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2200      	movs	r2, #0
 80042c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ca:	231a      	movs	r3, #26
 80042cc:	2218      	movs	r2, #24
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	19db      	adds	r3, r3, r7
 80042d2:	781b      	ldrb	r3, [r3, #0]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b00e      	add	sp, #56	; 0x38
 80042da:	bdb0      	pop	{r4, r5, r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	003d0900 	.word	0x003d0900
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	08004cac 	.word	0x08004cac

080042ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2201      	movs	r2, #1
 80042fa:	4013      	ands	r3, r2
 80042fc:	d00b      	beq.n	8004316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <UART_AdvFeatureConfig+0x144>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d00b      	beq.n	8004338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a43      	ldr	r2, [pc, #268]	; (8004434 <UART_AdvFeatureConfig+0x148>)
 8004328:	4013      	ands	r3, r2
 800432a:	0019      	movs	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2204      	movs	r2, #4
 800433e:	4013      	ands	r3, r2
 8004340:	d00b      	beq.n	800435a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <UART_AdvFeatureConfig+0x14c>)
 800434a:	4013      	ands	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2208      	movs	r2, #8
 8004360:	4013      	ands	r3, r2
 8004362:	d00b      	beq.n	800437c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4a34      	ldr	r2, [pc, #208]	; (800443c <UART_AdvFeatureConfig+0x150>)
 800436c:	4013      	ands	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2210      	movs	r2, #16
 8004382:	4013      	ands	r3, r2
 8004384:	d00b      	beq.n	800439e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <UART_AdvFeatureConfig+0x154>)
 800438e:	4013      	ands	r3, r2
 8004390:	0019      	movs	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2220      	movs	r2, #32
 80043a4:	4013      	ands	r3, r2
 80043a6:	d00b      	beq.n	80043c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4a25      	ldr	r2, [pc, #148]	; (8004444 <UART_AdvFeatureConfig+0x158>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	2240      	movs	r2, #64	; 0x40
 80043c6:	4013      	ands	r3, r2
 80043c8:	d01d      	beq.n	8004406 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <UART_AdvFeatureConfig+0x15c>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	035b      	lsls	r3, r3, #13
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d10b      	bne.n	8004406 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <UART_AdvFeatureConfig+0x160>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	0019      	movs	r1, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	4013      	ands	r3, r2
 800440e:	d00b      	beq.n	8004428 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <UART_AdvFeatureConfig+0x164>)
 8004418:	4013      	ands	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b002      	add	sp, #8
 800442e:	bd80      	pop	{r7, pc}
 8004430:	fffdffff 	.word	0xfffdffff
 8004434:	fffeffff 	.word	0xfffeffff
 8004438:	fffbffff 	.word	0xfffbffff
 800443c:	ffff7fff 	.word	0xffff7fff
 8004440:	ffffefff 	.word	0xffffefff
 8004444:	ffffdfff 	.word	0xffffdfff
 8004448:	ffefffff 	.word	0xffefffff
 800444c:	ff9fffff 	.word	0xff9fffff
 8004450:	fff7ffff 	.word	0xfff7ffff

08004454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af02      	add	r7, sp, #8
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	2100      	movs	r1, #0
 8004462:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004464:	f7fc fc02 	bl	8000c6c <HAL_GetTick>
 8004468:	0003      	movs	r3, r0
 800446a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2208      	movs	r2, #8
 8004474:	4013      	ands	r3, r2
 8004476:	2b08      	cmp	r3, #8
 8004478:	d10c      	bne.n	8004494 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	0391      	lsls	r1, r2, #14
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <UART_CheckIdleState+0x8c>)
 8004484:	9200      	str	r2, [sp, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	f000 f82c 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d001      	beq.n	8004494 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e021      	b.n	80044d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2204      	movs	r2, #4
 800449c:	4013      	ands	r3, r2
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d10c      	bne.n	80044bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2280      	movs	r2, #128	; 0x80
 80044a6:	03d1      	lsls	r1, r2, #15
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <UART_CheckIdleState+0x8c>)
 80044ac:	9200      	str	r2, [sp, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f000 f818 	bl	80044e4 <UART_WaitOnFlagUntilTimeout>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d001      	beq.n	80044bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e00d      	b.n	80044d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2274      	movs	r2, #116	; 0x74
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	01ffffff 	.word	0x01ffffff

080044e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b094      	sub	sp, #80	; 0x50
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	1dfb      	adds	r3, r7, #7
 80044f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	e0a3      	b.n	800463e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f8:	3301      	adds	r3, #1
 80044fa:	d100      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80044fc:	e09f      	b.n	800463e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fe:	f7fc fbb5 	bl	8000c6c <HAL_GetTick>
 8004502:	0002      	movs	r2, r0
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <UART_WaitOnFlagUntilTimeout+0x30>
 800450e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004510:	2b00      	cmp	r3, #0
 8004512:	d13d      	bne.n	8004590 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004514:	f3ef 8310 	mrs	r3, PRIMASK
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451c:	647b      	str	r3, [r7, #68]	; 0x44
 800451e:	2301      	movs	r3, #1
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	494c      	ldr	r1, [pc, #304]	; (8004668 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004536:	400a      	ands	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004546:	f3ef 8310 	mrs	r3, PRIMASK
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800454c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454e:	643b      	str	r3, [r7, #64]	; 0x40
 8004550:	2301      	movs	r3, #1
 8004552:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	f383 8810 	msr	PRIMASK, r3
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	438a      	bics	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2274      	movs	r2, #116	; 0x74
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e067      	b.n	8004660 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2204      	movs	r2, #4
 8004598:	4013      	ands	r3, r2
 800459a:	d050      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	401a      	ands	r2, r3
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d146      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ba:	f3ef 8310 	mrs	r3, PRIMASK
 80045be:	613b      	str	r3, [r7, #16]
  return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4923      	ldr	r1, [pc, #140]	; (8004668 <UART_WaitOnFlagUntilTimeout+0x184>)
 80045dc:	400a      	ands	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80045f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f6:	2301      	movs	r3, #1
 80045f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	438a      	bics	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	2120      	movs	r1, #32
 8004630:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2274      	movs	r2, #116	; 0x74
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e010      	b.n	8004660 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	425a      	negs	r2, r3
 800464e:	4153      	adcs	r3, r2
 8004650:	b2db      	uxtb	r3, r3
 8004652:	001a      	movs	r2, r3
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d100      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0x17a>
 800465c:	e74b      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b014      	add	sp, #80	; 0x50
 8004666:	bd80      	pop	{r7, pc}
 8004668:	fffffe5f 	.word	0xfffffe5f

0800466c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	1dbb      	adds	r3, r7, #6
 8004678:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1dba      	adds	r2, r7, #6
 8004684:	2158      	movs	r1, #88	; 0x58
 8004686:	8812      	ldrh	r2, [r2, #0]
 8004688:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1dba      	adds	r2, r7, #6
 800468e:	215a      	movs	r1, #90	; 0x5a
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	015b      	lsls	r3, r3, #5
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d10d      	bne.n	80046c2 <UART_Start_Receive_IT+0x56>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <UART_Start_Receive_IT+0x4c>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	225c      	movs	r2, #92	; 0x5c
 80046b2:	4943      	ldr	r1, [pc, #268]	; (80047c0 <UART_Start_Receive_IT+0x154>)
 80046b4:	5299      	strh	r1, [r3, r2]
 80046b6:	e02e      	b.n	8004716 <UART_Start_Receive_IT+0xaa>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	225c      	movs	r2, #92	; 0x5c
 80046bc:	21ff      	movs	r1, #255	; 0xff
 80046be:	5299      	strh	r1, [r3, r2]
 80046c0:	e029      	b.n	8004716 <UART_Start_Receive_IT+0xaa>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <UART_Start_Receive_IT+0x7a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <UART_Start_Receive_IT+0x70>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	225c      	movs	r2, #92	; 0x5c
 80046d6:	21ff      	movs	r1, #255	; 0xff
 80046d8:	5299      	strh	r1, [r3, r2]
 80046da:	e01c      	b.n	8004716 <UART_Start_Receive_IT+0xaa>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	225c      	movs	r2, #92	; 0x5c
 80046e0:	217f      	movs	r1, #127	; 0x7f
 80046e2:	5299      	strh	r1, [r3, r2]
 80046e4:	e017      	b.n	8004716 <UART_Start_Receive_IT+0xaa>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	055b      	lsls	r3, r3, #21
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10d      	bne.n	800470e <UART_Start_Receive_IT+0xa2>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <UART_Start_Receive_IT+0x98>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	225c      	movs	r2, #92	; 0x5c
 80046fe:	217f      	movs	r1, #127	; 0x7f
 8004700:	5299      	strh	r1, [r3, r2]
 8004702:	e008      	b.n	8004716 <UART_Start_Receive_IT+0xaa>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	225c      	movs	r2, #92	; 0x5c
 8004708:	213f      	movs	r1, #63	; 0x3f
 800470a:	5299      	strh	r1, [r3, r2]
 800470c:	e003      	b.n	8004716 <UART_Start_Receive_IT+0xaa>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	225c      	movs	r2, #92	; 0x5c
 8004712:	2100      	movs	r1, #0
 8004714:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	2100      	movs	r1, #0
 800471c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2222      	movs	r2, #34	; 0x22
 8004722:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	61fb      	str	r3, [r7, #28]
  return(result);
 800472a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472e:	2301      	movs	r3, #1
 8004730:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2101      	movs	r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	015b      	lsls	r3, r3, #5
 800475e:	429a      	cmp	r2, r3
 8004760:	d107      	bne.n	8004772 <UART_Start_Receive_IT+0x106>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <UART_Start_Receive_IT+0x158>)
 800476e:	665a      	str	r2, [r3, #100]	; 0x64
 8004770:	e002      	b.n	8004778 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <UART_Start_Receive_IT+0x15c>)
 8004776:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2274      	movs	r2, #116	; 0x74
 800477c:	2100      	movs	r1, #0
 800477e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004780:	f3ef 8310 	mrs	r3, PRIMASK
 8004784:	613b      	str	r3, [r7, #16]
  return(result);
 8004786:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f383 8810 	msr	PRIMASK, r3
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2190      	movs	r1, #144	; 0x90
 80047a2:	0049      	lsls	r1, r1, #1
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b00c      	add	sp, #48	; 0x30
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	000001ff 	.word	0x000001ff
 80047c4:	08004a7d 	.word	0x08004a7d
 80047c8:	08004915 	.word	0x08004915

080047cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	; 0x38
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d4:	f3ef 8310 	mrs	r3, PRIMASK
 80047d8:	617b      	str	r3, [r7, #20]
  return(result);
 80047da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	2301      	movs	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <UART_EndRxTransfer+0xc0>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004806:	f3ef 8310 	mrs	r3, PRIMASK
 800480a:	623b      	str	r3, [r7, #32]
  return(result);
 800480c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	f383 8810 	msr	PRIMASK, r3
}
 8004836:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	2b01      	cmp	r3, #1
 800483e:	d118      	bne.n	8004872 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004840:	f3ef 8310 	mrs	r3, PRIMASK
 8004844:	60bb      	str	r3, [r7, #8]
  return(result);
 8004846:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484a:	2301      	movs	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2110      	movs	r1, #16
 8004862:	438a      	bics	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f383 8810 	msr	PRIMASK, r3
}
 8004870:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b00e      	add	sp, #56	; 0x38
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffffedf 	.word	0xfffffedf

08004890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	225a      	movs	r2, #90	; 0x5a
 80048a2:	2100      	movs	r1, #0
 80048a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2252      	movs	r2, #82	; 0x52
 80048aa:	2100      	movs	r1, #0
 80048ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff fa83 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b004      	add	sp, #16
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80048cc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	2301      	movs	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2140      	movs	r1, #64	; 0x40
 80048e8:	438a      	bics	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f383 8810 	msr	PRIMASK, r3
}
 80048f6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff fa50 	bl	8003dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	b006      	add	sp, #24
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b090      	sub	sp, #64	; 0x40
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800491c:	203e      	movs	r0, #62	; 0x3e
 800491e:	183b      	adds	r3, r7, r0
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	215c      	movs	r1, #92	; 0x5c
 8004924:	5a52      	ldrh	r2, [r2, r1]
 8004926:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	2b22      	cmp	r3, #34	; 0x22
 800492e:	d000      	beq.n	8004932 <UART_RxISR_8BIT+0x1e>
 8004930:	e095      	b.n	8004a5e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004938:	213c      	movs	r1, #60	; 0x3c
 800493a:	187b      	adds	r3, r7, r1
 800493c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800493e:	187b      	adds	r3, r7, r1
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	183b      	adds	r3, r7, r0
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b2d9      	uxtb	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	400a      	ands	r2, r1
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	225a      	movs	r2, #90	; 0x5a
 8004962:	5a9b      	ldrh	r3, [r3, r2]
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b299      	uxth	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	225a      	movs	r2, #90	; 0x5a
 800496e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	225a      	movs	r2, #90	; 0x5a
 8004974:	5a9b      	ldrh	r3, [r3, r2]
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d178      	bne.n	8004a6e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	61bb      	str	r3, [r7, #24]
  return(result);
 8004982:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4936      	ldr	r1, [pc, #216]	; (8004a78 <UART_RxISR_8BIT+0x164>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	2301      	movs	r3, #1
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d12f      	bne.n	8004a54 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fa:	f3ef 8310 	mrs	r3, PRIMASK
 80049fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a00:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
 8004a04:	2301      	movs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2110      	movs	r1, #16
 8004a1c:	438a      	bics	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	2210      	movs	r2, #16
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d103      	bne.n	8004a42 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2258      	movs	r2, #88	; 0x58
 8004a46:	5a9a      	ldrh	r2, [r3, r2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0011      	movs	r1, r2
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff f9bd 	bl	8003dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a52:	e00c      	b.n	8004a6e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7fb ff23 	bl	80008a2 <HAL_UART_RxCpltCallback>
}
 8004a5c:	e007      	b.n	8004a6e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2108      	movs	r1, #8
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	619a      	str	r2, [r3, #24]
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b010      	add	sp, #64	; 0x40
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	fffffedf 	.word	0xfffffedf

08004a7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b090      	sub	sp, #64	; 0x40
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a84:	203e      	movs	r0, #62	; 0x3e
 8004a86:	183b      	adds	r3, r7, r0
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	215c      	movs	r1, #92	; 0x5c
 8004a8c:	5a52      	ldrh	r2, [r2, r1]
 8004a8e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	d000      	beq.n	8004a9a <UART_RxISR_16BIT+0x1e>
 8004a98:	e095      	b.n	8004bc6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa0:	213c      	movs	r1, #60	; 0x3c
 8004aa2:	187b      	adds	r3, r7, r1
 8004aa4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004aac:	187b      	adds	r3, r7, r1
 8004aae:	183a      	adds	r2, r7, r0
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	8812      	ldrh	r2, [r2, #0]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	225a      	movs	r2, #90	; 0x5a
 8004aca:	5a9b      	ldrh	r3, [r3, r2]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	225a      	movs	r2, #90	; 0x5a
 8004ad6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	225a      	movs	r2, #90	; 0x5a
 8004adc:	5a9b      	ldrh	r3, [r3, r2]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d178      	bne.n	8004bd6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4936      	ldr	r1, [pc, #216]	; (8004be0 <UART_RxISR_16BIT+0x164>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f383 8810 	msr	PRIMASK, r3
}
 8004b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b16:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b1c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	438a      	bics	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d12f      	bne.n	8004bbc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b68:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2110      	movs	r1, #16
 8004b84:	438a      	bics	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d103      	bne.n	8004baa <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2258      	movs	r2, #88	; 0x58
 8004bae:	5a9a      	ldrh	r2, [r3, r2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff f909 	bl	8003dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bba:	e00c      	b.n	8004bd6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7fb fe6f 	bl	80008a2 <HAL_UART_RxCpltCallback>
}
 8004bc4:	e007      	b.n	8004bd6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2108      	movs	r1, #8
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b010      	add	sp, #64	; 0x40
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	fffffedf 	.word	0xfffffedf

08004be4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	4d0c      	ldr	r5, [pc, #48]	; (8004c2c <__libc_init_array+0x38>)
 8004bfa:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	2600      	movs	r6, #0
 8004c06:	f000 f821 	bl	8004c4c <_init>
 8004c0a:	4d0a      	ldr	r5, [pc, #40]	; (8004c34 <__libc_init_array+0x40>)
 8004c0c:	4c0a      	ldr	r4, [pc, #40]	; (8004c38 <__libc_init_array+0x44>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	00b3      	lsls	r3, r6, #2
 8004c1a:	58eb      	ldr	r3, [r5, r3]
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	00b3      	lsls	r3, r6, #2
 8004c24:	58eb      	ldr	r3, [r5, r3]
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08004cd8 	.word	0x08004cd8
 8004c30:	08004cd8 	.word	0x08004cd8
 8004c34:	08004cd8 	.word	0x08004cd8
 8004c38:	08004cdc 	.word	0x08004cdc

08004c3c <memset>:
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	1882      	adds	r2, r0, r2
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d100      	bne.n	8004c46 <memset+0xa>
 8004c44:	4770      	bx	lr
 8004c46:	7019      	strb	r1, [r3, #0]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	e7f9      	b.n	8004c40 <memset+0x4>

08004c4c <_init>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr

08004c58 <_fini>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr
